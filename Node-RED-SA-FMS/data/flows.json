[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Control Simulation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bb32693f1e238fb3",
        "type": "tab",
        "label": "Telegram Comands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "042284347e59efcf",
        "type": "tab",
        "label": "Allert and Report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "974a61a99863234b",
        "type": "tab",
        "label": "Grafana",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29769fa64d96c13b",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cbf2748df1bc57f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "influxdb-SA-FMS",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "227d6c6a69368223",
        "type": "telegram bot",
        "botname": "Smart Agriculture - Field Monitoring System",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "24f8f90e89fb0dcc",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "mosquitto-SA-FMS",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 390,
        "y": 80,
        "wires": []
    },
    {
        "id": "097e2d6989399613",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Control Simulation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 180,
        "wires": []
    },
    {
        "id": "c405962fedb7682e",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "6ffb6578101f98d9",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/start",
        "payload": "avvio",
        "payloadType": "str",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613",
                "c3658e8c395688ef"
            ]
        ]
    },
    {
        "id": "7e16ef8e85ef6056",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/stop",
        "payload": "stop",
        "payloadType": "str",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613",
                "92afd731d3dbf926"
            ]
        ]
    },
    {
        "id": "c3658e8c395688ef",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "link out start sim",
        "mode": "link",
        "links": [
            "f1db4e2770ca5997"
        ],
        "x": 595,
        "y": 360,
        "wires": []
    },
    {
        "id": "92afd731d3dbf926",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "link out stop sim",
        "mode": "link",
        "links": [
            "44df0d1686a26b90"
        ],
        "x": 595,
        "y": 400,
        "wires": []
    },
    {
        "id": "5b2e14e9b6cbd2fa",
        "type": "influxdb in",
        "z": "f6f2187d.f17ca8",
        "influxdb": "8cbf2748df1bc57f",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "4d2dd74fee2521e2"
            ]
        ]
    },
    {
        "id": "538d7385b4eb041a",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "query",
                "v": "from(bucket: \"SA-FMS\")\t  |> range(start: -5000ms)\t  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\t  |> group(columns: [\"field_id\", \"sensor_type\"])\t  |> last()",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "5b2e14e9b6cbd2fa"
            ]
        ]
    },
    {
        "id": "4d2dd74fee2521e2",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Influx",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "9e890f19a0dbdff1",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/config",
        "payload": "{\"initialWeather\":\"HEAVY_RAIN\",\"fields\":[{\"fieldId\":1,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":true,\"humidity\":true,\"rain\":true}},{\"fieldId\":2,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":true,\"humidity\":true,\"rain\":true}},{\"fieldId\":3,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":true,\"humidity\":true,\"rain\":true}}],\"interval\":5000}",
        "payloadType": "json",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "7caf06a916b3fdaf",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/update",
        "payload": "{\"weather\":\"HURRICANE\",\"interval\":5000,\"temperature\":24.5,\"humidity\":0.01}",
        "payloadType": "json",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "c5cd4f257d9344ee",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/config/get",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/config/get",
        "payload": "GET CURRENT CONFIGURATION",
        "payloadType": "str",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "e51026e420201b5b",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "sensors/simulation/config/current",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "22c610fd78c1c732",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Active Internal Debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 340,
        "y": 600,
        "wires": [
            [
                "fc2f8f38ed76a812"
            ]
        ]
    },
    {
        "id": "fc2f8f38ed76a812",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Set Internal Debug",
        "func": "global.set(\"internalDebug\", msg.payload);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 600,
        "wires": []
    },
    {
        "id": "ce1e9cdc1195b46e",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Deactive Internal Debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 340,
        "y": 640,
        "wires": [
            [
                "fc2f8f38ed76a812"
            ]
        ]
    },
    {
        "id": "e1ef453bd63ae7bb",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "4e14f0c4c6142568"
            ],
            []
        ]
    },
    {
        "id": "4e14f0c4c6142568",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "/help",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar storedChats = global.get('chats') || []; // Recupera i dati salvati per le chat o un array vuoto.\nvar chats = new Map(storedChats);\nif (!chats.has(chatContextKey)) {\n    chats.set(chatContextKey, true);\n    global.set('chats', Array.from(chats.entries()));\n}\n\nvar helpMessage = \"\\n\";\nhelpMessage += \"\\nYou are welcome: <strong>\" + msg.originalMessage.from.username + \"</strong>\";\nhelpMessage += \"\\nThis Bot will allow you to manage the entire <strong>Smart Agriculture - Field Monitoring System</strong> project simulation.\"\nhelpMessage += \"\\n\";\nhelpMessage += \"\\nYour chat id is <strong>\" + chatId + \"</strong>\";\nhelpMessage += \"\\n\";\nhelpMessage += chats.has(chatContextKey) && chats.get(chatContextKey) ? \"\\nAlerts have been <strong>activated</strong> for this chat!\" : \"\\nAlerts have been <strong>deactivated</strong> for this chat!\";\nhelpMessage += \"\\n\";\n\nhelpMessage += \"\\nHere is a short list of commands:\";\nhelpMessage += \"\\n/help - Shows Help Messagge.\";\nhelpMessage += \"\\n/set_simulation - Set all simumaltion parameters.\";\nhelpMessage += \"\\n/update_simulation_condition - Update the simulation condition.\"\nhelpMessage += \"\\n/current_configuration - Gets the current configuration of the sensor simulator.\"\nhelpMessage += \"\\n/toggle_alert - Enable or disable the reception of alerts.\"\n\nhelpMessage += \"\\n\";\n\n\n\nmsg.payload.content = helpMessage;\nmsg.payload.options = {\n    parse_mode: 'HTML',\n    reply_parameters: {\n        message_id: msg.payload.messageId\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "2e0f652a39c75081"
            ]
        ]
    },
    {
        "id": "2e0f652a39c75081",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "ada578badb666345"
            ]
        ]
    },
    {
        "id": "549bf0869dbbd4e3",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/help",
        "description": "Show Helper",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "4e14f0c4c6142568"
            ],
            []
        ]
    },
    {
        "id": "ada578badb666345",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "Sender",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "ac765d6f9de4dc68",
        "type": "catch",
        "z": "bb32693f1e238fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "583ccf3067d7ba51"
            ]
        ]
    },
    {
        "id": "583ccf3067d7ba51",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "catch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "286f27e7f2a30e5b",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/set_simulation",
        "description": "Set all the settings of the sensor simulator",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "07fa96347a7bd9a9",
                "caedbe9a15ad2ed7",
                "149101f4987ee626"
            ],
            []
        ]
    },
    {
        "id": "07fa96347a7bd9a9",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard SetSimulation Step 0 ",
        "func": "var opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n      {\n        \"text\": \"Yes\",\n        \"callback_data\": \"S0 YES\"\n      },\n      {\n        \"text\": \"No\",\n        \"callback_data\": \"S0 NO\"\n      }]\n    ]\n  })\n};\nmsg.payload.content = 'Are you sure you want to set a different agricultural field simulation?';\nmsg.payload.options = opts;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "3d9ca55109792442"
            ]
        ]
    },
    {
        "id": "3d9ca55109792442",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "ece669d52b049dd7"
            ]
        ]
    },
    {
        "id": "ece669d52b049dd7",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToReplaySettings = msg.payload.messageId;\nchatContext.messageIdSettings = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 260,
        "wires": []
    },
    {
        "id": "2587aecf2d9cafb2",
        "type": "telegram event",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "event": "callback_query",
        "autoanswer": false,
        "x": 260,
        "y": 2000,
        "wires": [
            [
                "94b59fc68cf6bccd",
                "caedbe9a15ad2ed7"
            ]
        ]
    },
    {
        "id": "a2fe17dca5d86712",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "SCancel \\n S0 \\n S1 \\n S2 \\n S3 \\n S4 \\n S5 \\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "SCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^S0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S5",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 640,
        "y": 2000,
        "wires": [
            [
                "fd921968d712568a"
            ],
            [
                "802ed589f7c585ee"
            ],
            [
                "66e574831f702cd4"
            ],
            [
                "a9f704d0090e9cb0"
            ],
            [
                "c9a56ef7f94a25f7"
            ],
            [
                "69d9ae7795d0e005"
            ],
            [
                "3b1d37ce65c4a985"
            ],
            []
        ]
    },
    {
        "id": "802ed589f7c585ee",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard SetSimulation Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"FOO YES\" o \"FOO NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"S0 YES\") {\n    newText = \"Great, let's get started!!! \\r\\n\\r\\nHow many agricultural fields do you want to simulate this time?\";\n} else if (userChoice === \"S0 NO\") {\n    newText = \"OK, you can reuse the /set_simulation command when you are <strong>ready to change the simulation settings</strong>!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\n// Prepara il messaggio per modificare il testo e rimuovere la tastiera inline\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"1️⃣\",\n            \"callback_data\": \"S1 1\"\n        },\n        {\n            \"text\": \"2️⃣\",\n            \"callback_data\": \"S1 2\"\n        },\n        {\n            \"text\": \"3️⃣\",\n            \"callback_data\": \"S1 3\"\n        }\n    ],\n    [\n        {\n            \"text\": \"4️⃣\",\n            \"callback_data\": \"S1 4\"\n        },\n        {\n            \"text\": \"5️⃣\",\n            \"callback_data\": \"S1 5\"\n        },\n        {\n            \"text\": \"6️⃣\",\n            \"callback_data\": \"S1 6\"\n        }\n    ],\n    [{\n        \"text\": \"❌   ABORT   ❌\",\n        \"callback_data\": \"SCancel\"\n    }\n    ]] // Modifica la tastiera\n});\n\nif (userChoice === \"S0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdSettings,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageIdSettings,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageIdSettings;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1940,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "7da069185bf6891a",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1450,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "fd921968d712568a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort SetSimulation",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar settingSimulationContext = chatContext.settingSimulationContext;\nif (settingSimulationContext) {\n    delete chatContext.settingSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /set_simulation command when you are <strong>ready to change the simulation settings</strong>!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdSettings,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageIdToReplaySettings;\ndelete chatContext.messageIdSettings;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1900,
        "wires": [
            [
                "7da069185bf6891a",
                "20b3b83c60c12de1"
            ]
        ]
    },
    {
        "id": "66e574831f702cd4",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva il numero di campi e presenta Keyboard Step 2 Sensori",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar settingSimulationContext = chatContext.settingSimulationContext || {};\nsettingSimulationContext.newSetting = {\n    total_field: parseInt(msg.payload.content.split(\" \")[1]),\n    courrent_field: 1,\n    next_field: parseInt(msg.payload.content.split(\" \")[1]) > 1 ? 2 : 1\n};\n\n\nchatContext.settingSimulationContext = settingSimulationContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: settingSimulationContext=\" + JSON.stringify(settingSimulationContext));\n}\n\n\nvar newText = \"OK, we have \" + msg.payload.content.split(\" \")[1] + \" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nLet's start with field number 1. \\r\\nSelect the sensors that are present on field number 1:\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"📡 ALL SENSORS @ FIELD 1 📡\",\n            \"callback_data\": \"S2 ALL 1\"\n        }],\n    [\n        {\n            \"text\": \"🔲 Soil Moisture\",\n            \"callback_data\": \"S2 11 1\"\n        },\n        {\n            \"text\": \"🔲 Temperature\",\n            \"callback_data\": \"S2 21 1\"\n        }],\n    [\n        {\n            \"text\": \"🔲 Soil Ph\",\n            \"callback_data\": \"S2 31 1\"\n        },\n        {\n            \"text\": \"🔲 Water Salinity\",\n            \"callback_data\": \"S2 41 1\"\n        }],\n    [\n        {\n            \"text\": \"🔲 Relative Humidity\",\n            \"callback_data\": \"S2 51 1\"\n        },\n        {\n            \"text\": \"🔲 Rainfall\",\n            \"callback_data\": \"S2 61 1\"\n        }],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdSettings\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1980,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "a2103770cb63c5b0",
        "type": "comment",
        "z": "bb32693f1e238fb3",
        "name": "SET SIMULATION \\n \\n SCancel \\n The SCancel step is used to cancel the process of creating a new setting.\\n \\n S0\\n The S0 step is used to ask the user if they wish to start a new setting.\\n \\n S1\\n Step S1 is for specifying the number of farm fields, between 1 and 6.\\n \\n S2\\n Step S2 allows the user to indicate which sensors are present in each agricultural field.\\n  This step is iterated until the S2 OK or S2 ALL command is received.\\n \\n S2 OK and S2 ALL\\n Steps S2 OK and S2 ALL are used to confirm the selection of sensors for the current agricultural field.\\n \\n S3\\n Step S3 is used to define the starting climatic conditions that will be applied to all agricultural fields in the simulation.\\n \\n S4\\n Step S4 presents a summary of the configuration and requires confirmation to proceed.\\n \\n S5\\n Step S5 concludes the process of creating a new setting by sending it to the simulation server.",
        "info": "# Italiano\n---\n\n# SCancel\nLo step **SCancel** serve per annullare il processo di creazione di un nuovo settaggio.\n\n# S0\nLo step **S0** serve per chiedere all'utente se desidera iniziare un nuovo settaggio.\n\n# S1\nLo step **S1** consente di specificare il numero di campi agricoli, compreso tra 1 e 6.\n\n# S2\nLo step **S2** permette di indicare quali sensori sono presenti in ciascun campo agricolo.\n\nQuesto step viene iterato fino a ricevere il comando **S2 OK** o **S2 ALL**.\n\n# S2 OK e S2 ALL\nGli step **S2 OK** e **S2 ALL** servono per confermare la selezione dei sensori per il campo agricolo corrente.\n\n# S3\nLo step **S3** consente di definire le condizioni climatiche di partenza che saranno applicate a tutti i campi agricoli nella simulazione.\n\n# S4\nLo step **S4** presenta un riepilogo della configurazione e richiede conferma per procedere.\n\n# S5\nLo step **S5** conclude il processo di creazione di un nuovo settaggio, inviandolo al server di simulazione.\n\n<br><br><br>\n\n# English\n---\n# SCancel\nThe **SCancel** step is used to cancel the process of creating a new setting.\n\n# S0\nThe **S0** step is used to ask the user if they wish to start a new setting.\n\n# S1\nStep **S1** is for specifying the number of farm fields, between 1 and 6.\n\n# S2\nStep **S2** allows the user to indicate which sensors are present in each agricultural field.\n\nThis step is iterated until the **S2 OK** or **S2 ALL** command is received.\n\n# S2 OK and S2 ALL\nSteps **S2 OK** and **S2 ALL** are used to confirm the selection of sensors for the current agricultural field.\n\n# S3\nStep **S3** is used to define the starting climatic conditions that will be applied to all agricultural fields in the simulation.\n\n# S4\nStep **S4** presents a summary of the configuration and requires confirmation to proceed.\n\n# S5\nStep **S5** concludes the process of creating a new setting by sending it to the simulation server.",
        "x": 970,
        "y": 1540,
        "wires": []
    },
    {
        "id": "2f75cbe1fc45b92d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva, check next_field, question weather",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// Inizializza fields_configuration come un dizionario (oggetto) se non esiste\nvar fields_configuration = newSetting.fields_configuration || {};\n\n// S2 ALL #F  \nvar messageCode = msg.payload.content.split(\" \");\nvar command = messageCode[1];\nswitch (command) {\n    case \"ALL\":\n        fields_configuration[newSetting.courrent_field] = {\n            soilMoisture: true,\n            temperature: true,\n            soilPh: true,\n            waterSalinity: true,\n            relativeHumidity: true,\n            rainfall: true\n        };\n        newSetting.fields_configuration = fields_configuration;\n        break;\n    case \"OK\":\n        break;\n}\n\nif (chatContext.settingSimulationContext.newSetting.total_field > chatContext.settingSimulationContext.newSetting.courrent_field) {\n    chatContext.settingSimulationContext.newSetting.courrent_field = chatContext.settingSimulationContext.newSetting.courrent_field + 1;\n\n    // Presentare nuova keyboard per il prossimo campo\n\n    var newText = \"OK, we have \" + chatContext.settingSimulationContext.newSetting.total_field + \" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nSelect the sensors that are present on field number \" + chatContext.settingSimulationContext.newSetting.courrent_field + \" :\";\n\n    // Base dell'inline_keyboard\n    var inline_keyboard = [\n        [\n            {\n                \"text\": \"📡 ALL SENSORS @ FIELD \" + newSetting.courrent_field + \" 📡\",\n                \"callback_data\": \"S2 ALL \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Soil Moisture\",\n                \"callback_data\": \"S2 11 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Temperature\",\n                \"callback_data\": \"S2 21 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Soil Ph\",\n                \"callback_data\": \"S2 31 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Water Salinity\",\n                \"callback_data\": \"S2 41 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Relative Humidity\",\n                \"callback_data\": \"S2 51 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Rainfall\",\n                \"callback_data\": \"S2 61 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"❌   ABORT   ❌\",\n                \"callback_data\": \"SCancel\"\n            }\n        ]\n    ];\n\n    // Converti in JSON\n    var reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdSettings\n    };\n\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    return msg;\n}\n\nvar newText = \"Great! \\r\\nWe have finished the configuration related to the sensors on the agricultural fields! \\r\\nNow you need to decide what weather condition is present on your farmland. \\r\\n\\r\\nSelect one of the following conditions: \";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"☀️ Sunny ☀️\",\n            \"callback_data\": \"S3 SUNNY\"\n        }],\n    [\n        {\n            \"text\": \"☁️ Cloudy ☁️\",\n            \"callback_data\": \"S3 CLOUDY \"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌦️ Light Rain 🌦️\",\n            \"callback_data\": \"S3 LIGHT_RAIN \"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌧️ Moderate Rain 🌧️\",\n            \"callback_data\": \"S3 MODERATE_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"⛈️ Heavy Rain ⛈️\",\n            \"callback_data\": \"S3 HEAVY_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌀 Hurricane 🌀\",\n            \"callback_data\": \"S3 HURRICANE\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }]\n    ]\n});\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdSettings\n};\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 2040,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "a9f704d0090e9cb0",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "S2 OK \\n S2 ALL \\n S2",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^S2 OK",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S2 ALL",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 860,
        "y": 2060,
        "wires": [
            [
                "2f75cbe1fc45b92d"
            ],
            [
                "2f75cbe1fc45b92d"
            ],
            [
                "11a5c5289706988e"
            ]
        ]
    },
    {
        "id": "11a5c5289706988e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva, cambia stato alla keyboard",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S2 11 #F  \nvar messageCode = msg.payload.content.split(\" \");\n\n// Inizializza fields_configuration come un dizionario (oggetto) se non esiste\nvar fields_configuration = newSetting.fields_configuration || {};\n\n// Assicurati che la chiave corrente esista in fields_configuration\nif (!fields_configuration[newSetting.courrent_field]) {\n    fields_configuration[newSetting.courrent_field] = {\n        soilMoisture: false,\n        temperature: false,\n        soilPh: false,\n        waterSalinity: false,\n        relativeHumidity: false,\n        rainfall: false\n    };\n}\n\n// Verifica che il campo specificato nel messaggio corrisponda al campo corrente\nif (parseInt(messageCode[2]) !== newSetting.courrent_field) {\n    node.error(\"Il campo non corrisponde al campo corrente\");\n}\n\n// Determina il sensore e il valore booleano dal codice sensore\nvar sensorType = messageCode[1][0]; // Primo carattere del secondo elemento\nvar sensorValue = messageCode[1][1] === \"1\"; // Converte \"1\" in true e \"0\" in false\n\n// Utilizza il primo carattere di messageCode[1] per aggiornare i valori\nswitch (sensorType) {\n    case \"1\":\n        fields_configuration[newSetting.courrent_field].soilMoisture = sensorValue;\n        break;\n    case \"2\":\n        fields_configuration[newSetting.courrent_field].temperature = sensorValue;\n        break;\n    case \"3\":\n        fields_configuration[newSetting.courrent_field].soilPh = sensorValue;\n        break;\n    case \"4\":\n        fields_configuration[newSetting.courrent_field].waterSalinity = sensorValue;\n        break;\n    case \"5\":\n        fields_configuration[newSetting.courrent_field].relativeHumidity = sensorValue;\n        break;\n    case \"6\":\n        fields_configuration[newSetting.courrent_field].rainfall = sensorValue;\n        break;\n}\n\nnewSetting.fields_configuration = fields_configuration;\n\nvar iconS1 = fields_configuration[newSetting.courrent_field].soilMoisture ? \"✅\" : \"🔲\";\nvar valS1 = fields_configuration[newSetting.courrent_field].soilMoisture ? \"0\" : \"1\";\n\nvar iconS2 = fields_configuration[newSetting.courrent_field].temperature ? \"✅\" : \"🔲\";\nvar valS2 = fields_configuration[newSetting.courrent_field].temperature ? \"0\" : \"1\";\n\nvar iconS3 = fields_configuration[newSetting.courrent_field].soilPh ? \"✅\" : \"🔲\";\nvar valS3 = fields_configuration[newSetting.courrent_field].soilPh ? \"0\" : \"1\";\n\nvar iconS4 = fields_configuration[newSetting.courrent_field].waterSalinity ? \"✅\" : \"🔲\";\nvar valS4 = fields_configuration[newSetting.courrent_field].waterSalinity ? \"0\" : \"1\";\n\nvar iconS5 = fields_configuration[newSetting.courrent_field].relativeHumidity ? \"✅\" : \"🔲\";\nvar valS5 = fields_configuration[newSetting.courrent_field].relativeHumidity ? \"0\" : \"1\";\n\nvar iconS6 = fields_configuration[newSetting.courrent_field].rainfall ? \"✅\" : \"🔲\";\nvar valS6 = fields_configuration[newSetting.courrent_field].rainfall ? \"0\" : \"1\";\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"📡 ALL SENSORS @ FIELD \" + newSetting.courrent_field + \" 📡\",\n            \"callback_data\": \"S2 ALL \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS1 + \" Soil Moisture\",\n            \"callback_data\": \"S2 1\" + valS1 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS2 + \" Temperature\",\n            \"callback_data\": \"S2 2\" + valS2 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS3 + \" Soil Ph\",\n            \"callback_data\": \"S2 3\" + valS3 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS4 + \" Water Salinity\",\n            \"callback_data\": \"S2 4\" + valS4 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS5 + \" Relative Humidity\",\n            \"callback_data\": \"S2 5\" + valS5 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS6 + \" Rainfall\",\n            \"callback_data\": \"S2 6\" + valS6 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n\n// Aggiungi un altro pulsante accanto ad ABORT per il prossimo campo\nif (chatContext.settingSimulationContext.newSetting.total_field == chatContext.settingSimulationContext.newSetting.courrent_field) { // Sostituisci `someCondition` con la tua condizione\n    // Debug\n    if (global.get(\"internalDebug\")) {\n        node.warn(\"ESEGUO BOTTONE CONFIRMATION\");\n    }\n    inline_keyboard[inline_keyboard.length - 1].push({\n        \"text\": \"✔️ CONFIRMATION ✔️\",\n        \"callback_data\": \"S2 OK \" + newSetting.courrent_field\n    });\n} else {\n    inline_keyboard[inline_keyboard.length - 1].push({\n        \"text\": \"🏞️ 🚜 NEXT FIELD 🚜 🏞️\",\n        \"callback_data\": \"S2 OK \" + newSetting.courrent_field\n    });\n}\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdSettings\n};\n\nvar newText = \"OK, we have \" + newSetting.total_field + \" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nSelect the sensors that are present on field number \" + newSetting.courrent_field + \" :\";\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2080,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "c9a56ef7f94a25f7",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva e prensenta interval",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S3 HURRICANE  \nvar messageCode = msg.payload.content.split(\" \");\n\nnewSetting.initialWeather = messageCode[1];\n\nchatContext.settingSimulationContext.newSetting = newSetting;\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"DEFAULT 5 sec\",\n            \"callback_data\": \"S4 5000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"1 sec\",\n            \"callback_data\": \"S4 1000\"\n        },\n        {\n            \"text\": \"2 sec\",\n            \"callback_data\": \"S4 2000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"10 sec\",\n            \"callback_data\": \"S4 10000\"\n        },\n        {\n            \"text\": \"15 sec\",\n            \"callback_data\": \"S4 15000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30 sec\",\n            \"callback_data\": \"S4 30000\"\n        },\n        {\n            \"text\": \"1 min\",\n            \"callback_data\": \"S4 60000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdSettings\n};\n\nvar newText = \"Excellent! \\r\\n\\r\\nNow all that remains is to determine how often the sensors will update. \\r\\n\\r\\nSelect the time interval from those present:\";\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2160,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "69d9ae7795d0e005",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva e fa il riepilogo della configurazione",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S4 5000  \nvar messageCode = msg.payload.content.split(\" \");\n\nnewSetting.interval = messageCode[1];\n\nchatContext.settingSimulationContext.newSetting = newSetting;\n\nvar input = newSetting;\n\nvar result = {\n    initialWeather: input.initialWeather,\n    fields: Object.entries(input.fields_configuration).map(([fieldId, sensors]) => ({\n        fieldId: parseInt(fieldId, 10), // Converti la chiave in numero\n        sensors: {\n            soilMoisture: sensors.soilMoisture,\n            temperature: sensors.temperature,\n            ph: sensors.soilPh, // Rinominato da soilPh a ph\n            salinity: sensors.waterSalinity, // Rinominato da waterSalinity a salinity\n            humidity: sensors.relativeHumidity, // Rinominato da relativeHumidity a humidity\n            rain: sensors.rainfall // Rinominato da rainfall a rain\n        }\n    })),\n    interval: parseInt(input.interval, 10)\n};\n\n\n//var newText = \"Excellent! \\r\\nThis is a summary of the configuration. ``` \\r\\n \" + JSON.stringify(result, null, 2) +  \"\\r\\n```  \\r\\nDo you want to confirm?\";\nvar newText = \"Excellent!\\r\\nThis is a summary of the configuration:<pre>\" + JSON.stringify(result, null, 2) + \"</pre>Do you want to confirm?\";\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"Yes\",\n            \"callback_data\": \"S5\"\n        },\n        {\n            \"text\": \"NO\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    parse_mode: 'HTML',\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdSettings\n};\n\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2220,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "3b1d37ce65c4a985",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia il json MQTT",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdSettings) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar replyText = \"<strong>Configuration Saved</strong> and Sent to Server!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'HTML'\n        },\n        content: replyText\n    }\n};\n\nif (chatContext.messageIdToReplaySettings) {\n    sendTextMessage.payload.options.reply_parameters = {\n        message_id: chatContext.messageIdToReplaySettings\n    };\n}\n\nvar deleteInlineMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdSettings\n    }\n};\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\nvar input = newSetting;\n\nvar result = {\n    initialWeather: input.initialWeather,\n    fields: Object.entries(input.fields_configuration).map(([fieldId, sensors]) => ({\n        fieldId: parseInt(fieldId, 10), // Converti la chiave in numero\n        sensors: {\n            soilMoisture: sensors.soilMoisture,\n            temperature: sensors.temperature,\n            ph: sensors.soilPh, // Rinominato da soilPh a ph\n            salinity: sensors.waterSalinity, // Rinominato da waterSalinity a salinity\n            humidity: sensors.relativeHumidity, // Rinominato da relativeHumidity a humidity\n            rain: sensors.rainfall // Rinominato da rainfall a rain\n        }\n    })),\n    interval: parseInt(input.interval, 10)\n};\n\nvar congifMessage = {\n    payload: result,\n    topic: 'sensors/simulation/config'\n}\n\ndelete chatContext.settingSimulationContext;\ndelete chatContext.messageIdToReplaySettings;\ndelete chatContext.messageIdSettings;\n\nflow.set(chatContextKey, chatContext);\n\nreturn [sendTextMessage, deleteInlineMessage, congifMessage];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2280,
        "wires": [
            [
                "7da069185bf6891a",
                "20b3b83c60c12de1"
            ],
            [
                "7da069185bf6891a"
            ],
            [
                "a1bcd6bd9e3c2553",
                "2e829639469c3d9d"
            ]
        ]
    },
    {
        "id": "a1bcd6bd9e3c2553",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 1470,
        "y": 2100,
        "wires": []
    },
    {
        "id": "15566d22a530722b",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/current_configuration",
        "description": "Gets the current configuration of the sensor simulator",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "2c71e861f8e05533",
                "caedbe9a15ad2ed7"
            ],
            []
        ]
    },
    {
        "id": "ba126469fe6188bd",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config/get",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 860,
        "y": 380,
        "wires": []
    },
    {
        "id": "2c71e861f8e05533",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva il idMessaggio",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdCurrentConfig = msg.payload.messageId;\n\nflow.set(chatContextKey, chatContext);\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}\nmsg.payload = \"GET CURRENT CONFIGURATION\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "ba126469fe6188bd"
            ]
        ]
    },
    {
        "id": "cdbff278454bf9c3",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "rispondi con current Configuration",
        "func": "// Ottieni tutte le chiavi dal contesto flow\nvar allKeys = flow.keys();\n\n// Filtra solo le chiavi che iniziano con \"chat_\"\nvar chatKeys = allKeys.filter(key => key.startsWith(\"chat_\"));\n\n// Prepara un array per i messaggi da inviare\nvar messages = [];\n\n// Scorri tutte le chiavi delle chat e verifica se hanno messageIdCurrentConfig\nchatKeys.forEach(chatKey => {\n    var chatContext = flow.get(chatKey);\n\n    // Verifica se la proprietà \"messageIdCurrentConfig\" esiste\n    if (chatContext && chatContext.messageIdCurrentConfig) {\n        // Prepara il messaggio per questa chat\n        var chatId = chatKey.replace(\"chat_\", \"\"); // Estrai l'ID della chat\n        messages.push({\n            chatId: parseInt(chatId, 10),\n            content: \"This is the current configuration of the simulation: <pre>\" + JSON.stringify(msg.payload, null, 2) + \"</pre>\",\n            type: \"message\",\n            options: {\n                parse_mode: \"HTML\",\n                reply_parameters: {\n                    message_id: chatContext.messageIdCurrentConfig\n                }\n            },\n\n        });\n    }\n});\n\n// Se ci sono messaggi da inviare, impostali come array in msg.payload\nif (messages.length > 0) {\n    var resp = {}\n    resp.payload = messages;\n    return resp; // Ritorna il messaggio per il successivo nodo\n} else {\n    // Debug\n    if (global.get(\"internalDebug\")) {\n        node.warn(\"Nessuna chat con messageIdCurrentConfig trovata!\");\n    }\n    return null; // Nessun messaggio da inviare\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 440,
        "wires": [
            [
                "7c5624cbfaf2871e"
            ]
        ]
    },
    {
        "id": "3e32583081d0b615",
        "type": "mqtt in",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config/current",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "cdbff278454bf9c3",
                "4694cfe12c3638e1"
            ]
        ]
    },
    {
        "id": "7c5624cbfaf2871e",
        "type": "split",
        "z": "bb32693f1e238fb3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 890,
        "y": 440,
        "wires": [
            [
                "a8dc04826bc75e23"
            ]
        ]
    },
    {
        "id": "a8dc04826bc75e23",
        "type": "change",
        "z": "bb32693f1e238fb3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 440,
        "wires": [
            [
                "a651ef8769d332eb"
            ]
        ]
    },
    {
        "id": "a651ef8769d332eb",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1230,
        "y": 440,
        "wires": [
            [
                "811941ebe4c7febb"
            ]
        ]
    },
    {
        "id": "4694cfe12c3638e1",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Saves the current simulation configuration",
        "func": "var currentConfigKey = \"simulationConfiguration\";\nvar currentConfig = global.get(currentConfigKey) || {};\ncurrentConfig = msg.payload;\nglobal.set(\"simulationConfiguration\", currentConfig);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Global: currentConfigKey=\" + currentConfigKey + \", contenuto=\" + JSON.stringify(currentConfig));\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "7a9b6ee89f80ec87"
            ]
        ]
    },
    {
        "id": "ea970c1f3fc66fa9",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/update_simulation_condition",
        "description": "Update the simulation condition",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "13a3112f682e27db",
                "caedbe9a15ad2ed7",
                "149101f4987ee626"
            ],
            []
        ]
    },
    {
        "id": "13a3112f682e27db",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard UpdateCondition (Weather, interval, temperature, humidity) Step 0 ",
        "func": "var opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n      {\n        \"text\": \"Yes\",\n        \"callback_data\": \"W0 YES\"\n      },\n      {\n        \"text\": \"No\",\n        \"callback_data\": \"W0 NO\"\n      }]\n    ]\n  })\n};\nmsg.payload.content = 'Are you sure you want to change the simulation conditions?';\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "6ab25b14acc24d5c"
            ]
        ]
    },
    {
        "id": "6ab25b14acc24d5c",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "0478425b2bc2dea4"
            ]
        ]
    },
    {
        "id": "0478425b2bc2dea4",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdUpdateCondition nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToReplayUpdateCondition = msg.payload.messageId;\nchatContext.messageIdUpdateCondition = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 320,
        "wires": []
    },
    {
        "id": "811941ebe4c7febb",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Delete messageIdCurrentConfig",
        "func": "// Ottieni tutte le chiavi dal contesto flow\nvar allKeys = flow.keys();\n\n// Filtra solo le chiavi che iniziano con \"chat_\"\nvar chatKeys = allKeys.filter(key => key.startsWith(\"chat_\"));\n\n// Prepara un array per i messaggi da inviare\nvar messages = [];\n\n// Scorri tutte le chiavi delle chat e verifica se hanno messageIdCurrentConfig\nchatKeys.forEach(chatKey => {\n    var chatContext = flow.get(chatKey);\n\n    // Verifica se la proprietà \"messageIdCurrentConfig\" esiste\n    if (chatContext && chatContext.messageIdCurrentConfig) {\n        // Rimuovi la proprietà messageIdCurrentConfig\n        delete chatContext.messageIdCurrentConfig;\n\n        flow.set(chatKey, chatContext);\n    }\n});\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 440,
        "wires": []
    },
    {
        "id": "dcd5787e50918357",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "WCancel\\n W0 \\n W1\\n W2\\n W3\\n W4\\n W5\\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "WCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^W0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W5",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 640,
        "y": 2460,
        "wires": [
            [
                "1bc4f96de1467796"
            ],
            [
                "dbf54bcb7d320d2e"
            ],
            [
                "18a2fd284157f87f"
            ],
            [
                "e81206999818d780"
            ],
            [
                "9a59d2a8666300df"
            ],
            [
                "33c1263aeb1a4a3b"
            ],
            [
                "1574fd2f535d0c2d"
            ],
            []
        ]
    },
    {
        "id": "94b59fc68cf6bccd",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "S\\n W\\n A\\n T\\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^S",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^A",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 440,
        "y": 2000,
        "wires": [
            [
                "a2fe17dca5d86712"
            ],
            [
                "dcd5787e50918357"
            ],
            [
                "da8d85276f3785ff"
            ],
            [
                "b247f120d5335c41"
            ],
            []
        ]
    },
    {
        "id": "1bc4f96de1467796",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort UpdateCondition",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\nif (chatContext.updateSimulationContext) {\n    delete chatContext.updateSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /update_simulation_condition command when you are ready <strong>to change the simulation conditions</strong>!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdUpdateCondition,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageIdToReplayUpdateCondition;\ndelete chatContext.messageIdUpdateCondition;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2380,
        "wires": [
            [
                "b58fcfa2f9d08c83",
                "20b3b83c60c12de1"
            ]
        ]
    },
    {
        "id": "b58fcfa2f9d08c83",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1450,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "dbf54bcb7d320d2e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard UpdateCondition Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"W0 YES\" o \"W1 NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"W0 YES\") {\n    newText = \"Great, let's get started!!! \\r\\nWhat <strong>weather condition</strong> is present on the fields?\";\n} else if (userChoice === \"W0 NO\") {\n    newText = \"OK, you can reuse the /update_simulation_condition command when you are ready <strong>to change the simulation conditions</strong>!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"☀️ Sunny ☀️\",\n            \"callback_data\": \"W1 SUNNY\"\n        }],\n    [\n        {\n            \"text\": \"☁️ Cloudy ☁️\",\n            \"callback_data\": \"W1 CLOUDY\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌦️ Light Rain 🌦️\",\n            \"callback_data\": \"W1 LIGHT_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌧️ Moderate Rain 🌧️\",\n            \"callback_data\": \"W1 MODERATE_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"⛈️ Heavy Rain ⛈️\",\n            \"callback_data\": \"W1 HEAVY_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌀 Hurricane 🌀\",\n            \"callback_data\": \"W1 HURRICANE\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"WCancel\"\n        }]\n    ]\n});\n\nif (userChoice === \"W0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdUpdateCondition,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageIdUpdateCondition,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageIdUpdateCondition;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2420,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "18a2fd284157f87f",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 1, presenta step 2 temperatura",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar currentConfigKey = \"simulation_configuration\";\nvar currentConfig = flow.get(currentConfigKey) || {};\nvar updateSimulationContext = chatContext.updateSimulationContext || {};\nupdateSimulationContext = {\n    weather: msg.payload.content.split(\" \")[1],\n    interval: (typeof currentConfig.interval === 'number') ? currentConfig.interval : 5000, // default value\n    temperature: (typeof currentConfig.temperature === 'number') ? currentConfig.temperature : 24.5, // default value\n    humidity: (typeof currentConfig.humidity === 'number') ? currentConfig.humidity : 60.5 // default value\n};\n\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n}\n\nvar weatherText;\n\nswitch (msg.payload.content) {\n    case \"W1 SUNNY\":\n        weatherText = \"☀️ Sunny ☀️\";\n        break;\n    case \"W1 CLOUDY\":\n        weatherText = \"☁️ Cloudy ☁️\";\n        break;\n    case \"W1 LIGHT_RAIN\":\n        weatherText = \"🌦️ Light Rain 🌦️\";\n        break;\n    case \"W1 MODERATE_RAIN\":\n        weatherText = \"🌧️ Moderate Rain 🌧️\";\n        break;\n    case \"W1 HEAVY_RAIN\":\n        weatherText = \"⛈️ Heavy Rain ⛈️\";\n        break;\n    case \"W1 HURRICANE\":\n        weatherText = \"🌀 Hurricane 🌀\";\n        break;\n    default:\n        weatherText = \"Unknown\";\n}\n\nvar newText = \"OK, the current <strong>weather</strong> is <strong>\" + weatherText + \"</strong> !\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what <strong>outside temperature</strong> we have on agricultural fields!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"24.5°C (Deafult Temperature)\",\n            \"callback_data\": \"W2 24.50\"\n        }],\n    [\n        {\n            \"text\": \"-10°C\",\n            \"callback_data\": \"W2 -10.01\"\n        },\n        {\n            \"text\": \"-5°C\",\n            \"callback_data\": \"W2 -5.01\"\n        },\n        {\n            \"text\": \"0°C\",\n            \"callback_data\": \"W2 0.01\"\n        },\n        {\n            \"text\": \"5°C\",\n            \"callback_data\": \"W2 5.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"10°C\",\n            \"callback_data\": \"W2 10.01\"\n        },\n        {\n            \"text\": \"15°C\",\n            \"callback_data\": \"W2 15.01\"\n        },\n        {\n            \"text\": \"20°C\",\n            \"callback_data\": \"W2 20.01\"\n        },\n        {\n            \"text\": \"25°C\",\n            \"callback_data\": \"W2 25.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30°C\",\n            \"callback_data\": \"W2 30.01\"\n        },\n        {\n            \"text\": \"35°C\",\n            \"callback_data\": \"W2 35.01\"\n        },\n        {\n            \"text\": \"40°C\",\n            \"callback_data\": \"W2 40.01\"\n        },\n        {\n            \"text\": \"45°C\",\n            \"callback_data\": \"W2 45.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"WCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdUpdateCondition,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2460,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "e81206999818d780",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 2, presenta step 3 umidità",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.temperature = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n}\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nvar newText = \"OK, the current <strong>temperature</strong> is <strong>\" + weatherText + \"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what is the <strong>external Humidity</strong> we have on agricultural fields!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"60.5% (Deafult Humidity)\",\n            \"callback_data\": \"W3 60.5\"\n        }],\n    [\n        {\n            \"text\": \"0%\",\n            \"callback_data\": \"W3 0.01\"\n        },\n        {\n            \"text\": \"10%\",\n            \"callback_data\": \"W3 10.01\"\n        },\n        {\n            \"text\": \"20%\",\n            \"callback_data\": \"W3 20.01\"\n        },\n        {\n            \"text\": \"30%\",\n            \"callback_data\": \"W3 30.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"40%\",\n            \"callback_data\": \"W3 40.01\"\n        },\n        {\n            \"text\": \"45%\",\n            \"callback_data\": \"W3 45.01\"\n        },\n        {\n            \"text\": \"50%\",\n            \"callback_data\": \"W3 50.01\"\n        },\n        {\n            \"text\": \"55%\",\n            \"callback_data\": \"W3 55.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"60%\",\n            \"callback_data\": \"W3 60.01\"\n        },\n        {\n            \"text\": \"70%\",\n            \"callback_data\": \"W3 70.01\"\n        },\n        {\n            \"text\": \"80%\",\n            \"callback_data\": \"W3 80.01\"\n        },\n        {\n            \"text\": \"90%\",\n            \"callback_data\": \"W3 90.01\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"WCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdUpdateCondition,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2500,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "9a59d2a8666300df",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 3, presenta step 4 Interval",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.humidity = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n}\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nvar newText = \"OK, the current <strong>humidity</strong> is <strong>\" + weatherText + \"%</strong>!\\r\\nExcellent! \\r\\nNow all that remains is to determine how often the sensors will update. \\r\\n\\r\\nSelect the <strong>time interval</strong> from those present:\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [\n        [\n            {\n                \"text\": \"DEFAULT 5 sec\",\n                \"callback_data\": \"W4 5000\"\n            }\n        ],\n        [\n            {\n                \"text\": \"1 sec\",\n                \"callback_data\": \"W4 1000\"\n            },\n            {\n                \"text\": \"2 sec\",\n                \"callback_data\": \"W4 2000\"\n            }\n        ],\n        [\n            {\n                \"text\": \"10 sec\",\n                \"callback_data\": \"W4 10000\"\n            },\n            {\n                \"text\": \"15 sec\",\n                \"callback_data\": \"W4 15000\"\n            }\n        ],\n        [\n            {\n                \"text\": \"30 sec\",\n                \"callback_data\": \"W4 30000\"\n            },\n            {\n                \"text\": \"1 min\",\n                \"callback_data\": \"W4 60000\"\n            }\n        ],\n        [\n            {\n                \"text\": \"❌   ABORT   ❌\",\n                \"callback_data\": \"WCancel\"\n            }\n        ]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdUpdateCondition,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2540,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "33c1263aeb1a4a3b",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 4, peresenta il riepilogo",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.interval = parseInt(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n}\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nswitch (msg.payload.content) {\n    case \"W4 5000\":\n        weatherText = \"5 sec\";\n        break;\n    case \"W4 1000\":\n        weatherText = \"1 sec\";\n        break;\n    case \"W4 2000\":\n        weatherText = \"2 sec\";\n        break;\n    case \"W4 10000\":\n        weatherText = \"10 sec\";\n        break;\n    case \"W4 15000\":\n        weatherText = \"15 sec\";\n        break;\n    case \"W4 30000\":\n        weatherText = \"30 sec\";\n        break;\n    case \"W4 60000\":\n        weatherText = \"1 min\";\n        break;\n    default:\n        weatherText = \"Unknown\";\n}\n\nvar newText = \"OK, the current <strong>interval</strong> is <strong>\" + weatherText + \" </strong>!\\r\\n<strong>Excellent!</strong>\\r\\n\\r\\n This is a summary of the configuration:<pre>\" + JSON.stringify(updateSimulationContext, null, 2) + \"</pre>\\r\\n\\r\\nDo you want to <strong>confirm</strong>?\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [\n        [\n            {\n                \"text\": \"YES\",\n                \"callback_data\": \"W5 YES\"\n            },\n            {\n                \"text\": \"NO\",\n                \"callback_data\": \"WCancel\"\n            }\n        ]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    parse_mode: 'HTML',\n    message_id: chatContext.messageIdUpdateCondition\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nflow.set(chatContextKey, chatContext);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2580,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "1574fd2f535d0c2d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia il json MQTT",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"messageIdUpdateCondition ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = { ...chatContext.updateSimulationContext }; // Copia dell'oggetto\n\nif (!updateSimulationContext || !updateSimulationContext.weather || !Number.isInteger(updateSimulationContext.interval) || !(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)) || !(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity))) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!updateSimulationContext.weather: \" + !updateSimulationContext.weather);\n    node.error(\"!Number.isInteger(updateSimulationContext.interval): \" + !Number.isInteger(updateSimulationContext.interval));\n    node.error(\"!(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)): \" + !(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)));\n    node.error(\"!(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity)): \" + !(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity)));\n    return null;\n}\n\nvar replyText = \"<strong>Simulation conditions</strong> saved and sent to the server <strong>Successfully</strong>!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'HTML'\n        },\n        content: replyText\n    }\n};\n\nif (chatContext.messageIdToReplayUpdateCondition) {\n    sendTextMessage.payload.options.reply_parameters = {\n        message_id: chatContext.messageIdToReplayUpdateCondition\n    };\n}\n\nvar deleteInlineMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdUpdateCondition\n    }\n};\n\nvar result = {\n    weather: updateSimulationContext.weather,\n    interval: parseInt(updateSimulationContext.interval, 10),\n    temperature: parseFloat(updateSimulationContext.temperature),\n    humidity: parseFloat(updateSimulationContext.humidity)\n};\n\ndelete chatContext.updateSimulationContext;\ndelete chatContext.messageIdToReplayUpdateCondition;\ndelete chatContext.messageIdUpdateCondition;\n\nflow.set(chatContextKey, chatContext);\n\nvar congifMessage = {\n    payload: result,\n    topic: 'sensors/simulation/update'\n}\n\nreturn [sendTextMessage, deleteInlineMessage, congifMessage];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2640,
        "wires": [
            [
                "b58fcfa2f9d08c83",
                "20b3b83c60c12de1"
            ],
            [
                "b58fcfa2f9d08c83"
            ],
            [
                "5bd2940289498b55",
                "1d4fa3ebecd6de4c"
            ]
        ]
    },
    {
        "id": "5bd2940289498b55",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/update",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 1470,
        "y": 2440,
        "wires": []
    },
    {
        "id": "12c9d4086aa931e7",
        "type": "inject",
        "z": "bb32693f1e238fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "d4a7c59e69d97b71"
            ]
        ]
    },
    {
        "id": "d4a7c59e69d97b71",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Garbage Collector",
        "func": "// Ottieni tutte le chiavi del contesto flow\nvar contextKeys = flow.keys(); // Specifica lo store 'file', oppure 'memory' se necessario\n\n// Conta gli oggetti rimossi\nvar removedCount = 0;\n\n// Itera su tutte le chiavi\ncontextKeys.forEach(function(key) {\n    // Ottieni il valore associato alla chiave\n    var value = flow.get(key, \"file\"); // Specifica lo store appropriato\n\n    // Controlla se il valore è un oggetto vuoto\n    if (value && typeof value === \"object\" && Object.keys(value).length === 0) {\n        // Rimuovi la chiave dal contesto\n        flow.set(key, undefined);\n        removedCount++;\n        node.warn(\"Rimosso oggetto vuoto: \" + key);\n    }\n});\n\n// Debug finale\n//node.warn(\"Pulizia completata. Oggetti vuoti rimossi: \" + removedCount);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "48070c787a2a837f",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/toggle_alert",
        "description": "Enable or disable the reception of alerts.",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 290,
        "y": 580,
        "wires": [
            [
                "d989cee4de450ddf",
                "caedbe9a15ad2ed7",
                "149101f4987ee626"
            ],
            []
        ]
    },
    {
        "id": "d989cee4de450ddf",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "/toggle_alert",
        "func": "var helpMessage = \"Do you want to activate alerts?\";\nvar opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n      {\n        \"text\": \"Yes\",\n        \"callback_data\": \"A YES\"\n      },\n      {\n        \"text\": \"No\",\n        \"callback_data\": \"A NO\"\n      }]\n    ]\n  })\n};\n\nmsg.payload.content = helpMessage;\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "8ace769ee009b9aa"
            ]
        ]
    },
    {
        "id": "8ace769ee009b9aa",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "8f98493fc538890a"
            ]
        ]
    },
    {
        "id": "8f98493fc538890a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdToggleAllert nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\n// Salva il messaggio\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToReplayToggleAllert = msg.payload.messageId;\nchatContext.messageIdToggleAllert = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "da8d85276f3785ff",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva la scelta del toggle Allert",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdToggleAllert) {\n    node.error(\"messageIdToggleAllert ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\n// salva la scelta\nconst storedChats = global.get('chats') || [];\nconst chats = new Map(storedChats);\nchats.set(chatContextKey, msg.payload.content.split(\" \")[1] == \"YES\");\n\nvar replyText = msg.payload.content.split(\" \")[1] == \"YES\" ? \"Alerts have been *activated* for this chat\\\\!\" : \"Alerts have been *deactivated* for this chat\\\\!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'MarkdownV2'\n        },\n        content: replyText\n    }\n};\n\nif (chatContext.messageIdToReplayToggleAllert) {\n    sendTextMessage.payload.options.reply_parameters = {\n        message_id: chatContext.messageIdToReplayToggleAllert\n    };\n}\n\nvar deleteInlineMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdToggleAllert\n    }\n};\n\ndelete chatContext.messageIdToReplayToggleAllert;\ndelete chatContext.messageIdToggleAllert;\n\nflow.set(chatContextKey, chatContext);\nglobal.set('chats', Array.from(chats.entries()));\n\n\nreturn [sendTextMessage, deleteInlineMessage];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2720,
        "wires": [
            [
                "51ec93ced4a852c2",
                "20b3b83c60c12de1"
            ],
            [
                "51ec93ced4a852c2"
            ]
        ]
    },
    {
        "id": "51ec93ced4a852c2",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "b247f120d5335c41",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "TCancel\\n T10\\n T11\\n T12\\n T0\\n T1\\n T2\\n T3\\n T4\\n T5\\n T6\\n T7\\n T8\\n T9\\n  otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "TCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^T10",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T11",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T12",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T5",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T6",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T7",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T8",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T9",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 15,
        "x": 640,
        "y": 2980,
        "wires": [
            [
                "ec1d620b3538640c"
            ],
            [
                "140d1cef39a69e71"
            ],
            [
                "01373f6a28222ac6"
            ],
            [
                "122668a4219d7510"
            ],
            [
                "e1b82e9f3ce1210d"
            ],
            [
                "32160f31f502995f"
            ],
            [
                "2ecd231db192d564"
            ],
            [
                "293beffcfe631193"
            ],
            [
                "76f9aef93b813e69"
            ],
            [
                "7b154a32a9946a78"
            ],
            [
                "c248b16deb8c4683"
            ],
            [
                "76f709bd1353ac86"
            ],
            [
                "2c2dc52b79ba2099"
            ],
            [
                "34422461f7222e04"
            ],
            []
        ]
    },
    {
        "id": "ec1d620b3538640c",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort Change thresholds",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\nif (chatContext.updateSimulationContext) {\n    delete chatContext.updateSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /change_thresholds command when you are <stron>ready to change thresholds for simulation alerts</stron>!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageIdChangeThresholds;\ndelete chatContext.updateThresholdsContext;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2760,
        "wires": [
            [
                "879783e120251e28",
                "20b3b83c60c12de1"
            ]
        ]
    },
    {
        "id": "879783e120251e28",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "c43039340ae1fab1",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/change_thresholds",
        "description": "Update the thresholds for alert",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 310,
        "y": 700,
        "wires": [
            [
                "dcbf42301d581e1a",
                "caedbe9a15ad2ed7",
                "149101f4987ee626"
            ],
            []
        ]
    },
    {
        "id": "dcbf42301d581e1a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard Change thresholds Step 0 ",
        "func": "var opts = {\n    reply_to_message_id: msg.payload.messageId,\n    reply_markup: JSON.stringify({\n        \"inline_keyboard\": [[\n            {\n                \"text\": \"Yes\",\n                \"callback_data\": \"T0 YES\"\n            },\n            {\n                \"text\": \"No\",\n                \"callback_data\": \"T0 NO\"\n            }]\n        ]\n    })\n};\nmsg.payload.content = 'Are you sure you want to change the thresholds for simulation alerts?';\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "ae347043c2f82ba3"
            ]
        ]
    },
    {
        "id": "ae347043c2f82ba3",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "5db7aeda46fb9706"
            ]
        ]
    },
    {
        "id": "5db7aeda46fb9706",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdChangeThresholds nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToReplayChangeThresholds = msg.payload.messageId;\nchatContext.messageIdChangeThresholds = msg.payload.sentMessageId;\n\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 700,
        "wires": []
    },
    {
        "id": "e1b82e9f3ce1210d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard Change thresholds Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"T0 YES\" o \"T1 NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"T0 YES\") {\n    newText = \"\\r\\nGreat, let's get started!!! \\r\\n\\r\\nWhat is the <strong>minimum threshold</strong> value for <strong>Soil Moisture</strong> sensors?\";\n} else if (userChoice === \"T0 NO\") {\n    newText = \"OK, you can reuse the /change_thresholds command when you are <stron>ready to change thresholds for simulation alerts</stron>!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 20%\",\n            \"callback_data\": \"T1 20\"\n        }],\n    [\n        {\n            \"text\": \"5%\",\n            \"callback_data\": \"T1 5\"\n        },\n        {\n            \"text\": \"10%\",\n            \"callback_data\": \"T1 10\"\n        },\n        {\n            \"text\": \"15%\",\n            \"callback_data\": \"T1 15\"\n        }\n    ],\n    [\n        {\n            \"text\": \"20%\",\n            \"callback_data\": \"T1 20\"\n        },\n        {\n            \"text\": \"25%\",\n            \"callback_data\": \"T1 25\"\n        },\n        {\n            \"text\": \"30%\",\n            \"callback_data\": \"T1 30\"\n        }\n    ],\n    [\n        {\n            \"text\": \"35%\",\n            \"callback_data\": \"T1 35\"\n        },\n        {\n            \"text\": \"40%\",\n            \"callback_data\": \"T1 40\"\n        },\n        {\n            \"text\": \"45%\",\n            \"callback_data\": \"T1 45\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nif (userChoice === \"T0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageIdChangeThresholds;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2800,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "32160f31f502995f",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 1, presenta step 2 ",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar currentConfigKey = \"thresholds_configuration\";\nvar currentConfig = flow.get(currentConfigKey) || {};\nvar updateThresholdsContext = chatContext.updateThresholdsContext || {};\nupdateThresholdsContext = {\n    soilMoisture: { min: parseInt(msg.payload.content.split(\" \")[1], 10), max: 80 },\n    temperature: { min: 0, max: 35 }, // default value\n    ph: { min: 5.5, max: 7.5 }, // default value\n    salinity: { min: 200, max: 1500 }, // default value\n    humidity: { min: 30, max: 90 }, // default value\n    rain: { max: 50 } // default value\n};\n\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\nvar weatherText;\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Soil Moisture</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"%</strong>! Great! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Soil Moisture</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 80%\",\n            \"callback_data\": \"T2 80\"\n        }],\n    [\n        {\n            \"text\": \"50%\",\n            \"callback_data\": \"T2 50\"\n        },\n        {\n            \"text\": \"55%\",\n            \"callback_data\": \"T2 55\"\n        },\n        {\n            \"text\": \"60%\",\n            \"callback_data\": \"T2 60\"\n        }\n    ],\n    [\n        {\n            \"text\": \"65%\",\n            \"callback_data\": \"T2 65\"\n        },\n        {\n            \"text\": \"70%\",\n            \"callback_data\": \"T2 70\"\n        },\n        {\n            \"text\": \"75%\",\n            \"callback_data\": \"T2 75\"\n        }\n    ],\n    [\n        {\n            \"text\": \"80%\",\n            \"callback_data\": \"T2 80\"\n        },\n        {\n            \"text\": \"85%\",\n            \"callback_data\": \"T2 85\"\n        },\n        {\n            \"text\": \"90%\",\n            \"callback_data\": \"T2 90\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2840,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "2ecd231db192d564",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 2, presenta step 3",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.soilMoisture.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Soil Moisture</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"%</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Temperature</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 0°C\",\n            \"callback_data\": \"T3 0\"\n        }],\n    [\n        {\n            \"text\": \"-5°C\",\n            \"callback_data\": \"T3 -5\"\n        },\n        {\n            \"text\": \"0°C\",\n            \"callback_data\": \"T3 0\"\n        }\n    ],\n    [\n        {\n            \"text\": \"5°C\",\n            \"callback_data\": \"T3 5\"\n        },\n        {\n            \"text\": \"10°C\",\n            \"callback_data\": \"T3 10\"\n        }\n    ],\n    [\n        {\n            \"text\": \"15°C\",\n            \"callback_data\": \"T3 15\"\n        },\n        {\n            \"text\": \"20°C\",\n            \"callback_data\": \"T3 20\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2880,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "293beffcfe631193",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 3, presenta step 4",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.temperature.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Temperature</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Temperature</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 35°C\",\n            \"callback_data\": \"T4 35\"\n        }],\n    [\n        {\n            \"text\": \"25°C\",\n            \"callback_data\": \"T4 25\"\n        },\n        {\n            \"text\": \"30°C\",\n            \"callback_data\": \"T4 30\"\n        }\n    ],\n    [\n        {\n            \"text\": \"35°C\",\n            \"callback_data\": \"T4 35\"\n        },\n        {\n            \"text\": \"40°C\",\n            \"callback_data\": \"T4 40\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2920,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "76f9aef93b813e69",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 4, presenta step 5",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.temperature.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Temperature</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Ph</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 5.5\",\n            \"callback_data\": \"T5 5.5\"\n        }],\n    [\n        {\n            \"text\": \"3.0\",\n            \"callback_data\": \"T5 3.0\"\n        },\n        {\n            \"text\": \"3.5\",\n            \"callback_data\": \"T5 3.5\"\n        },\n        {\n            \"text\": \"4.0\",\n            \"callback_data\": \"T5 4.0\"\n        }\n    ],\n    [\n        {\n            \"text\": \"4.5\",\n            \"callback_data\": \"T5 4.5\"\n        },\n        {\n            \"text\": \"5.0\",\n            \"callback_data\": \"T5 5.0\"\n        },\n        {\n            \"text\": \"5.5\",\n            \"callback_data\": \"T5 5.5\"\n        }\n    ],\n    [\n        {\n            \"text\": \"6.0\",\n            \"callback_data\": \"T5 6.0\"\n        },\n        {\n            \"text\": \"6.5\",\n            \"callback_data\": \"T5 6.5\"\n        },\n        {\n            \"text\": \"7.0\",\n            \"callback_data\": \"T5 7.0\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2960,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "7b154a32a9946a78",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 5, presenta step 6",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.ph.min = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Ph</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Ph</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 7.5\",\n            \"callback_data\": \"T6 7.5\"\n        }],\n    [\n        {\n            \"text\": \"7.5\",\n            \"callback_data\": \"T6 7.5\"\n        },\n        {\n            \"text\": \"8.0\",\n            \"callback_data\": \"T6 8.0\"\n        },\n        {\n            \"text\": \"8.5\",\n            \"callback_data\": \"T6 8.5\"\n        }\n    ],\n    [\n        {\n            \"text\": \"9.0\",\n            \"callback_data\": \"T6 9.0\"\n        },\n        {\n            \"text\": \"9.5\",\n            \"callback_data\": \"T6 9.5\"\n        },\n        {\n            \"text\": \"10.0\",\n            \"callback_data\": \"T6 10.0\"\n        }\n    ],\n    [\n        {\n            \"text\": \"10.5\",\n            \"callback_data\": \"T6 10.5\"\n        },\n        {\n            \"text\": \"11.0\",\n            \"callback_data\": \"T6 11.0\"\n        },\n        {\n            \"text\": \"11.5\",\n            \"callback_data\": \"T6 11.5\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3000,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "c248b16deb8c4683",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 6, presenta step 7",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.ph.max = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Ph</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Salinity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 200 μS/cm\",\n            \"callback_data\": \"T7 200\"\n        }],\n    [\n        {\n            \"text\": \"100 μS/cm\",\n            \"callback_data\": \"T7 100\"\n        },\n        {\n            \"text\": \"200 μS/cm\",\n            \"callback_data\": \"T7 200\"\n        },\n        {\n            \"text\": \"300 μS/cm\",\n            \"callback_data\": \"T7 300\"\n        }\n    ],\n    [\n        {\n            \"text\": \"400 μS/cm\",\n            \"callback_data\": \"T7 400\"\n        },\n        {\n            \"text\": \"500 μS/cm\",\n            \"callback_data\": \"T7 500\"\n        },\n        {\n            \"text\": \"600 μS/cm\",\n            \"callback_data\": \"T7 600\"\n        }\n    ],\n    [\n        {\n            \"text\": \"700 μS/cm\",\n            \"callback_data\": \"T7 700\"\n        },\n        {\n            \"text\": \"800 μS/cm\",\n            \"callback_data\": \"T7 800\"\n        },\n        {\n            \"text\": \"900 μS/cm\",\n            \"callback_data\": \"T7 900\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3040,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "76f709bd1353ac86",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 7, presenta step 8",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.salinity.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Salinity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \" μS/cm</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Salinity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 1500 μS/cm\",\n            \"callback_data\": \"T8 1500\"\n        }],\n    [\n        {\n            \"text\": \"1100 μS/cm\",\n            \"callback_data\": \"T8 1100\"\n        },\n        {\n            \"text\": \"1200 μS/cm\",\n            \"callback_data\": \"T8 1200\"\n        },\n        {\n            \"text\": \"1300 μS/cm\",\n            \"callback_data\": \"T8 1300\"\n        }\n    ],\n    [\n        {\n            \"text\": \"1400 μS/cm\",\n            \"callback_data\": \"T8 1400\"\n        },\n        {\n            \"text\": \"1500 μS/cm\",\n            \"callback_data\": \"T8 1500\"\n        },\n        {\n            \"text\": \"1600 μS/cm\",\n            \"callback_data\": \"T8 1600\"\n        }\n    ],\n    [\n        {\n            \"text\": \"1700 μS/cm\",\n            \"callback_data\": \"T8 1700\"\n        },\n        {\n            \"text\": \"1800 μS/cm\",\n            \"callback_data\": \"T8 1800\"\n        },\n        {\n            \"text\": \"1900 μS/cm\",\n            \"callback_data\": \"T8 1900\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3080,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "2c2dc52b79ba2099",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 8, presenta step 9",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.salinity.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Salinity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \" μS/cm</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Humidity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 30%\",\n            \"callback_data\": \"T9 30\"\n        }],\n    [\n        {\n            \"text\": \"10%\",\n            \"callback_data\": \"T9 10\"\n        },\n        {\n            \"text\": \"20%\",\n            \"callback_data\": \"T9 20\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30%\",\n            \"callback_data\": \"T9 30\"\n        },\n        {\n            \"text\": \"40%\",\n            \"callback_data\": \"T9 40\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3120,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "34422461f7222e04",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 9, presenta step 10",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.humidity.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Humidity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"%</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Humidity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 90%\",\n            \"callback_data\": \"T10 90\"\n        }],\n    [\n        {\n            \"text\": \"60%\",\n            \"callback_data\": \"T10 60\"\n        },\n        {\n            \"text\": \"70%\",\n            \"callback_data\": \"T10 70\"\n        }\n    ],\n    [\n        {\n            \"text\": \"80%\",\n            \"callback_data\": \"T10 80\"\n        },\n        {\n            \"text\": \"90%\",\n            \"callback_data\": \"T10 90\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3160,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "140d1cef39a69e71",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 10, presenta step 11",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.humidity.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Humidity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] + \"%</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Rain</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MAX: 40 mm\",\n            \"callback_data\": \"T11 40\"\n        }],\n    [\n        {\n            \"text\": \"5 mm\",\n            \"callback_data\": \"T11 5\"\n        },\n        {\n            \"text\": \"10 mm\",\n            \"callback_data\": \"T11 10\"\n        },\n        {\n            \"text\": \"20 mm\",\n            \"callback_data\": \"T11 20\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30 mm\",\n            \"callback_data\": \"T11 30\"\n        },\n        {\n            \"text\": \"40 mm\",\n            \"callback_data\": \"T11 40\"\n        },\n        {\n            \"text\": \"50 mm\",\n            \"callback_data\": \"T11 50\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"TCancel\"\n        }]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    message_id: chatContext.messageIdChangeThresholds,\n    parse_mode: 'HTML'\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3200,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "01373f6a28222ac6",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 11, peresenta il riepilogo",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.rain.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n}\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Rain</strong> sensors is <strong> \" + msg.payload.content.split(\" \")[1] + \" mm</strong>!\\r\\nExcellent! \\r\\n\\r\\nThis is a summary of the Thresholds:<pre>\" + JSON.stringify(updateThresholdsContext, null, 2) + \"</pre>\\r\\n\\r\\nDo you want to confirm?\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [\n        [\n            {\n                \"text\": \"YES\",\n                \"callback_data\": \"T12 YES\"\n            },\n            {\n                \"text\": \"NO\",\n                \"callback_data\": \"TCancel\"\n            }\n        ]\n    ]\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup,\n    parse_mode: 'HTML',\n    message_id: chatContext.messageIdChangeThresholds\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nflow.set(chatContextKey, chatContext);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 3240,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "122668a4219d7510",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia la config",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"messageIdChangeThresholds ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = { ...chatContext.updateThresholdsContext }; // Copia dell'oggetto\n\nif (!updateThresholdsContext || !updateThresholdsContext.soilMoisture || !updateThresholdsContext.temperature || !updateThresholdsContext.ph || !updateThresholdsContext.salinity || !updateThresholdsContext.humidity || !updateThresholdsContext.rain) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!updateThresholdsContext.soilMoisture: \" + !updateThresholdsContext.soilMoisture);\n    node.error(\"!updateThresholdsContext.temperature: \" + !updateThresholdsContext.temperature);\n    node.error(\"!updateThresholdsContext.ph: \" + !updateThresholdsContext.ph);\n    node.error(\"!updateThresholdsContext.salinity: \" + !updateThresholdsContext.salinity);\n    node.error(\"!updateThresholdsContext.humidity: \" + !updateThresholdsContext.humidity);\n    node.error(\"!updateThresholdsContext.rain: \" + !updateThresholdsContext.rain);\n    return null;\n}\n\nvar replyText = \"<strong>Thresholds</strong> Saved and Sent to Server!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'HTML'\n        },\n        content: replyText\n    }\n};\n\nif (chatContext.messageIdToReplayChangeThresholds) {\n    sendTextMessage.payload.options.reply_parameters = {\n        message_id: chatContext.messageIdToReplayChangeThresholds\n    };\n}\n\nvar deleteInlineMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdChangeThresholds\n    }\n};\n\nvar updateThresholds = JSON.parse(JSON.stringify(updateThresholdsContext));\nglobal.set(\"sensorsThreshold\", updateThresholds);\n\ndelete chatContext.updateThresholdsContext;\ndelete chatContext.messageIdToReplayChangeThresholds;\ndelete chatContext.messageIdChangeThresholds;\nflow.set(chatContextKey, chatContext);\n\nreturn [sendTextMessage, deleteInlineMessage, updateThresholdsContext];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3300,
        "wires": [
            [
                "879783e120251e28",
                "20b3b83c60c12de1"
            ],
            [
                "879783e120251e28"
            ],
            [
                "1afb0f3b103d6bbb"
            ]
        ]
    },
    {
        "id": "caedbe9a15ad2ed7",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "chek chat, salva setting alert",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\n// salva la scelta\nconst storedChats = global.get('chats') || [];\nconst chats = new Map(storedChats);\nif (!chats.has(chatContextKey)) {\n    chats.set(chatContextKey, true);\n    global.set('chats', Array.from(chats.entries()));\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 860,
        "wires": []
    },
    {
        "id": "dfdbee54d49941a8",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/start_simultation",
        "description": "Start sensors simulation",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 300,
        "y": 920,
        "wires": [
            [
                "318fdcc75e0c39d1",
                "152b01ca381cf48a",
                "c4a1f5b76dfd30ec",
                "caedbe9a15ad2ed7"
            ],
            []
        ]
    },
    {
        "id": "318fdcc75e0c39d1",
        "type": "change",
        "z": "bb32693f1e238fb3",
        "name": "set mqtt message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "avvio",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sensors/simulation/start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 960,
        "wires": [
            [
                "4df5412302acb979"
            ]
        ]
    },
    {
        "id": "4df5412302acb979",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 870,
        "y": 980,
        "wires": []
    },
    {
        "id": "46b28aa97f46c625",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/stop_simultation",
        "description": "Stop sensors simulation",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 300,
        "y": 1000,
        "wires": [
            [
                "ceada18638c046bf",
                "79942b29501b9633",
                "caedbe9a15ad2ed7"
            ],
            []
        ]
    },
    {
        "id": "ceada18638c046bf",
        "type": "change",
        "z": "bb32693f1e238fb3",
        "name": "set mqtt message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sensors/simulation/stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "4df5412302acb979"
            ]
        ]
    },
    {
        "id": "79942b29501b9633",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "set message",
        "func": "var message = \"\\n\";\nmessage += \"\\nOK, <strong>stop</strong> the sensor simulation!\";\nmsg.payload.content = message;\nmsg.payload.options = {\n    parse_mode: 'HTML'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "869adba8be69e370"
            ]
        ]
    },
    {
        "id": "869adba8be69e370",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 910,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "152b01ca381cf48a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "set message",
        "func": "var message = \"\\n\";\nmessage += \"\\nGreat! <strong>Start</strong> the sensor simulation!\";\nmsg.payload.content = message;\nmsg.payload.options = {\n    parse_mode: 'HTML'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 920,
        "wires": [
            [
                "869adba8be69e370"
            ]
        ]
    },
    {
        "id": "c4a1f5b76dfd30ec",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "Telegram message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 920,
        "wires": []
    },
    {
        "id": "149101f4987ee626",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "deactivate alerts",
        "func": "const alertSettings = global.get('alertSettings') || {};\nalertSettings.active = false;\nglobal.set('alertSettings', alertSettings);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 780,
        "wires": []
    },
    {
        "id": "20b3b83c60c12de1",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "activate alerts",
        "func": "const alertSettings = global.get('alertSettings') || {};\nalertSettings.active = true;\nglobal.set('alertSettings', alertSettings);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 780,
        "wires": []
    },
    {
        "id": "ec4c47a60fc86efe",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/current_thresholds",
        "description": "Get curret the thresholds for alert",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 310,
        "y": 640,
        "wires": [
            [
                "0b5bdeb19e92316e",
                "caedbe9a15ad2ed7"
            ],
            []
        ]
    },
    {
        "id": "0b5bdeb19e92316e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "get Current thresholds",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar thresholds = global.get(\"sensorsThreshold\");\n\nvar replay = {\n    chatId: chatId,\n    content: \"This is the current <strong>Thresholds</strong> of the sensors: <pre>\" + JSON.stringify(thresholds, null, 2) + \"</pre>\",\n    type: \"message\",\n    options: {\n        parse_mode: \"HTML\",\n        reply_parameters: {\n            message_id: msg.payload.messageId\n        }\n    }\n}\nvar resp = {}\nresp.payload = replay;\nreturn resp;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 640,
        "wires": [
            [
                "20ac572bbce480fd"
            ]
        ]
    },
    {
        "id": "20ac572bbce480fd",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 870,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7a9b6ee89f80ec87",
        "type": "link out",
        "z": "bb32693f1e238fb3",
        "name": "Send Current Configuration ",
        "mode": "link",
        "links": [
            "c08784a7d0bdacfc"
        ],
        "x": 905,
        "y": 500,
        "wires": []
    },
    {
        "id": "1afb0f3b103d6bbb",
        "type": "link out",
        "z": "bb32693f1e238fb3",
        "name": "Send Current Thresholds",
        "mode": "link",
        "links": [
            "4a8dd89a69cb644a",
            "592c43ea9eef1682"
        ],
        "x": 1275,
        "y": 3320,
        "wires": []
    },
    {
        "id": "2e829639469c3d9d",
        "type": "link out",
        "z": "bb32693f1e238fb3",
        "name": "Change Settings",
        "mode": "link",
        "links": [
            "592c43ea9eef1682"
        ],
        "x": 1295,
        "y": 2280,
        "wires": []
    },
    {
        "id": "1e59b061de9325aa",
        "type": "link in",
        "z": "bb32693f1e238fb3",
        "name": "Send Alert to Chat",
        "links": [
            "c8a96618280d2c3c"
        ],
        "x": 375,
        "y": 3400,
        "wires": [
            [
                "03af5b055e193375",
                "8180b165454542bb"
            ]
        ]
    },
    {
        "id": "8180b165454542bb",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Get All Chat and Create Messages",
        "func": "function getChatNumbersWithTrue(chats) {\n    return chats\n        .filter(chat => chat[1] === true)\n        .map(chat => parseInt(chat[0].split('_')[1]));\n}\nfunction groupAlertsByField(alerts) {\n    // Creare un oggetto per raggruppare gli alert per fieldId\n    const groupedFields = {};\n\n    alerts.forEach(alert => {\n        const { fieldId, sensorType, value, timestamp, threshold } = alert;\n\n        // Se il fieldId non esiste già, inizializzalo\n        if (!groupedFields[fieldId]) {\n            groupedFields[fieldId] = {\n                fieldId: fieldId,\n                alerts: []\n            };\n        }\n\n        // Aggiungi l'alert al campo corrispondente\n        groupedFields[fieldId].alerts.push({\n            sensorType,\n            value,\n            timestamp,\n            threshold\n        });\n    });\n    return Object.values(groupedFields);\n}\n\nfunction getThresholdEmoji(threshold) {\n    if (threshold.toLowerCase().includes('min')) {\n        return '⬇️'; // Soglia minima\n    } else if (threshold.toLowerCase().includes('max')) {\n        return '⬆️'; // Soglia massima\n    } else {\n        return '⚠️'; // Soglia generica\n    }\n}\n\nfunction getUnit(sensorType) {\n    switch (sensorType) {\n        case 'ph':\n            return '';\n        case 'salinity':\n            return 'μS/cm';\n        case 'soilMoisture':\n            return '%';\n        case 'temperature':\n            return '°C';\n        case 'humidity':\n            return '%';\n        case 'rain':\n            return 'mm';\n        default:\n            return '';\n    }\n}\n\nconst alertStatus = global.get(\"alertSettings\") || { active: false };\nif (!alertStatus.active) {\n    return null;\n}\nconst chats = global.get(\"chats\") || [];\nconst chatIds = getChatNumbersWithTrue(chats);\nif (chatIds.length <= 0) {\n    return null;\n}\n\nconst alert = msg.alerts || [];\nconst fieldAlert = groupAlertsByField(alert);\nconst m = [];\nfieldAlert.forEach(field => {\n    const formattedFieldId = field.fieldId.replace(/([a-zA-Z])([0-9])/g, '$1 $2');\n    let a = `⚠️                   <strong>ALERT</strong>                     ⚠️\\n\\r———————————————\\n\\r🌻🚜     <strong>—   ${formattedFieldId.toUpperCase()}  —</strong>      🚜🌻\\n\\r———————————————\\n\\r`;\n    field.alerts.forEach(alert => {\n        const humanReadableTime = new Date(alert.timestamp).toLocaleTimeString('it-IT', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hourCycle: 'h23'\n        });\n        a = a + `📡     <strong>— ${alert.sensorType.toUpperCase()} —</strong>     📡\\n\\r       <strong>Value:</strong>           ${alert.value} ${getUnit(alert.sensorType)}\\n\\r       <strong>Time:</strong>            ${humanReadableTime}\\n\\r       <strong>Threshold:</strong>  ${alert.threshold} ${getUnit(alert.sensorType)} ${getThresholdEmoji(alert.threshold)}\\n\\r———————————————\\n\\r`;\n    });\n    m.push(a);\n});\nlet sendMessages = [];\nm.forEach(a => {\n    const mes = {\n        chatId: chatIds,\n        type: 'message',\n        options: {\n            parse_mode: 'HTML'\n        },\n        content: a\n    };\n    sendMessages.push(mes);\n});\nmsg = {};\nmsg.payload = sendMessages;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3400,
        "wires": [
            [
                "b3217bb499a2e98a"
            ]
        ]
    },
    {
        "id": "51629de246e5ec71",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "Alert Sender",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 970,
        "y": 3400,
        "wires": [
            []
        ]
    },
    {
        "id": "03af5b055e193375",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "RICEVUTO",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 3320,
        "wires": []
    },
    {
        "id": "1d4fa3ebecd6de4c",
        "type": "link out",
        "z": "bb32693f1e238fb3",
        "name": "Cambio Condizioni Ambientali",
        "mode": "link",
        "links": [
            "592c43ea9eef1682"
        ],
        "x": 1295,
        "y": 2660,
        "wires": []
    },
    {
        "id": "b3217bb499a2e98a",
        "type": "split",
        "z": "bb32693f1e238fb3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 810,
        "y": 3400,
        "wires": [
            [
                "51629de246e5ec71"
            ]
        ]
    },
    {
        "id": "66f52b2dca352452",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/generate_report",
        "description": "Generete_report",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 340,
        "y": 3500,
        "wires": [
            [
                "643905519b58426e"
            ],
            []
        ]
    },
    {
        "id": "643905519b58426e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Set Message for report",
        "func": "msg.payload.content = `Report generation in progress.\n<strong>Please wait...</strong>\nEstimated maximum time 5 min.`;\nconst options = {\n    parse_mode: \"HTML\",\n    reply_parameters: {\n        message_id: msg.messageId\n    }\n};\nmsg.payload.options = options;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 3500,
        "wires": [
            [
                "e0145fc95026ba7e"
            ]
        ]
    },
    {
        "id": "e0145fc95026ba7e",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "Send Message",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 740,
        "y": 3500,
        "wires": [
            [
                "cdbdfa520b94b894"
            ]
        ]
    },
    {
        "id": "cdbdfa520b94b894",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdGenerateReport nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToReplayGenerateReport = msg.payload.messageId;\nchatContext.messageIdGenerateReport = msg.payload.sentMessageId;\n\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nif (global.get(\"internalDebug\")) {\n    node.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3500,
        "wires": [
            [
                "149101f4987ee626",
                "fe8844707189a25b"
            ]
        ]
    },
    {
        "id": "8de18e65ae2ede66",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "count message and send file",
        "func": "const configDefault = {\n    initialWeather: \"CLOUDY\",\n    fields: [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    interval: 5000\n};\nconst config = global.get(\"simulationConfiguration\") || configDefault;\n\n// Ottieni tutte le chiavi dal contesto flow\nvar allKeys = flow.keys();\n\n// Filtra solo le chiavi che iniziano con \"chat_\"\nvar chatKeys = allKeys.filter(key => key.startsWith(\"chat_\"));\n\n// Prepara un array per i messaggi da inviare\nvar messages = [];\nvar img = {};\n\n// Scorri tutte le chiavi delle chat e verifica se hanno messageIdGenerateReport\nchatKeys.forEach(chatKey => {\n    var chatContext = flow.get(chatKey);\n    \n    // Verifica se la proprietà \"messageIdGenerateReport\" esiste\n    if (chatContext && chatContext.messageIdGenerateReport && chatContext.messageIdToReplayGenerateReport) {\n        // Prepara il messaggio per questa chat\n        var chatId = chatKey.replace(\"chat_\", \"\"); // Estrai l'ID della chat\n        // invia immagine\n        img.payload = {\n            chatId: parseInt(chatId, 10),\n            content: msg.payload,\n            type: \"document\",\n            caption: msg.filename + \".png\",\n            options: {\n                file_name: msg.filename + \".png\",\n                reply_parameters: {\n                    message_id: chatContext.messageIdToReplayGenerateReport\n                }\n            }\n        };\n\n    }\n});\nreturn img;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 3600,
        "wires": [
            [
                "c7040a2b1fa36086",
                "9c0e2335d5d52380"
            ]
        ]
    },
    {
        "id": "688d2049f4fa1856",
        "type": "split",
        "z": "bb32693f1e238fb3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 790,
        "y": 3560,
        "wires": [
            [
                "c7040a2b1fa36086"
            ]
        ]
    },
    {
        "id": "c7040a2b1fa36086",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "Send Message",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 980,
        "y": 3600,
        "wires": [
            [
                "160e6d7f91fb017d",
                "7a8d1e3ab341ac3e"
            ]
        ]
    },
    {
        "id": "fe8844707189a25b",
        "type": "link out",
        "z": "bb32693f1e238fb3",
        "name": "Generate Report",
        "mode": "link",
        "links": [
            "7d76f6ba396887ab"
        ],
        "x": 1385,
        "y": 3520,
        "wires": []
    },
    {
        "id": "7cb34e23065ce05a",
        "type": "link in",
        "z": "bb32693f1e238fb3",
        "name": "Send Report Photo",
        "links": [
            "9f6c0b285aa42713"
        ],
        "x": 295,
        "y": 3600,
        "wires": [
            [
                "8de18e65ae2ede66"
            ]
        ]
    },
    {
        "id": "9c0e2335d5d52380",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "IMG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 3680,
        "wires": []
    },
    {
        "id": "160e6d7f91fb017d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "function 8",
        "func": "const configDefault = {\n    initialWeather: \"CLOUDY\",\n    fields: [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    interval: 5000\n};\nconst config = global.get(\"simulationConfiguration\") || configDefault;\n\nvar chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\nvar counter = chatContext.counter || 0;\nchatContext.counter = counter + 1;\nflow.set(chatContextKey, chatContext);\n\nif (chatContext.counter == config.fields.length){\n    msg.payload.type = 'deleteMessage',\n    msg.payload.content = chatContext.messageIdGenerateReport\n    delete chatContext.messageIdToReplayGenerateReport;\n    delete chatContext.messageIdGenerateReport;\n    delete chatContext.counter;\n    flow.set(chatContextKey, chatContext);\n    const alertSettings = global.get('alertSettings') || {};\n    alertSettings.active = true;\n    global.set('alertSettings', alertSettings);\n    return msg;\n}\nflow.set(chatContextKey, chatContext);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 3600,
        "wires": [
            [
                "c7040a2b1fa36086"
            ]
        ]
    },
    {
        "id": "7a8d1e3ab341ac3e",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 3560,
        "wires": []
    },
    {
        "id": "5f524d010a014058",
        "type": "mqtt in",
        "z": "042284347e59efcf",
        "name": "",
        "topic": "agriculture/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 620,
        "wires": [
            [
                "c504053a46e6b727"
            ]
        ]
    },
    {
        "id": "c504053a46e6b727",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 620,
        "wires": []
    },
    {
        "id": "8eb7215b63983688",
        "type": "influxdb in",
        "z": "042284347e59efcf",
        "influxdb": "8cbf2748df1bc57f",
        "name": "Read InfluxDB ",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 1080,
        "y": 400,
        "wires": [
            [
                "47860f23a21de299",
                "743dd546f5381434"
            ]
        ]
    },
    {
        "id": "318cecd3ba2ab2ff",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 720,
        "wires": []
    },
    {
        "id": "f04e1a5057727141",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 1",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 720,
        "wires": [
            [
                "318cecd3ba2ab2ff"
            ]
        ]
    },
    {
        "id": "c86dd50c6146831b",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 2",
        "func": "// Accedi all'array nel payload\nlet data = msg.payload[0];\n\n// Estrai i valori desiderati\nmsg.payload = {\n    field_id: data.field_id,\n    sensor_type: data.sensor_type,\n    value: data._value\n};\n\n// Restituisci il messaggio modificato\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 820,
        "wires": [
            [
                "3d717226fb14f6cb"
            ]
        ]
    },
    {
        "id": "3d717226fb14f6cb",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 820,
        "wires": []
    },
    {
        "id": "babedfa59590221f",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 3",
        "func": "// Accedi all'array nel payload\nlet data = msg.payload[0];\n\n// Crea un messaggio formattato\nlet text = `Valori rilevati:\n- Campo: ${data.field_id}\n    - Tipo sensore: ${data.sensor_type} : Valore: ${data._value}`;\n// Imposta il payload per Telegram\nmsg.payload = {\n    chatId: \"CHAT_ID\", // Sostituisci con l'ID della chat o del canale Telegram\n    type: \"message\",\n    content: text\n};\n\n// Restituisci il messaggio\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 900,
        "wires": [
            [
                "f4daa727362fc1a0"
            ]
        ]
    },
    {
        "id": "f4daa727362fc1a0",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 900,
        "wires": []
    },
    {
        "id": "0fcfc409acc8a53b",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 4",
        "func": "// Inizializza una mappa per raggruppare i dati per campo\nlet groupedData = {};\n\n// Itera attraverso tutti i valori ricevuti (msg.payload è un array)\nmsg.payload.forEach(item => {\n    // Ottieni il field_id e inizializza il gruppo se necessario\n    let field = item.field_id;\n    if (!groupedData[field]) {\n        groupedData[field] = [];\n    }\n\n    // Aggiungi il sensore e il valore al gruppo del campo\n    groupedData[field].push({\n        sensor_type: item.sensor_type,\n        value: item._value\n    });\n});\n\n// Crea un messaggio formattato\nlet message = '';\nObject.keys(groupedData).forEach(field => {\n    message += `Field ${field}\\n`;\n    groupedData[field].forEach(sensor => {\n        message += `   - ${sensor.sensor_type}: ${sensor.value}\\n`;\n    });\n    message += '\\n'; // Aggiungi una riga vuota tra i campi\n});\n\n// Imposta il payload per invio\nmsg.payload = message;\n\n// Restituisci il messaggio\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 980,
        "wires": [
            [
                "544a99734b4a83fc"
            ]
        ]
    },
    {
        "id": "544a99734b4a83fc",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 980,
        "wires": []
    },
    {
        "id": "689cfa5331468852",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Thresholds Alert Checker",
        "func": "// Definisci le soglie di allerta\nconst thresholds = {\n    soilMoisture: { min: 20, max: 80 },\n    temperature: { min: 0, max: 35 },\n    ph: { min: 5.5, max: 7.5 },\n    salinity: { max: 1500 },\n    humidity: { min: 30, max: 90 },\n    rain: { max: 50 }\n};\n\n// Array per memorizzare i messaggi di allerta\nlet alerts = [];\n\n// Itera sui valori dei sensori\nmsg.payload.forEach(sensorData => {\n    let sensorType = sensorData.sensor_type; // Tipo di sensore\n    let value = sensorData._value; // Valore del sensore\n    let timestamp = sensorData._time; // Timestamp della misurazione\n    let fieldId = sensorData.field_id; // Campo a cui appartiene il sensore\n\n    // Controlla se il sensore supera le soglie\n    if (thresholds[sensorType]) {\n        let limits = thresholds[sensorType];\n        if ((limits.min !== undefined && value < limits.min) || \n            (limits.max !== undefined && value > limits.max)) {\n            // Crea il messaggio di allerta\n            alerts.push(`⚠️ ALERT:\n- Field: ${fieldId}\n- Sensor: ${sensorType}\n- Value: ${value}\n- Threshold: ${limits.min !== undefined && value < limits.min ? `Min ${limits.min}` : `Max ${limits.max}`}\n- Timestamp: ${timestamp}`);\n        }\n    }\n});\n\n// Se ci sono allerta, imposta il payload per invio\nif (alerts.length > 0) {\n    msg.payload = alerts.join('\\n\\n'); // Unisci tutti i messaggi di allerta\n} else {\n    //msg.payload = \"✅ No alerts detected.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a547a7c2d2c53e98",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 360,
        "wires": []
    },
    {
        "id": "312e574b09a4aec1",
        "type": "trigger",
        "z": "042284347e59efcf",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 400,
        "wires": [
            [
                "8eb7215b63983688"
            ]
        ]
    },
    {
        "id": "f1db4e2770ca5997",
        "type": "link in",
        "z": "042284347e59efcf",
        "name": "start-sim",
        "links": [
            "c3658e8c395688ef"
        ],
        "x": 95,
        "y": 360,
        "wires": [
            [
                "fec122cd3a59cddb"
            ]
        ]
    },
    {
        "id": "44df0d1686a26b90",
        "type": "link in",
        "z": "042284347e59efcf",
        "name": "stop-sim",
        "links": [
            "92afd731d3dbf926"
        ],
        "x": 95,
        "y": 440,
        "wires": [
            [
                "d867224f8b76a4a4"
            ]
        ]
    },
    {
        "id": "d867224f8b76a4a4",
        "type": "change",
        "z": "042284347e59efcf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 440,
        "wires": [
            [
                "312e574b09a4aec1"
            ]
        ]
    },
    {
        "id": "39704c3f722ec025",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 180,
        "wires": []
    },
    {
        "id": "a7b02885804868a9",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "Fetch data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"thresholds\":{\"soilMoisture\":{\"min\":20,\"max\":80},\"temperature\":{\"min\":0,\"max\":35},\"ph\":{\"min\":5.5,\"max\":7.5},\"salinity\":{\"max\":1500},\"humidity\":{\"min\":30,\"max\":90},\"rain\":{\"max\":50}}}",
        "payloadType": "json",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "347eba6e7773c383"
            ]
        ]
    },
    {
        "id": "347eba6e7773c383",
        "type": "join",
        "z": "042284347e59efcf",
        "name": "threshold and values",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "39704c3f722ec025"
            ]
        ]
    },
    {
        "id": "cf1204e4e5b4a199",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Refactor value from InfluxDB query",
        "func": "// Inizializza un oggetto strutturato per i sensori\nlet sensors = {\n    sensors: msg.payload // Sposta i dati dell'array nella proprietà `sensors`\n};\n\n// Imposta `msg.payload` come l'oggetto convertito\nmsg.payload = sensors;\n\n// Restituisci il messaggio aggiornato\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "347eba6e7773c383"
            ]
        ]
    },
    {
        "id": "fec122cd3a59cddb",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Get Configuration and Set delay",
        "func": "msg = {};\nconst configDefault = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\": 5000\n};\nconst config = global.get(\"simulationConfiguration\") || configDefault;\nmsg.delay = config.interval;\nmsg.querydelay = config.interval + 1000;\n\nflow.set(\"AlertStatus\", true);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "ae4832f5221b5b4f"
            ]
        ]
    },
    {
        "id": "47860f23a21de299",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Thresholds Alert Checker",
        "func": "// Definisci le soglie di allerta\nconst thresholdsDefault = {\n    soilMoisture: { min: 20, max: 80 },\n    temperature: { min: 0, max: 35 },\n    ph: { min: 5.5, max: 7.5 },\n    salinity: { min: 200, max: 1500 },\n    humidity: { min: 30, max: 90 },\n    rain: { max: 40 }\n};\n\nconst thresholds = global.get(\"sensorsThreshold\") || thresholdsDefault;\n\n// Dati ricevuti dalla query\nconst data = msg.payload;\n\n// Oggetto per tracciare l'ultimo valore per ciascun sensore-campo\nconst latestValues = {};\n\n// Array per gli alert\nconst alerts = [];\n\n// Itera sui dati ricevuti\ndata.forEach(entry => {\n    const fieldId = entry.field_id;\n    const sensorType = entry.sensor_type;\n    const value = entry._value;\n    const timestamp = entry._time;\n\n    // Recupera i limiti per il sensore\n    const limits = thresholds[sensorType];\n    if (!limits) return; // Salta sensori senza soglie definite\n\n    // Verifica se il valore supera i limiti\n    const isBelowMin = limits.min !== undefined && value < limits.min;\n    const isAboveMax = limits.max !== undefined && value > limits.max;\n\n    if (isBelowMin || isAboveMax) {\n        // Crea una chiave unica per sensore-campo con Min/Max\n        const key = `${fieldId}-${sensorType}`;\n\n        // Aggiorna l'oggetto con l'ultimo valore dell'allerta\n        latestValues[key] = {\n            fieldId,\n            sensorType,\n            value,\n            timestamp,\n            threshold: isBelowMin ? `Min ${limits.min}` : `Max ${limits.max}`\n        };\n    }\n});\n\n// Converti l'oggetto degli ultimi valori in un array di alert\n/*for (const key in latestValues) {\n    const alert = latestValues[key];\n    alerts.push(`⚠️ ALERT:\\n- Field: ${alert.fieldId}\\n- Sensor: ${alert.sensorType}\\n- Value: ${alert.value}\\n- Threshold: ${alert.threshold}\\n- Timestamp: ${alert.timestamp}`);\n}*/\n\nfor (const key in latestValues) {\n    const alert = latestValues[key];\n    alerts.push(alert);\n}\n\n\n// Assegna l'array di alert al messaggio in uscita\nmsg.alerts = alerts;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "a547a7c2d2c53e98",
                "c8a96618280d2c3c"
            ]
        ]
    },
    {
        "id": "743dd546f5381434",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "RESEND",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "971773312f79074b",
        "type": "trigger",
        "z": "042284347e59efcf",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "1d34f9595072bef7",
        "type": "change",
        "z": "042284347e59efcf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 720,
        "wires": [
            [
                "971773312f79074b"
            ]
        ]
    },
    {
        "id": "8e8b4f0ed24e9491",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 720,
        "wires": [
            [
                "1d34f9595072bef7"
            ]
        ]
    },
    {
        "id": "a4a36106fb47624a",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 5",
        "func": "msg.delay = 5000;\nmsg.payload = \"TEST da 5s\";\nmsg.time = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 620,
        "wires": [
            [
                "971773312f79074b",
                "9eabeeb7a03cb38d"
            ]
        ]
    },
    {
        "id": "ddedb6731b24bb24",
        "type": "delay",
        "z": "042284347e59efcf",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 560,
        "wires": [
            [
                "a4a36106fb47624a"
            ]
        ]
    },
    {
        "id": "5f0d024983f283be",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "a4a36106fb47624a"
            ]
        ]
    },
    {
        "id": "f5cb7152c6ab3a16",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 560,
        "wires": [
            [
                "ddedb6731b24bb24"
            ]
        ]
    },
    {
        "id": "2f46808f8709c882",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 800,
        "wires": [
            [
                "1d34f9595072bef7",
                "a9ee1d3a5292ba90"
            ]
        ]
    },
    {
        "id": "a9ee1d3a5292ba90",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 6",
        "func": "msg.delay = 1000;\nmsg.payload = \"TEST da 1s\";\nmsg.time = Date.now();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 800,
        "wires": [
            [
                "971773312f79074b"
            ]
        ]
    },
    {
        "id": "9eabeeb7a03cb38d",
        "type": "change",
        "z": "042284347e59efcf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "delay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "ae4832f5221b5b4f",
        "type": "template",
        "z": "042284347e59efcf",
        "name": "Query InfluxDB",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket: \"SA-FMS\")\n  |> range(start: -{{querydelay}}ms)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> group(columns: [\"field_id\", \"sensor_type\"])\n  |> last()",
        "output": "str",
        "x": 520,
        "y": 360,
        "wires": [
            [
                "8e080e5f39f10e3d"
            ]
        ]
    },
    {
        "id": "592c43ea9eef1682",
        "type": "link in",
        "z": "042284347e59efcf",
        "name": "Reset alert Config and Thresholds",
        "links": [
            "2e829639469c3d9d",
            "1afb0f3b103d6bbb",
            "1d4fa3ebecd6de4c"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "e7e3c5b46e5e01d9"
            ]
        ]
    },
    {
        "id": "b9e92287a97203b8",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Set Alert Status to false",
        "func": "flow.set(\"AlertStatus\", false);\nmsg = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 500,
        "wires": [
            [
                "d867224f8b76a4a4"
            ]
        ]
    },
    {
        "id": "e7e3c5b46e5e01d9",
        "type": "switch",
        "z": "042284347e59efcf",
        "name": "if Alert is Running",
        "property": "AlertStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 500,
        "wires": [
            [
                "fec122cd3a59cddb",
                "b9e92287a97203b8"
            ],
            []
        ]
    },
    {
        "id": "c8a96618280d2c3c",
        "type": "link out",
        "z": "042284347e59efcf",
        "name": "Send Telegram Alert",
        "mode": "link",
        "links": [
            "1e59b061de9325aa"
        ],
        "x": 1495,
        "y": 420,
        "wires": []
    },
    {
        "id": "8e080e5f39f10e3d",
        "type": "delay",
        "z": "042284347e59efcf",
        "name": "variable or 5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 360,
        "wires": [
            [
                "312e574b09a4aec1"
            ]
        ]
    },
    {
        "id": "dcd22410200503f2",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1610,
        "y": 320,
        "wires": [
            [
                "29b04e773fd39e84",
                "7ef98ba80c4027f0"
            ]
        ]
    },
    {
        "id": "de0c30e0f8dcba34",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "Tests with 2 fields with all sensors",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"dashboard\":{\"annotations\":{\"list\":[{\"builtIn\":1,\"datasource\":{\"type\":\"grafana\",\"uid\":\"-- Grafana --\"},\"enable\":true,\"hide\":true,\"iconColor\":\"rgba(0, 211, 255, 1)\",\"name\":\"Annotations & Alerts\",\"type\":\"dashboard\"}]},\"editable\":true,\"fiscalYearStartMonth\":0,\"graphTooltip\":0,\"links\":[],\"panels\":[{\"type\":\"row\",\"title\":\"Overview\",\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":0},\"id\":999,\"panels\":[]},{\"type\":\"text\",\"title\":\"Dashboard Introduction\",\"id\":1000,\"gridPos\":{\"h\":12,\"w\":24,\"x\":0,\"y\":1},\"options\":{\"mode\":\"markdown\",\"content\":\"## IoT Sensors Dashboard - Field 1\\n\\nWelcome to the **Field 1** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\\n\\n### Overview\\nThis dashboard provides real-time monitoring of data from Field 1, with each row dedicated to a specific sensor.\\nUsing data collected from simulated IoT sensors, the system helps identify critical conditions and optimize agricultural resource management.\\n\\n### Monitored Sensors\\n1. **Soil Moisture Sensor**: Measures soil water content to determine irrigation needs.\\n2. **Temperature Sensor**: Monitors ambient temperature to assess climate conditions.\\n3. **Soil pH Sensor**: Measures soil acidity/alkalinity to ensure compatibility with crops.\\n4. **Water Salinity Sensor**: Monitors water salinity levels to ensure optimal irrigation quality.\\n5. **Relative Humidity Sensor**: Measures air humidity to monitor atmospheric conditions.\\n6. **Rain Detection Sensor**: Detects the presence and intensity of rain to adjust irrigation schedules.\\n\\n### Alerts\\nUse the **All Alerts** section to check for any anomalies or sensors exceeding desired thresholds.\"}},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":5},\"id\":1,\"panels\":[],\"title\":\"All Alerts\",\"type\":\"row\"},{\"fieldConfig\":{\"defaults\":{},\"overrides\":[]},\"gridPos\":{\"h\":10,\"w\":24,\"x\":0,\"y\":6},\"id\":2,\"options\":{\"alertInstanceLabelFilter\":\"\",\"alertName\":\"Field 1\",\"dashboardAlerts\":true,\"folder\":\"\",\"groupBy\":[\"sensor_type\"],\"groupMode\":\"custom\",\"maxItems\":50,\"sortOrder\":4,\"stateFilter\":{\"error\":true,\"firing\":true,\"noData\":true,\"normal\":false,\"pending\":true},\"viewMode\":\"list\"},\"pluginVersion\":\"11.3.1\",\"title\":\"All Active Alerts\",\"type\":\"alertlist\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":16},\"id\":20,\"panels\":[],\"title\":\"Temperature\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":true,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"orange\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"yellow\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":16,\"x\":0,\"y\":17},\"id\":21,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"colorByField\":\"value {field_id=\\\"field1\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field1/temperature\\\"}\",\"fullHighlight\":true,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"normal\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"#EAB839\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":8,\"x\":16,\"y\":17},\"id\":22,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"/^value \\\\{field_id=\\\"field1\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field1/temperature\\\"\\\\}$/\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature Gauge\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":28},\"id\":50,\"panels\":[],\"title\":\"Humidity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\",\"seriesBy\":\"last\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisGridShow\":true,\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":80},{\"color\":\"red\",\"value\":90}]}},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":29},\"id\":51,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\n  |> yield(name: \\\"mean\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"green\",\"value\":30},{\"color\":\"orange\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":29},\"id\":52,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity (Last) - field1\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":37},\"id\":10,\"panels\":[],\"title\":\"Soil Moisture\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":70},{\"color\":\"red\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":38},\"id\":11,\"options\":{\"barRadius\":0,\"barWidth\":1,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[\"lastNotNull\"],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (BarChart) - field1\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"red\",\"value\":70}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":38},\"id\":12,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (Last Value) - field1\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":46},\"id\":30,\"panels\":[],\"title\":\"pH\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"#EAB839\",\"value\":6},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8}]},\"unit\":\"pH\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":47},\"id\":32,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":14,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"yellow\",\"value\":5.5},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8.5}]},\"unit\":\"none\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":47},\"id\":31,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH (Gauge) - field1\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":55},\"id\":40,\"panels\":[],\"title\":\"Salinity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":500},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":56},\"id\":42,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity (BarChart) - field1\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":450},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":56},\"id\":41,\"options\":{\"displayMode\":\"gradient\",\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"maxVizHeight\":300,\"minVizHeight\":16,\"minVizWidth\":8,\"namePlacement\":\"auto\",\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showUnfilled\":false,\"sizing\":\"auto\",\"valueMode\":\"color\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity\",\"type\":\"bargauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":64},\"id\":60,\"panels\":[],\"title\":\"Rain\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"fillOpacity\":70,\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineWidth\":0,\"spanNulls\":false},\"displayName\":\".\",\"fieldMinMax\":false,\"mappings\":[],\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"blue\",\"value\":1},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"lengthmm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":65},\"id\":62,\"options\":{\"alignValue\":\"left\",\"legend\":{\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"mergeValues\":false,\"rowHeight\":0.9,\"showValue\":\"auto\",\"tooltip\":{\"mode\":\"multi\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain Detection (State)\",\"type\":\"state-timeline\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"mm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":65},\"id\":61,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain (Last Value) - field1\",\"type\":\"stat\"}],\"preload\":false,\"refresh\":\"5s\",\"schemaVersion\":1,\"tags\":[],\"templating\":{\"list\":[]},\"time\":{\"from\":\"now-15m\",\"to\":\"now\"},\"timepicker\":{},\"timezone\":\"browser\",\"title\":\"IoT Sensors Dashboard - Field 1\",\"uid\":\"iot-sensors-001\",\"version\":31,\"weekStart\":\"\"},\"folderUid\":\"ce9xc3gcolq80d\",\"isFolder\":false,\"overwrite\":true},{\"dashboard\":{\"annotations\":{\"list\":[{\"builtIn\":1,\"datasource\":{\"type\":\"grafana\",\"uid\":\"-- Grafana --\"},\"enable\":true,\"hide\":true,\"iconColor\":\"rgba(0, 211, 255, 1)\",\"name\":\"Annotations & Alerts\",\"type\":\"dashboard\"}]},\"editable\":true,\"fiscalYearStartMonth\":0,\"graphTooltip\":0,\"links\":[],\"panels\":[{\"type\":\"row\",\"title\":\"Overview\",\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":0},\"id\":999,\"panels\":[]},{\"type\":\"text\",\"title\":\"Dashboard Introduction\",\"id\":1000,\"gridPos\":{\"h\":12,\"w\":24,\"x\":0,\"y\":1},\"options\":{\"mode\":\"markdown\",\"content\":\"## IoT Sensors Dashboard - Field 2\\n\\nWelcome to the **Field 2** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\\n\\n### Overview\\nThis dashboard provides real-time insights into data from Field 2, with each row focused on a specific sensor. The system helps detect anomalies and supports sustainable agricultural productivity.\\n\\n### Monitored Sensors\\n1. **Soil Moisture Sensor**: Tracks soil water content to optimize irrigation.\\n2. **Temperature Sensor**: Monitors temperature to prevent plant heat stress.\\n3. **Soil pH Sensor**: Evaluates soil acidity or alkalinity for targeted adjustments.\\n4. **Water Salinity Sensor**: Checks water salinity to prevent crop damage.\\n5. **Relative Humidity Sensor**: Measures air humidity to optimize water resource usage.\\n6. **Rain Detection Sensor**: Identifies rain presence and intensity to reduce water consumption.\\n\\n### Alerts\\nUse the **All Alerts** section to view notifications about sensor anomalies and recommended actions.\"}},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":5},\"id\":1,\"panels\":[],\"title\":\"All Alerts\",\"type\":\"row\"},{\"fieldConfig\":{\"defaults\":{},\"overrides\":[]},\"gridPos\":{\"h\":10,\"w\":24,\"x\":0,\"y\":6},\"id\":2,\"options\":{\"alertInstanceLabelFilter\":\"\",\"alertName\":\"Field 2\",\"dashboardAlerts\":true,\"folder\":\"\",\"groupBy\":[\"sensor_type\"],\"groupMode\":\"custom\",\"maxItems\":50,\"sortOrder\":4,\"stateFilter\":{\"error\":true,\"firing\":true,\"noData\":true,\"normal\":false,\"pending\":true},\"viewMode\":\"list\"},\"pluginVersion\":\"11.3.1\",\"title\":\"All Active Alerts\",\"type\":\"alertlist\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":16},\"id\":20,\"panels\":[],\"title\":\"Temperature\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":true,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"orange\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"yellow\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":16,\"x\":0,\"y\":17},\"id\":21,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"colorByField\":\"value {field_id=\\\"field2\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field2/temperature\\\"}\",\"fullHighlight\":true,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"normal\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"#EAB839\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":8,\"x\":16,\"y\":17},\"id\":22,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"/^value \\\\{field_id=\\\"field2\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field2/temperature\\\"\\\\}$/\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature Gauge\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":28},\"id\":50,\"panels\":[],\"title\":\"Humidity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\",\"seriesBy\":\"last\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisGridShow\":true,\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":80},{\"color\":\"red\",\"value\":90}]}},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":29},\"id\":51,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\n  |> yield(name: \\\"mean\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"green\",\"value\":30},{\"color\":\"orange\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":29},\"id\":52,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity (Last) - field2\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":37},\"id\":10,\"panels\":[],\"title\":\"Soil Moisture\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":70},{\"color\":\"red\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":38},\"id\":11,\"options\":{\"barRadius\":0,\"barWidth\":1,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[\"lastNotNull\"],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (BarChart) - field2\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"red\",\"value\":70}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":38},\"id\":12,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (Last Value) - field2\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":46},\"id\":30,\"panels\":[],\"title\":\"pH\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"#EAB839\",\"value\":6},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8}]},\"unit\":\"pH\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":47},\"id\":32,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":14,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"yellow\",\"value\":5.5},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8.5}]},\"unit\":\"none\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":47},\"id\":31,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH (Gauge) - field2\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":55},\"id\":40,\"panels\":[],\"title\":\"Salinity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":500},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":56},\"id\":42,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity (BarChart) - field2\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":450},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":56},\"id\":41,\"options\":{\"displayMode\":\"gradient\",\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"maxVizHeight\":300,\"minVizHeight\":16,\"minVizWidth\":8,\"namePlacement\":\"auto\",\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showUnfilled\":false,\"sizing\":\"auto\",\"valueMode\":\"color\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity\",\"type\":\"bargauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":64},\"id\":60,\"panels\":[],\"title\":\"Rain\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"fillOpacity\":70,\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineWidth\":0,\"spanNulls\":false},\"displayName\":\".\",\"fieldMinMax\":false,\"mappings\":[],\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"blue\",\"value\":1},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"lengthmm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":65},\"id\":62,\"options\":{\"alignValue\":\"left\",\"legend\":{\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"mergeValues\":false,\"rowHeight\":0.9,\"showValue\":\"auto\",\"tooltip\":{\"mode\":\"multi\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain Detection (State)\",\"type\":\"state-timeline\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"mm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":65},\"id\":61,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain (Last Value) - field2\",\"type\":\"stat\"}],\"preload\":false,\"refresh\":\"auto\",\"schemaVersion\":1,\"tags\":[],\"templating\":{\"list\":[]},\"time\":{\"from\":\"now-15m\",\"to\":\"now\"},\"timepicker\":{},\"timezone\":\"browser\",\"title\":\"IoT Sensors Dashboard - Field 2\",\"uid\":\"iot-sensors-002\",\"version\":31,\"weekStart\":\"\"},\"folderUid\":\"ce9xc3gcolq80d\",\"isFolder\":false,\"overwrite\":true}]",
        "payloadType": "json",
        "x": 1390,
        "y": 400,
        "wires": [
            [
                "dcd22410200503f2"
            ]
        ]
    },
    {
        "id": "29b04e773fd39e84",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 240,
        "wires": []
    },
    {
        "id": "7ef98ba80c4027f0",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create dashboards",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/dashboards/db",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1790,
        "y": 320,
        "wires": [
            [
                "43defb8bf4affebb",
                "3e2dc0f0113f8a5b"
            ]
        ]
    },
    {
        "id": "43defb8bf4affebb",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 240,
        "wires": []
    },
    {
        "id": "5eedf4fde1a2ef9d",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"initialWeather\":\"CLOUDY\",\"fields\":[{\"fieldId\":1,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":true,\"humidity\":true,\"rain\":true}},{\"fieldId\":2,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":false,\"salinity\":false,\"humidity\":true,\"rain\":false}},{\"fieldId\":3,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":true,\"humidity\":true,\"rain\":true}}],\"interval\":5000}",
        "payloadType": "json",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "69cf5018365ddd24",
                "39c9855ab18c75ca"
            ]
        ]
    },
    {
        "id": "d75d7b4839b9141f",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate Grafana Dashboards",
        "func": "/*********************************************************************\n * Node-RED Function:\n * Genera array di dashboard Grafana con soglie, layout, orientamenti\n * e dettagli esattamente come nel JSON di esempio fornito.\n *\n * msg.payload deve contenere:\n * {\n *   \"fields\": [\n *      {\n *        \"fieldId\": 1,\n *        \"sensors\": {\n *          \"soilMoisture\": true,\n *          \"temperature\": true,\n *          \"ph\": true,\n *          \"salinity\": true,\n *          \"humidity\": true,\n *          \"rain\": true\n *        }\n *      },\n *      ...\n *   ],\n *   \"interval\": 5000\n * }\n ********************************************************************/\n\n// Converte interval da ms a \"Xs\"\nfunction convertIntervalToRefresh(intervalMs) {\n    const seconds = Math.floor(intervalMs / 1000);\n    return seconds + \"s\"; // Esempio: 5000 ms -> \"5s\"\n}\n\n// Costruisce il pannello \"Overview\" (row)\nfunction buildOverviewRow() {\n    return {\n        \"type\": \"row\",\n        \"title\": \"Overview\",\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 },\n        \"id\": 999,\n        \"panels\": []\n    };\n}\n\n// Costruisce il pannello testuale di introduzione, riferito a \"Field X\"\nfunction buildTextPanel(fieldId, sensors) {\n  // Mappa dei sensori con i loro nomi descrittivi\n  const sensorDescriptions = {\n    soilMoisture: \"Soil Moisture Sensor: Measures soil water content to determine irrigation needs.\",\n    temperature: \"Temperature Sensor: Monitors ambient temperature to assess climate conditions.\",\n    ph: \"Soil pH Sensor: Measures soil acidity/alkalinity to ensure compatibility with crops.\",\n    salinity: \"Water Salinity Sensor: Monitors water salinity levels to ensure optimal irrigation quality.\",\n    humidity: \"Relative Humidity Sensor: Measures air humidity to monitor atmospheric conditions.\",\n    rain: \"Rain Detection Sensor: Detects the presence and intensity of rain to adjust irrigation schedules.\"\n  };\n\n  // Filtra i sensori con valore true\n  const activeSensors = Object.entries(sensors)\n    .filter(([key, value]) => value)\n    .map(([key]) => `- **${sensorDescriptions[key]}**`)\n    .join(\"\\n\");\n\n  return {\n    \"type\": \"text\",\n    \"title\": \"Dashboard Introduction\",\n    \"id\": 1000,\n    \"gridPos\": {\n      \"h\": 12,\n      \"w\": 24,\n      \"x\": 0,\n      \"y\": 1\n    },\n    \"options\": {\n      \"mode\": \"markdown\",\n      \"content\": `## IoT Sensors Dashboard - Field ${fieldId}\n\nWelcome to the **Field ${fieldId}** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\n\n### Overview\nThis dashboard provides real-time monitoring of data from **Field ${fieldId}**, with each row dedicated to a specific sensor.\nUsing data collected from simulated IoT sensors, the system helps identify critical conditions and optimize agricultural resource management.\n\n### Monitored Sensors\n${activeSensors || \"No sensors are currently being monitored.\"}\n\n### Alerts\nUse the **All Alerts** section to check for any anomalies or sensors exceeding desired thresholds.`\n    }\n  };\n}\n\n\n// Costruisce la row \"All Alerts\" + pannello \"All Active Alerts\"\nfunction buildAllAlertsRow(fieldId) {\n    return [\n        {\n            \"type\": \"row\",\n            \"title\": \"All Alerts\",\n            \"collapsed\": false,\n            \"gridPos\": {\n                \"h\": 1,\n                \"w\": 24,\n                \"x\": 0,\n                \"y\": 5\n            },\n            \"id\": 1,\n            \"panels\": []\n        },\n        {\n            \"fieldConfig\": { \"defaults\": {}, \"overrides\": [] },\n            \"gridPos\": {\n                \"h\": 10,\n                \"w\": 24,\n                \"x\": 0,\n                \"y\": 6\n            },\n            \"id\": 2,\n            \"options\": {\n                \"alertInstanceLabelFilter\": \"\",\n                \"alertName\": `Field ${fieldId}`,\n                \"dashboardAlerts\": true,\n                \"folder\": \"\",\n                \"groupBy\": [ \"sensor_type\" ],\n                \"groupMode\": \"custom\",\n                \"maxItems\": 50,\n                \"sortOrder\": 4,\n                \"stateFilter\": {\n                    \"error\": true,\n                    \"firing\": true,\n                    \"noData\": true,\n                    \"normal\": false,\n                    \"pending\": true\n                },\n                \"viewMode\": \"list\"\n            },\n            \"pluginVersion\": \"11.3.1\",\n            \"title\": \"All Active Alerts\",\n            \"type\": \"alertlist\"\n        }\n    ];\n}\n\n// ---------- TEMPERATURE -----------\nfunction buildTemperaturePanels(fieldId, thresholds) {\n    // Row \"Temperature\" + Barchart + Gauge\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 16 },\n        \"id\": 20,\n        \"panels\": [],\n        \"title\": \"Temperature\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": true,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"mappings\": [],\n            \"max\": 45,\n            \"min\": -15,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [             \n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"celsius\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 11, \"w\": 16, \"x\": 0, \"y\": 17 },\n        \"id\": 21,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 0.97,\n          \"colorByField\": `value {field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"}`,\n          \"fullHighlight\": true,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"normal\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Temperature\",\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 45,\n            \"min\": -15,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"celsius\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 11, \"w\": 8, \"x\": 16, \"y\": 17 },\n        \"id\": 22,\n        \"options\": {\n          \"minVizHeight\": 75,\n          \"minVizWidth\": 75,\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": `/^value \\\\{field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"\\\\}$/`,\n            \"values\": false\n          },\n          \"showThresholdLabels\": false,\n          \"showThresholdMarkers\": true,\n          \"sizing\": \"auto\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Temperature Gauge\",\n        \"type\": \"gauge\"\n      }\n    ];\n}\n\n// ---------- HUMIDITY -----------\nfunction buildHumidityPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 28 },\n        \"id\": 50,\n        \"panels\": [],\n        \"title\": \"Humidity\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": {\n              \"mode\": \"thresholds\",\n              \"seriesBy\": \"last\"\n            },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisGridShow\": true,\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"barAlignment\": 0,\n              \"barWidthFactor\": 0.6,\n              \"drawStyle\": \"line\",\n              \"fillOpacity\": 0,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineInterpolation\": \"linear\",\n              \"lineWidth\": 1,\n              \"pointSize\": 5,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"showPoints\": \"auto\",\n              \"spanNulls\": false,\n              \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n              \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n            },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\",    \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min   },\n                { \"color\": \"red\", \"value\": thresholds.max   }\n              ]\n            }\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 29 },\n        \"id\": 51,\n        \"options\": {\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Humidity\",\n        \"type\": \"timeseries\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 29 },\n        \"id\": 52,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Humidity`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n// ---------- SOIL MOISTURE -----------\nfunction buildSoilMoisturePanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 },\n        \"id\": 10,\n        \"panels\": [],\n        \"title\": \"Soil Moisture\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\",    \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min   },\n                { \"color\": \"red\", \"value\": thresholds.max   }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 38 },\n        \"id\": 11,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 1,\n          \"fullHighlight\": false,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"none\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil Moisture`,\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 38 },\n        \"id\": 12,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil Moisture`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n// ---------- pH -----------\nfunction buildPhPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 46 },\n        \"id\": 30,\n        \"panels\": [],\n        \"title\": \"Soil pH\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"barAlignment\": 0,\n              \"barWidthFactor\": 0.6,\n              \"drawStyle\": \"line\",\n              \"fillOpacity\": 0,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineInterpolation\": \"linear\",\n              \"lineWidth\": 1,\n              \"pointSize\": 5,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"showPoints\": \"auto\",\n              \"spanNulls\": false,\n              \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n              \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n            },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max  }\n              ]\n            },\n            \"unit\": \"pH\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 47 },\n        \"id\": 32,\n        \"options\": {\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Soil pH\",\n        \"type\": \"timeseries\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 14,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"none\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 47 },\n        \"id\": 31,\n        \"options\": {\n          \"minVizHeight\": 75,\n          \"minVizWidth\": 75,\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showThresholdLabels\": false,\n          \"showThresholdMarkers\": true,\n          \"sizing\": \"auto\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil pH`,\n        \"type\": \"gauge\"\n      }\n    ];\n}\n\n// ---------- SALINITY -----------\nfunction buildSalinityPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 55 },\n        \"id\": 40,\n        \"panels\": [],\n        \"title\": \"Water Salinity\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"μS/cm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 56 },\n        \"id\": 42,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 0.97,\n          \"fullHighlight\": false,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"none\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Water Salinity`,\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"μS/cm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 56 },\n        \"id\": 41,\n        \"options\": {\n          \"displayMode\": \"gradient\",\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"maxVizHeight\": 300,\n          \"minVizHeight\": 16,\n          \"minVizWidth\": 8,\n          \"namePlacement\": \"auto\",\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showUnfilled\": false,\n          \"sizing\": \"auto\",\n          \"valueMode\": \"color\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Water Salinity\",\n        \"type\": \"bargauge\"\n      }\n    ];\n}\n\n// ---------- RAIN -----------\nfunction buildRainPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 64 },\n        \"id\": 60,\n        \"panels\": [],\n        \"title\": \"Rain Detection\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"fillOpacity\": 70,\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineWidth\": 0,\n              \"spanNulls\": false\n            },\n            \"displayName\": \".\",\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\" },\n                { \"color\": \"blue\",   \"value\": 1 },\n                { \"color\": \"red\", \"value\": thresholds .max}\n              ]\n            },\n            \"unit\": \"lengthmm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 65 },\n        \"id\": 62,\n        \"options\": {\n          \"alignValue\": \"left\",\n          \"legend\": {\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"mergeValues\": false,\n          \"rowHeight\": 0.9,\n          \"showValue\": \"auto\",\n          \"tooltip\": { \"mode\": \"multi\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Rain Detection State\",\n        \"type\": \"state-timeline\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\" },\n                { \"color\": \"red\", \"value\": thresholds .max}\n              ]\n            },\n            \"unit\": \"mm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 65 },\n        \"id\": 61,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Rain Detection`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n/***************************************************************\n * buildDashboardForField\n * Costruisce la singola dashboard (JSON) per il field specifico,\n * con i pannelli corrispondenti solo ai sensori \"true\".\n ***************************************************************/\nfunction buildDashboardForField(fieldId, sensors, refreshValue, thresholds) {\n    // Struttura base\n    let baseDashboard = {\n      \"dashboard\": {\n        \"annotations\": {\n          \"list\": [\n            {\n              \"builtIn\": 1,\n              \"datasource\": {\n                \"type\": \"grafana\",\n                \"uid\": \"-- Grafana --\"\n              },\n              \"enable\": true,\n              \"hide\": true,\n              \"iconColor\": \"rgba(0, 211, 255, 1)\",\n              \"name\": \"Annotations & Alerts\",\n              \"type\": \"dashboard\"\n            }\n          ]\n        },\n        \"editable\": true,\n        \"fiscalYearStartMonth\": 0,\n        \"graphTooltip\": 0,\n        \"links\": [],\n        \"panels\": [],\n        \"preload\": false,\n        \"refresh\": refreshValue,         // es. \"5s\"\n        \"schemaVersion\": 1,\n        \"tags\": [],\n        \"templating\": { \"list\": [] },\n        \"time\": { \"from\": \"now-15m\", \"to\": \"now\" },\n        \"timepicker\": {},\n        \"timezone\": \"browser\",\n        \"title\": `IoT Sensors Dashboard - Field ${fieldId}`,\n        \"uid\": `iot-sensors-00${fieldId}`,  // uid univoco\n        \"version\": 31, // o 1, come preferisci\n        \"weekStart\": \"\"\n      },\n      \"folderUid\": \"SA-FMS\",\n      \"isFolder\": false,\n      \"overwrite\": true\n    };\n\n    // (1) Row \"Overview\"\n    baseDashboard.dashboard.panels.push(buildOverviewRow());\n    // (2) Text panel\n    baseDashboard.dashboard.panels.push(buildTextPanel(fieldId, sensors));\n    // (3) All Alerts row\n    const alertsPanels = buildAllAlertsRow(fieldId);\n    baseDashboard.dashboard.panels.push(...alertsPanels);\n\n    // Aggiunge i blocchi sensori *solo* se sensors.xxx = true\n    if (sensors.temperature) {\n        baseDashboard.dashboard.panels.push(...buildTemperaturePanels(fieldId, thresholds.temperature));\n    }\n    if (sensors.humidity) {\n      baseDashboard.dashboard.panels.push(...buildHumidityPanels(fieldId, thresholds.humidity));\n    }\n    if (sensors.soilMoisture) {\n      baseDashboard.dashboard.panels.push(...buildSoilMoisturePanels(fieldId, thresholds.soilMoisture));\n    }\n    if (sensors.ph) {\n      baseDashboard.dashboard.panels.push(...buildPhPanels(fieldId, thresholds.ph));\n    }\n    if (sensors.salinity) {\n      baseDashboard.dashboard.panels.push(...buildSalinityPanels(fieldId, thresholds.salinity));\n    }\n    if (sensors.rain) {\n      baseDashboard.dashboard.panels.push(...buildRainPanels(fieldId, thresholds.rain));\n    }\n\n    return baseDashboard;\n}\n\n/***************************************************************\n * FUNZIONE PRINCIPALE NODO\n ***************************************************************/\n//let input = msg.payload; \n\nlet conf = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\": 5000\n};\n\nlet input = global.get(\"simulationConfiguration\") || conf;\n\nlet thresholds = {\n    \"soilMoisture\": {\n        \"min\": 20,\n        \"max\": 80\n    },\n    \"temperature\": {\n        \"min\": 0,\n        \"max\": 35\n    },\n    \"ph\": {\n        \"min\": 5.5,\n        \"max\": 7.5\n    },\n    \"salinity\": {\n        \"min\": 200,\n        \"max\": 1500\n    },\n    \"humidity\": {\n        \"min\": 50,\n        \"max\": 90\n    },\n    \"rain\": {\n        \"max\": 40\n    }\n};\n\nconst thresholdConfig = global.get(\"sensorsThreshold\") || thresholds;\n\n// Converte interval (ms) in stringa \"Xs\"\nlet refreshStr = convertIntervalToRefresh(input.interval);\n\n// Crea un array di dashboards\nlet dashboards = [];\n\nfor (let f of input.fields) {\n    let fieldId = f.fieldId;\n    let sensors = f.sensors;\n    // Crea una dashboard per questo field\n    let dash = buildDashboardForField(fieldId, sensors, refreshStr, thresholdConfig);\n    dashboards.push(dash);\n}\n\nmsg.payload = dashboards;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "7fea35aa2a7064ca",
                "dcd22410200503f2"
            ]
        ]
    },
    {
        "id": "7fea35aa2a7064ca",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 180,
        "wires": []
    },
    {
        "id": "69cf5018365ddd24",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 240,
        "wires": []
    },
    {
        "id": "4e5b902ccda129bf",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Delete folder - dashboard - alert rules",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/folders/SA-FMS?forceDeleteRules=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "9db46381144a9ef5",
                "1623c60b1ab10d57"
            ]
        ]
    },
    {
        "id": "2f7225cc61592538",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create the folder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/folders",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "df588b6dcceaef85",
                "d75d7b4839b9141f"
            ]
        ]
    },
    {
        "id": "df588b6dcceaef85",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 240,
        "wires": []
    },
    {
        "id": "39c9855ab18c75ca",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Set configuration in context",
        "func": "msg.payload = global.get(\"simulationConfiguration\") || msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "4e5b902ccda129bf"
            ]
        ]
    },
    {
        "id": "9db46381144a9ef5",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Create the folder",
        "func": "let folder = {\n    \"description\": \"Smart Agriculture - Field Monitoring System title\",\n    \"title\": \"Smart Agriculture - Field Monitoring System\",\n    \"uid\": \"SA-FMS\"\n}\n\nmsg.payload = folder;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 320,
        "wires": [
            [
                "2f7225cc61592538"
            ]
        ]
    },
    {
        "id": "dd51c9cbc1a93eb3",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "4e5b902ccda129bf"
        ],
        "uncaught": false,
        "x": 550,
        "y": 240,
        "wires": [
            [
                "6992a10864d7ace0"
            ]
        ]
    },
    {
        "id": "6992a10864d7ace0",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 240,
        "wires": [
            [
                "4e5b902ccda129bf"
            ]
        ]
    },
    {
        "id": "9228b0b8979e0e2a",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "2f7225cc61592538"
        ],
        "uncaught": false,
        "x": 1210,
        "y": 440,
        "wires": [
            [
                "01c0266334955a32"
            ]
        ]
    },
    {
        "id": "01c0266334955a32",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 400,
        "wires": [
            [
                "2f7225cc61592538"
            ]
        ]
    },
    {
        "id": "26587e674b577a79",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 1450,
        "y": 480,
        "wires": [
            [
                "70a9d76a68c274ab"
            ]
        ]
    },
    {
        "id": "70a9d76a68c274ab",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1600,
        "y": 480,
        "wires": [
            [
                "7ef98ba80c4027f0"
            ]
        ]
    },
    {
        "id": "3d0dc3eb211fd4e8",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate Grafana Dashboards",
        "func": "/*********************************************************************\n * Node-RED Function:\n * Genera array di dashboard Grafana con soglie, layout, orientamenti\n * e dettagli esattamente come nel JSON di esempio fornito.\n *\n * msg.payload deve contenere:\n * {\n *   \"fields\": [\n *      {\n *        \"fieldId\": 1,\n *        \"sensors\": {\n *          \"soilMoisture\": true,\n *          \"temperature\": true,\n *          \"ph\": true,\n *          \"salinity\": true,\n *          \"humidity\": true,\n *          \"rain\": true\n *        }\n *      },\n *      ...\n *   ],\n *   \"interval\": 5000\n * }\n ********************************************************************/\n\n// Converte interval da ms a \"Xs\"\nfunction convertIntervalToRefresh(intervalMs) {\n    const seconds = Math.floor(intervalMs / 1000);\n    return seconds + \"s\"; // Esempio: 5000 ms -> \"5s\"\n}\n\n// Costruisce il pannello \"Overview\" (row)\nfunction buildOverviewRow() {\n    return {\n        \"type\": \"row\",\n        \"title\": \"Overview\",\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 },\n        \"id\": 999,\n        \"panels\": []\n    };\n}\n\n// Costruisce il pannello testuale di introduzione, riferito a \"Field X\"\nfunction buildTextPanel(fieldId, sensors) {\n  // Mappa dei sensori con i loro nomi descrittivi\n  const sensorDescriptions = {\n    soilMoisture: \"Soil Moisture Sensor: Measures soil water content to determine irrigation needs.\",\n    temperature: \"Temperature Sensor: Monitors ambient temperature to assess climate conditions.\",\n    ph: \"Soil pH Sensor: Measures soil acidity/alkalinity to ensure compatibility with crops.\",\n    salinity: \"Water Salinity Sensor: Monitors water salinity levels to ensure optimal irrigation quality.\",\n    humidity: \"Relative Humidity Sensor: Measures air humidity to monitor atmospheric conditions.\",\n    rain: \"Rain Detection Sensor: Detects the presence and intensity of rain to adjust irrigation schedules.\"\n  };\n\n  // Filtra i sensori con valore true\n  const activeSensors = Object.entries(sensors)\n    .filter(([key, value]) => value)\n    .map(([key]) => `- **${sensorDescriptions[key]}**`)\n    .join(\"\\n\");\n\n  return {\n    \"type\": \"text\",\n    \"title\": \"Dashboard Introduction\",\n    \"id\": 1000,\n    \"gridPos\": {\n      \"h\": 12,\n      \"w\": 24,\n      \"x\": 0,\n      \"y\": 1\n    },\n    \"options\": {\n      \"mode\": \"markdown\",\n      \"content\": `## IoT Sensors Dashboard - Field ${fieldId}\n\nWelcome to the **Field ${fieldId}** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\n\n### Overview\nThis dashboard provides real-time monitoring of data from **Field ${fieldId}**, with each row dedicated to a specific sensor.\nUsing data collected from simulated IoT sensors, the system helps identify critical conditions and optimize agricultural resource management.\n\n### Monitored Sensors\n${activeSensors || \"No sensors are currently being monitored.\"}\n\n### Alerts\nUse the **All Alerts** section to check for any anomalies or sensors exceeding desired thresholds.`\n    }\n  };\n}\n\n\n// Costruisce la row \"All Alerts\" + pannello \"All Active Alerts\"\nfunction buildAllAlertsRow(fieldId) {\n    return [\n        {\n            \"type\": \"row\",\n            \"title\": \"All Alerts\",\n            \"collapsed\": false,\n            \"gridPos\": {\n                \"h\": 1,\n                \"w\": 24,\n                \"x\": 0,\n                \"y\": 5\n            },\n            \"id\": 1,\n            \"panels\": []\n        },\n        {\n            \"fieldConfig\": { \"defaults\": {}, \"overrides\": [] },\n            \"gridPos\": {\n                \"h\": 10,\n                \"w\": 24,\n                \"x\": 0,\n                \"y\": 6\n            },\n            \"id\": 2,\n            \"options\": {\n                \"alertInstanceLabelFilter\": \"\",\n                \"alertName\": `Field ${fieldId}`,\n                \"dashboardAlerts\": true,\n                \"folder\": \"\",\n                \"groupBy\": [ \"sensor_type\" ],\n                \"groupMode\": \"custom\",\n                \"maxItems\": 50,\n                \"sortOrder\": 4,\n                \"stateFilter\": {\n                    \"error\": true,\n                    \"firing\": true,\n                    \"noData\": true,\n                    \"normal\": false,\n                    \"pending\": true\n                },\n                \"viewMode\": \"list\"\n            },\n            \"pluginVersion\": \"11.3.1\",\n            \"title\": \"All Active Alerts\",\n            \"type\": \"alertlist\"\n        }\n    ];\n}\n\n// ---------- TEMPERATURE -----------\nfunction buildTemperaturePanels(fieldId, thresholds) {\n    // Row \"Temperature\" + Barchart + Gauge\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 16 },\n        \"id\": 20,\n        \"panels\": [],\n        \"title\": \"Temperature\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": true,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"mappings\": [],\n            \"max\": 45,\n            \"min\": -15,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [             \n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"celsius\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 11, \"w\": 16, \"x\": 0, \"y\": 17 },\n        \"id\": 21,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 0.97,\n          \"colorByField\": `value {field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"}`,\n          \"fullHighlight\": true,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"normal\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Temperature\",\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 45,\n            \"min\": -15,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"celsius\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 11, \"w\": 8, \"x\": 16, \"y\": 17 },\n        \"id\": 22,\n        \"options\": {\n          \"minVizHeight\": 75,\n          \"minVizWidth\": 75,\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": `/^value \\\\{field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"\\\\}$/`,\n            \"values\": false\n          },\n          \"showThresholdLabels\": false,\n          \"showThresholdMarkers\": true,\n          \"sizing\": \"auto\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Temperature Gauge\",\n        \"type\": \"gauge\"\n      }\n    ];\n}\n\n// ---------- HUMIDITY -----------\nfunction buildHumidityPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 28 },\n        \"id\": 50,\n        \"panels\": [],\n        \"title\": \"Humidity\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": {\n              \"mode\": \"thresholds\",\n              \"seriesBy\": \"last\"\n            },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisGridShow\": true,\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"barAlignment\": 0,\n              \"barWidthFactor\": 0.6,\n              \"drawStyle\": \"line\",\n              \"fillOpacity\": 0,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineInterpolation\": \"linear\",\n              \"lineWidth\": 1,\n              \"pointSize\": 5,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"showPoints\": \"auto\",\n              \"spanNulls\": false,\n              \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n              \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n            },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\",    \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min   },\n                { \"color\": \"red\", \"value\": thresholds.max   }\n              ]\n            }\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 29 },\n        \"id\": 51,\n        \"options\": {\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Humidity\",\n        \"type\": \"timeseries\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 29 },\n        \"id\": 52,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Humidity`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n// ---------- SOIL MOISTURE -----------\nfunction buildSoilMoisturePanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 },\n        \"id\": 10,\n        \"panels\": [],\n        \"title\": \"Soil Moisture\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\",    \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min   },\n                { \"color\": \"red\", \"value\": thresholds.max   }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 38 },\n        \"id\": 11,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 1,\n          \"fullHighlight\": false,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"none\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil Moisture`,\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 100,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": null },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"percent\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 38 },\n        \"id\": 12,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil Moisture`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n// ---------- pH -----------\nfunction buildPhPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 46 },\n        \"id\": 30,\n        \"panels\": [],\n        \"title\": \"Soil pH\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"barAlignment\": 0,\n              \"barWidthFactor\": 0.6,\n              \"drawStyle\": \"line\",\n              \"fillOpacity\": 0,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineInterpolation\": \"linear\",\n              \"lineWidth\": 1,\n              \"pointSize\": 5,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"showPoints\": \"auto\",\n              \"spanNulls\": false,\n              \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n              \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n            },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max  }\n              ]\n            },\n            \"unit\": \"pH\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 47 },\n        \"id\": 32,\n        \"options\": {\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Soil pH\",\n        \"type\": \"timeseries\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"max\": 14,\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"none\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 47 },\n        \"id\": 31,\n        \"options\": {\n          \"minVizHeight\": 75,\n          \"minVizWidth\": 75,\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showThresholdLabels\": false,\n          \"showThresholdMarkers\": true,\n          \"sizing\": \"auto\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Soil pH`,\n        \"type\": \"gauge\"\n      }\n    ];\n}\n\n// ---------- SALINITY -----------\nfunction buildSalinityPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 55 },\n        \"id\": 40,\n        \"panels\": [],\n        \"title\": \"Water Salinity\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 80,\n              \"gradientMode\": \"none\",\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"lineWidth\": 1,\n              \"scaleDistribution\": { \"type\": \"linear\" },\n              \"thresholdsStyle\": { \"mode\": \"off\" }\n            },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"μS/cm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 56 },\n        \"id\": 42,\n        \"options\": {\n          \"barRadius\": 0,\n          \"barWidth\": 0.97,\n          \"fullHighlight\": false,\n          \"groupWidth\": 0.7,\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"orientation\": \"auto\",\n          \"showValue\": \"auto\",\n          \"stacking\": \"none\",\n          \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n          \"xTickLabelRotation\": 45,\n          \"xTickLabelSpacing\": -100\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Water Salinity`,\n        \"type\": \"barchart\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"fieldMinMax\": true,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\" },\n                { \"color\": \"green\", \"value\": thresholds.min },\n                { \"color\": \"red\", \"value\": thresholds.max }\n              ]\n            },\n            \"unit\": \"μS/cm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 56 },\n        \"id\": 41,\n        \"options\": {\n          \"displayMode\": \"gradient\",\n          \"legend\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": false\n          },\n          \"maxVizHeight\": 300,\n          \"minVizHeight\": 16,\n          \"minVizWidth\": 8,\n          \"namePlacement\": \"auto\",\n          \"orientation\": \"auto\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showUnfilled\": false,\n          \"sizing\": \"auto\",\n          \"valueMode\": \"color\"\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Water Salinity\",\n        \"type\": \"bargauge\"\n      }\n    ];\n}\n\n// ---------- RAIN -----------\nfunction buildRainPanels(fieldId, thresholds) {\n    return [\n      {\n        \"collapsed\": false,\n        \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 64 },\n        \"id\": 60,\n        \"panels\": [],\n        \"title\": \"Rain Detection\",\n        \"type\": \"row\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"custom\": {\n              \"fillOpacity\": 70,\n              \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n              \"insertNulls\": false,\n              \"lineWidth\": 0,\n              \"spanNulls\": false\n            },\n            \"displayName\": \".\",\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"min\": 0,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\" },\n                { \"color\": \"blue\",   \"value\": 1 },\n                { \"color\": \"red\", \"value\": thresholds .max}\n              ]\n            },\n            \"unit\": \"lengthmm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 65 },\n        \"id\": 62,\n        \"options\": {\n          \"alignValue\": \"left\",\n          \"legend\": {\n            \"displayMode\": \"list\",\n            \"placement\": \"right\",\n            \"showLegend\": true\n          },\n          \"mergeValues\": false,\n          \"rowHeight\": 0.9,\n          \"showValue\": \"auto\",\n          \"tooltip\": { \"mode\": \"multi\", \"sort\": \"none\" }\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": \"Rain Detection State\",\n        \"type\": \"state-timeline\"\n      },\n      {\n        \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"color\": { \"mode\": \"thresholds\" },\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\" },\n                { \"color\": \"red\", \"value\": thresholds .max}\n              ]\n            },\n            \"unit\": \"mm\"\n          },\n          \"overrides\": []\n        },\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 65 },\n        \"id\": 61,\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"justifyMode\": \"auto\",\n          \"orientation\": \"auto\",\n          \"percentChangeColorMode\": \"standard\",\n          \"reduceOptions\": {\n            \"calcs\": [ \"lastNotNull\" ],\n            \"fields\": \"\",\n            \"values\": false\n          },\n          \"showPercentChange\": false,\n          \"textMode\": \"auto\",\n          \"wideLayout\": true\n        },\n        \"pluginVersion\": \"11.3.1\",\n        \"targets\": [\n          {\n            \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n            \"refId\": \"A\"\n          }\n        ],\n        \"title\": `Rain Detection`,\n        \"type\": \"stat\"\n      }\n    ];\n}\n\n/***************************************************************\n * buildDashboardForField\n * Costruisce la singola dashboard (JSON) per il field specifico,\n * con i pannelli corrispondenti solo ai sensori \"true\".\n ***************************************************************/\nfunction buildDashboardForField(fieldId, sensors, refreshValue, thresholds) {\n    // Struttura base\n    let baseDashboard = {\n      \"dashboard\": {\n        \"annotations\": {\n          \"list\": [\n            {\n              \"builtIn\": 1,\n              \"datasource\": {\n                \"type\": \"grafana\",\n                \"uid\": \"-- Grafana --\"\n              },\n              \"enable\": true,\n              \"hide\": true,\n              \"iconColor\": \"rgba(0, 211, 255, 1)\",\n              \"name\": \"Annotations & Alerts\",\n              \"type\": \"dashboard\"\n            }\n          ]\n        },\n        \"editable\": true,\n        \"fiscalYearStartMonth\": 0,\n        \"graphTooltip\": 0,\n        \"links\": [],\n        \"panels\": [],\n        \"preload\": false,\n        \"refresh\": refreshValue,         // es. \"5s\"\n        \"schemaVersion\": 1,\n        \"tags\": [],\n        \"templating\": { \"list\": [] },\n        \"time\": { \"from\": \"now-15m\", \"to\": \"now\" },\n        \"timepicker\": {},\n        \"timezone\": \"browser\",\n        \"title\": `IoT Sensors Dashboard - Field ${fieldId}`,\n        \"uid\": `iot-sensors-00${fieldId}`,  // uid univoco\n        \"version\": 31, // o 1, come preferisci\n        \"weekStart\": \"\"\n      },\n      \"folderUid\": \"SA-FMS\",\n      \"isFolder\": false,\n      \"overwrite\": true\n    };\n\n    // (1) Row \"Overview\"\n    baseDashboard.dashboard.panels.push(buildOverviewRow());\n    // (2) Text panel\n    baseDashboard.dashboard.panels.push(buildTextPanel(fieldId, sensors));\n    // (3) All Alerts row\n    const alertsPanels = buildAllAlertsRow(fieldId);\n    baseDashboard.dashboard.panels.push(...alertsPanels);\n\n    // Aggiunge i blocchi sensori *solo* se sensors.xxx = true\n    if (sensors.temperature) {\n        baseDashboard.dashboard.panels.push(...buildTemperaturePanels(fieldId, thresholds.temperature));\n    }\n    if (sensors.humidity) {\n      baseDashboard.dashboard.panels.push(...buildHumidityPanels(fieldId, thresholds.humidity));\n    }\n    if (sensors.soilMoisture) {\n      baseDashboard.dashboard.panels.push(...buildSoilMoisturePanels(fieldId, thresholds.soilMoisture));\n    }\n    if (sensors.ph) {\n      baseDashboard.dashboard.panels.push(...buildPhPanels(fieldId, thresholds.ph));\n    }\n    if (sensors.salinity) {\n      baseDashboard.dashboard.panels.push(...buildSalinityPanels(fieldId, thresholds.salinity));\n    }\n    if (sensors.rain) {\n      baseDashboard.dashboard.panels.push(...buildRainPanels(fieldId, thresholds.rain));\n    }\n\n    return baseDashboard;\n}\n\n/***************************************************************\n * FUNZIONE PRINCIPALE NODO\n ***************************************************************/\n//let input = msg.payload; \nlet input = global.get(\"simulationConfiguration\");\n\nlet thresholdConfig = {\n    \"soilMoisture\": {\n        \"min\": 20,\n        \"max\": 80\n    },\n    \"temperature\": {\n        \"min\": 0,\n        \"max\": 35\n    },\n    \"ph\": {\n        \"min\": 5.5,\n        \"max\": 7.5\n    },\n    \"salinity\": {\n        \"min\": 200,\n        \"max\": 1500\n    },\n    \"humidity\": {\n        \"min\": 50,\n        \"max\": 90\n    },\n    \"rain\": {\n        \"max\": 40\n    }\n};\n\n\nconst thresholds = global.get(\"sensorsThreshold\") || thresholdConfig;\n\n// let thresholds = msg.payload;\n\n// Converte interval (ms) in stringa \"Xs\"\nlet refreshStr = convertIntervalToRefresh(input.interval);\n\n// Crea un array di dashboards\nlet dashboards = [];\n\nfor (let f of input.fields) {\n    let fieldId = f.fieldId;\n    let sensors = f.sensors;\n    // Crea una dashboard per questo field\n    let dash = buildDashboardForField(fieldId, sensors, refreshStr, thresholds);\n    dashboards.push(dash);\n}\n\nmsg.payload = dashboards;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 640,
        "wires": [
            [
                "c9f827ec7f9c9699"
            ]
        ]
    },
    {
        "id": "c9f827ec7f9c9699",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1050,
        "y": 640,
        "wires": [
            [
                "91bcc38c80548ccb"
            ]
        ]
    },
    {
        "id": "91bcc38c80548ccb",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Update dashboards with thresholds",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/dashboards/db",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "2ebe6b6d45371371"
            ]
        ]
    },
    {
        "id": "2ebe6b6d45371371",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 640,
        "wires": []
    },
    {
        "id": "eb4ac7b5353e9dc9",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 3010,
        "y": 320,
        "wires": [
            [
                "b1364737e97e97b0"
            ]
        ]
    },
    {
        "id": "b1364737e97e97b0",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create Alert Rules",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/alert-rules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 3190,
        "y": 320,
        "wires": [
            [
                "8b9671f00df0cbc0"
            ]
        ]
    },
    {
        "id": "772d21da4d18faaa",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate Grafana Alerts",
        "func": "/**\n * Questo nodo Function crea dinamicamente gli alert in base\n * al global configuration.fields e ai template di esempio\n * forniti. Restituisce un array di JSON in msg.payload.\n */\n\nlet conf = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\": 5000\n};\n\nconst config = global.get(\"simulationConfiguration\") || conf;\n\n// ----- TEMPLATES DEI SENSORI (basati sull'esempio per field1) -----\nconst templates = {\n\n    humidity: `{\n        \"uid\":\"humidity-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Humidity Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"humidity\\\\\")\\\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\\\n  |> yield(name: \\\\\"mean\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    50,\n                                    90\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    50,\n                                    90\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"18\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`,\n\n    temperature: `{\n        \"uid\":\"temperature-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Temperature Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"temperature\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    0,\n                                    35\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    0,\n                                    35\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"15\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`,\n\n    soilMoisture: `{\n        \"uid\":\"soilMoisture-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Soil Moisture Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"soilMoisture\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    20,\n                                    80\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    20,\n                                    80\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"111\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`,\n\n    ph: `{\n        \"uid\":\"ph-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Soil pH Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"ph\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    5.5,\n                                    7.5\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    5.5,\n                                    7.5\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"114\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`,\n\n    salinity: `{\n        \"uid\":\"salinity-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Water Salinity Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"salinity\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    200,\n                                    1500\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"117\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`,\n\n    rain: `{\n        \"uid\":\"rain-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Rain Detection State Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"rain\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    40\n                                ],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    40\n                                ],\n                                \"type\": \"lt\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"120\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\",\n            \"group_interval\": \"10s\",\n            \"group_wait\": \"0s\"\n        },\n        \"record\": null\n    }`\n};\n\n// ----- FUNZIONE DI UTILITÀ PER FARE LE SOSTITUZIONI -----\nfunction replaceFieldReferences(templateStr, fieldId) {\n    // Sostituzioni necessarie:\n    // - \"field1\" -> \"field<fieldId>\"\n    // - \"Field 1\" -> \"Field <fieldId>\"\n    // - \"\\\"Field\\\": \\\"1\\\"\" -> \"\\\"Field\\\": \\\"<fieldId>\\\"\"\n\n    let out = templateStr;\n\n    // Attenzione all'ordine delle sostituzioni.\n    // 1) Sostituisco \"field1\" con \"fieldX\"\n    out = out.replaceAll(\"field1\", \"field\" + fieldId);\n\n    // 2) Sostituisco \"Field 1\" con \"Field X\"\n    out = out.replaceAll(\"Field 1\", \"Field \" + fieldId);\n\n    // 3) Sostituisco \"Field\": \"1\" con \"Field\": \"X\"\n    out = out.replaceAll(\"\\\"Field\\\": \\\"1\\\"\", `\"Field\": \"${fieldId}\"`);\n\n    // 2) Sostituisco \"Field 1\" con \"Field X\"\n    out = out.replaceAll(\"iot-sensors-001\", \"iot-sensors-00\" + fieldId);\n\n    return out;\n}\n\n// ----- CREAZIONE DEGLI ALERT IN BASE ALLA CONFIGURAZIONE -----\nlet alerts = [];\n\nif (config && config.fields && Array.isArray(config.fields)) {\n    for (let f of config.fields) {\n        let fid = f.fieldId;         // es. 1, 2, 3, ...\n        let sensors = f.sensors;     // oggetto con booleans per i sensori\n\n        // Per ogni sensore nel template, se risulta true in config, duplico e modifico il template\n        for (let sensorKey in sensors) {\n            if (sensors[sensorKey] === true) {\n                // Prendo il template corrispondente\n                let sensorTemplate = templates[sensorKey];\n                if (sensorTemplate) {\n                    // Faccio la sostituzione\n                    let replaced = replaceFieldReferences(sensorTemplate, fid);\n\n                    // Converto in JSON\n                    let alertObj = JSON.parse(replaced);\n\n                    // Aggiungo all'array finale\n                    alerts.push(alertObj);\n                }\n            }\n        }\n    }\n}\n\n// Metto l'array di alert in msg.payload\nlet thresholds = {\n    \"soilMoisture\": {\n        \"min\": 20,\n        \"max\": 80\n    },\n    \"temperature\": {\n        \"min\": 0,\n        \"max\": 35\n    },\n    \"ph\": {\n        \"min\": 5.5,\n        \"max\": 7.5\n    },\n    \"salinity\": {\n        \"min\": 200,\n        \"max\": 1500\n    },\n    \"humidity\": {\n        \"min\": 50,\n        \"max\": 90\n    },\n    \"rain\": {\n        \"max\": 40\n    }\n};\n\n\nconst thresholdConfig = global.get(\"sensorsThreshold\") || thresholds;\n\nfor (let i = 0; i < alerts.length; i++) {\n    let alert = alerts[i];\n\n    const uid = alert?.uid;\n    if (!uid) {\n\n        continue;\n    }\n\n\n    const parts = uid.split(\"-\");\n    if (parts.length < 2) {\n\n        continue;\n    }\n    const sensorType = parts[0];\n\n    const sensorThreshold = thresholdConfig[sensorType];\n    if (!sensorThreshold) {\n        continue;\n    }\n\n    let cData = alert.data.find(d => d.refId === \"C\");\n    if (!cData || !cData.model || !cData.model.conditions || !cData.model.conditions[0]) {\n\n        continue;\n    }\n\n    let condition = cData.model.conditions[0];\n    let evaluator = condition.evaluator;\n    let unloadEval = condition.unloadEvaluator;\n\n\n    if (sensorThreshold.min !== undefined && sensorThreshold.max !== undefined) {\n\n        evaluator.params = [sensorThreshold.min, sensorThreshold.max];\n        if (unloadEval) {\n            unloadEval.params = [sensorThreshold.min, sensorThreshold.max];\n        }\n    } else if (sensorThreshold.max !== undefined) {\n\n        evaluator.params = [sensorThreshold.max];\n        if (unloadEval) {\n            unloadEval.params = [sensorThreshold.max];\n        }\n    }\n\n}\n\n// Ritorno l'array modificato in msg.payload\nmsg.payload = alerts;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 320,
        "wires": [
            [
                "eb4ac7b5353e9dc9"
            ]
        ]
    },
    {
        "id": "8b9671f00df0cbc0",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 320,
        "wires": []
    },
    {
        "id": "1623c60b1ab10d57",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "2892453dd410c056",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "b1364737e97e97b0"
        ],
        "uncaught": false,
        "x": 2850,
        "y": 240,
        "wires": [
            [
                "688b64abe9fd6605"
            ]
        ]
    },
    {
        "id": "688b64abe9fd6605",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3000,
        "y": 240,
        "wires": [
            [
                "b1364737e97e97b0"
            ]
        ]
    },
    {
        "id": "cabd7890069995ab",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get all alert rules",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/alert-rules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 790,
        "y": 800,
        "wires": [
            [
                "b4979f765cfd8d70",
                "0976381fb5388bfa"
            ]
        ]
    },
    {
        "id": "b4979f765cfd8d70",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "775f2724880959ab",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "Update visual thresholds and alert rules",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 720,
        "wires": [
            [
                "cabd7890069995ab",
                "3d0dc3eb211fd4e8"
            ]
        ]
    },
    {
        "id": "484e91757ae364ea",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Delete old alert rules",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1400,
        "y": 800,
        "wires": [
            [
                "c59913741f3dcc4c",
                "4aec81162edebe61"
            ]
        ]
    },
    {
        "id": "0976381fb5388bfa",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate delete urls",
        "func": "let alertRules = msg.payload;\n\nlet uids = alertRules.map(rule => rule.uid);\n\n// msg.payload = uids;\n// return msg;\n\n\n// Genera l'array di URL basato sugli UID\nlet urls = alertRules.map(rule => {\n    return `http://grafana-SA-FMS:3000/api/v1/provisioning/alert-rules/${rule.uid}`;\n});\n\n// Imposta l'array di URL nel payload\nmsg.url = urls;\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 800,
        "wires": [
            [
                "fb3acb2b7f8e6f36"
            ]
        ]
    },
    {
        "id": "fb3acb2b7f8e6f36",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "url",
        "x": 1210,
        "y": 800,
        "wires": [
            [
                "484e91757ae364ea",
                "7d4bef9d5480e923"
            ]
        ]
    },
    {
        "id": "c59913741f3dcc4c",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 740,
        "wires": []
    },
    {
        "id": "7d4bef9d5480e923",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 740,
        "wires": []
    },
    {
        "id": "de7bba58ec876976",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2090,
        "y": 800,
        "wires": [
            [
                "1e0d39f4d44b1df5"
            ]
        ]
    },
    {
        "id": "1e0d39f4d44b1df5",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create Alert Rules",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/alert-rules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 2270,
        "y": 800,
        "wires": [
            [
                "efcc2d7dced58e41"
            ]
        ]
    },
    {
        "id": "6bdac6621fa59e9c",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate Grafana Alerts",
        "func": "/**\n * Questo nodo Function crea dinamicamente gli alert in base\n * al global configuration.fields e ai template di esempio\n * forniti. Restituisce un array di JSON in msg.payload.\n */\n \n// Recupero la configurazione globale\nconst config = global.get(\"simulationConfiguration\");\n\n// ----- TEMPLATES DEI SENSORI (basati sull'esempio per field1) -----\nconst templates = {\n\n    humidity: `{\n        \"uid\":\"humidity-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Humidity Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"humidity\\\\\")\\\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\\\n  |> yield(name: \\\\\"mean\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    50,\n                                    90\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    50,\n                                    90\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"18\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`,\n\n    temperature: `{\n        \"uid\":\"temperature-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Temperature Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"temperature\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    0,\n                                    35\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    0,\n                                    35\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"15\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`,\n\n    soilMoisture: `{\n        \"uid\":\"soilMoisture-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Soil Moisture Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"soilMoisture\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    20,\n                                    80\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    20,\n                                    80\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"111\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`,\n\n    ph: `{\n        \"uid\":\"ph-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Soil pH Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"ph\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    5.5,\n                                    7.5\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    5.5,\n                                    7.5\n                                ],\n                                \"type\": \"within_range\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"114\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`,\n\n    salinity: `{\n        \"uid\":\"salinity-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Water Salinity Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"salinity\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    200,\n                                    1500\n                                ],\n                                \"type\": \"outside_range\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"117\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`,\n\n    rain: `{\n        \"uid\":\"rain-field1\",\n        \"orgID\": 1,\n        \"folderUID\": \"SA-FMS\",\n        \"ruleGroup\": \"10 seconds\",\n        \"title\": \"Rain Detection State Field 1\",\n        \"condition\": \"C\",\n        \"data\": [\n            {\n                \"refId\": \"A\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 900,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"fe9sepcaz6iv4a\",\n                \"model\": {\n                    \"datasource\": {\n                        \"type\": \"influxdb\",\n                        \"uid\": \"fe9sepcaz6iv4a\"\n                    },\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"query\": \"from(bucket: \\\\\"SA-FMS\\\\\")\\\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\\\n  |> filter(fn: (r) => r[\\\\\"_measurement\\\\\"] == \\\\\"smart_agriculture_measurements\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"field_id\\\\\"] == \\\\\"field1\\\\\")\\\\n  |> filter(fn: (r) => r[\\\\\"sensor_type\\\\\"] == \\\\\"rain\\\\\")\\\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\\\n  |> yield(name: \\\\\"last\\\\\")\",\n                    \"refId\": \"A\"\n                }\n            },\n            {\n                \"refId\": \"B\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"B\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"A\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"reducer\": \"last\",\n                    \"refId\": \"B\",\n                    \"type\": \"reduce\"\n                }\n            },\n            {\n                \"refId\": \"C\",\n                \"queryType\": \"\",\n                \"relativeTimeRange\": {\n                    \"from\": 0,\n                    \"to\": 0\n                },\n                \"datasourceUid\": \"__expr__\",\n                \"model\": {\n                    \"conditions\": [\n                        {\n                            \"evaluator\": {\n                                \"params\": [\n                                    40\n                                ],\n                                \"type\": \"gt\"\n                            },\n                            \"operator\": {\n                                \"type\": \"and\"\n                            },\n                            \"query\": {\n                                \"params\": [\n                                    \"C\"\n                                ]\n                            },\n                            \"reducer\": {\n                                \"params\": [],\n                                \"type\": \"last\"\n                            },\n                            \"type\": \"query\",\n                            \"unloadEvaluator\": {\n                                \"params\": [\n                                    40\n                                ],\n                                \"type\": \"lt\"\n                            }\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"__expr__\"\n                    },\n                    \"expression\": \"B\",\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"C\",\n                    \"type\": \"threshold\"\n                }\n            }\n        ],\n        \"updated\": \"2025-01-20T11:00:09Z\",\n        \"noDataState\": \"NoData\",\n        \"execErrState\": \"Error\",\n        \"for\": \"0s\",\n        \"annotations\": {\n            \"__dashboardUid__\": \"iot-sensors-001\",\n            \"__panelId__\": \"120\"\n        },\n        \"labels\": {\n            \"Field\": \"1\"\n        },\n        \"isPaused\": false,\n        \"notification_settings\": {\n            \"receiver\": \"default-email\"\n        },\n        \"record\": null\n    }`\n};\n\n// ----- FUNZIONE DI UTILITÀ PER FARE LE SOSTITUZIONI -----\nfunction replaceFieldReferences(templateStr, fieldId) {\n    // Sostituzioni necessarie:\n    // - \"field1\" -> \"field<fieldId>\"\n    // - \"Field 1\" -> \"Field <fieldId>\"\n    // - \"\\\"Field\\\": \\\"1\\\"\" -> \"\\\"Field\\\": \\\"<fieldId>\\\"\"\n\n    let out = templateStr;\n\n    // Attenzione all'ordine delle sostituzioni.\n    // 1) Sostituisco \"field1\" con \"fieldX\"\n    out = out.replaceAll(\"field1\", \"field\" + fieldId);\n\n    // 2) Sostituisco \"Field 1\" con \"Field X\"\n    out = out.replaceAll(\"Field 1\", \"Field \" + fieldId);\n\n    // 3) Sostituisco \"Field\": \"1\" con \"Field\": \"X\"\n    out = out.replaceAll(\"\\\"Field\\\": \\\"1\\\"\", `\"Field\": \"${fieldId}\"`);\n\n    // 2) Sostituisco \"Field 1\" con \"Field X\"\n    out = out.replaceAll(\"iot-sensors-001\", \"iot-sensors-00\" + fieldId);\n\n    return out;\n}\n\n// ----- CREAZIONE DEGLI ALERT IN BASE ALLA CONFIGURAZIONE -----\nlet alerts = [];\n\nif (config && config.fields && Array.isArray(config.fields)) {\n    for (let f of config.fields) {\n        let fid = f.fieldId;         // es. 1, 2, 3, ...\n        let sensors = f.sensors;     // oggetto con booleans per i sensori\n\n        // Per ogni sensore nel template, se risulta true in config, duplico e modifico il template\n        for (let sensorKey in sensors) {\n            if (sensors[sensorKey] === true) {\n                // Prendo il template corrispondente\n                let sensorTemplate = templates[sensorKey];\n                if (sensorTemplate) {\n                    // Faccio la sostituzione\n                    let replaced = replaceFieldReferences(sensorTemplate, fid);\n\n                    // Converto in JSON\n                    let alertObj = JSON.parse(replaced);\n\n                    // Aggiungo all'array finale\n                    alerts.push(alertObj);\n                }\n            }\n        }\n    }\n}\n\n// Metto l'array di alert in msg.payload\nlet thresholds = {\n    \"soilMoisture\": {\n        \"min\": 20,\n        \"max\": 80\n    },\n    \"temperature\": {\n        \"min\": 0,\n        \"max\": 35\n    },\n    \"ph\": {\n        \"min\": 5.5,\n        \"max\": 7.5\n    },\n    \"salinity\": {\n        \"min\": 200,\n        \"max\": 1500\n    },\n    \"humidity\": {\n        \"min\": 50,\n        \"max\": 90\n    },\n    \"rain\": {\n        \"max\": 40\n    }\n};\n\n\nconst thresholdConfig = global.get(\"sensorsThreshold\") || thresholds;\n\nfor (let i = 0; i < alerts.length; i++) {\n    let alert = alerts[i];\n\n    const uid = alert?.uid;\n    if (!uid) {\n\n        continue;\n    }\n\n\n    const parts = uid.split(\"-\");\n    if (parts.length < 2) {\n\n        continue;\n    }\n    const sensorType = parts[0];\n\n    const sensorThreshold = thresholdConfig[sensorType];\n    if (!sensorThreshold) {\n        continue;\n    }\n\n    let cData = alert.data.find(d => d.refId === \"C\");\n    if (!cData || !cData.model || !cData.model.conditions || !cData.model.conditions[0]) {\n\n        continue;\n    }\n\n    let condition = cData.model.conditions[0];\n    let evaluator = condition.evaluator;\n    let unloadEval = condition.unloadEvaluator; \n\n\n    if (sensorThreshold.min !== undefined && sensorThreshold.max !== undefined) {\n\n        evaluator.params = [sensorThreshold.min, sensorThreshold.max];\n        if (unloadEval) {\n            unloadEval.params = [sensorThreshold.min, sensorThreshold.max];\n        }\n    } else if (sensorThreshold.max !== undefined) {\n\n        evaluator.params = [sensorThreshold.max];\n        if (unloadEval) {\n            unloadEval.params = [sensorThreshold.max];\n        }\n    }\n\n}\n\n// Ritorno l'array modificato in msg.payload\nmsg.payload = alerts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 800,
        "wires": [
            [
                "de7bba58ec876976"
            ]
        ]
    },
    {
        "id": "efcc2d7dced58e41",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 800,
        "wires": []
    },
    {
        "id": "c9be63e83e4fccab",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1320,
        "y": 1180,
        "wires": [
            [
                "d892e615bf4e3f69"
            ]
        ]
    },
    {
        "id": "83ea97f8f6d99d32",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 860,
        "wires": []
    },
    {
        "id": "976f1fb5b75ae53e",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1180,
        "wires": []
    },
    {
        "id": "4aec81162edebe61",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Count delete request",
        "func": "let defaultConfiguration = {\n   \"initialWeather\":\"CLOUDY\",\n   \"fields\":[\n      {\n         \"fieldId\":1,\n         \"sensors\":{\n            \"soilMoisture\":true,\n            \"temperature\":true,\n            \"ph\":true,\n            \"salinity\":true,\n            \"humidity\":true,\n            \"rain\":true\n         }\n      },\n      {\n         \"fieldId\":2,\n         \"sensors\":{\n            \"soilMoisture\":true,\n            \"temperature\":true,\n            \"ph\":false,\n            \"salinity\":false,\n            \"humidity\":true,\n            \"rain\":false\n         }\n      },\n      {\n         \"fieldId\":3,\n         \"sensors\":{\n            \"soilMoisture\":true,\n            \"temperature\":true,\n            \"ph\":true,\n            \"salinity\":true,\n            \"humidity\":true,\n            \"rain\":true\n         }\n      }\n   ],\n   \"interval\":5000\n};\n\n// Recupera la configurazione globale\nlet configuration = global.get(\"simulationConfiguration\") || defaultConfiguration;\n\n// Calcola il numero totale di sensori attivi\nlet totalActiveSensors = 0;\n\nconfiguration.fields.forEach(field => {\n    Object.values(field.sensors).forEach(sensor => {\n        if (sensor === true) {\n            totalActiveSensors += 1;\n        }\n    });\n});\n\n// Mantieni un contatore nel contesto\nlet count = context.get('count') || 0;\ncount += 1;\n\n// Controlla se il numero di messaggi ricevuti è uguale al numero di sensori attivi\nif (count >= totalActiveSensors) {\n    context.set('count', 0); // Reset del contatore\n    return { payload: \"Threshold reached!\" }; // Invia il messaggio\n} else {\n    context.set('count', count); // Aggiorna il contatore\n    return null; // Non inviare nulla\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 800,
        "wires": [
            [
                "6bdac6621fa59e9c",
                "83ea97f8f6d99d32"
            ]
        ]
    },
    {
        "id": "3e2dc0f0113f8a5b",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Count create request and generate email contact point",
        "func": "msg.payload = {\n    \"uid\": \"default-contact-point\",\n    \"name\": \"default-email\",\n    \"type\": \"email\",\n    \"settings\": {\n        \"addresses\": \"sdrefano.sdrefano@gmail.com\",\n        \"message\": `{{ define \"custom.message\" }}\n# 📊 Smart Agriculture - Field Monitoring System\n \n{{ if gt (len .Alerts.Firing) 0 }}\n## ⚠️ Firing Alerts\n{{ range .Alerts.Firing }}\n- **Alert**: {{ .Labels.alertname }}\n  - **Field**: {{ .Labels.Field }}\n  - **Value**: {{ .ValueString }}\n  - **Description**: {{ .Annotations.description }}\n  - [View in Grafana]({{ .GeneratorURL }})\n{{ end }}\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n## ✅ Resolved Alerts\n{{ range .Alerts.Resolved }}\n- **Alert**: {{ .Labels.alertname }}\n  - **Field**: {{ .Labels.Field }}\n  - **Value**: {{ .ValueString }}\n  - **Description**: {{ .Annotations.description }}\n  - [View in Grafana]({{ .GeneratorURL }})\n{{ end }}\n{{ end }}\n \n---\n*This notification was generated by Grafana.*\n{{ end }}\n{{custom.message}}\n`,\n        \"singleEmail\": false,\n        \"subject\": `{{ define \"custom.subject\" }}\n[{{ .Status | title }}] 📊 Smart Agriculture -\n{{ if gt (len .Alerts.Firing) 0 }} {{ len .Alerts.Firing }} Firing {{ end }}\n{{ if gt (len .Alerts.Resolved) 0 }} {{ len .Alerts.Resolved }} Resolved {{ end }}\n - {{ .CommonLabels.alertname }}\n{{ end }}`\n    },\n    \"disableResolveMessage\": false\n};\n\nlet defaultConfiguration = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\": 5000\n};\n\n// Recupera la configurazione globale\nlet configuration = global.get(\"simulationConfiguration\") || defaultConfiguration;\n\n// Conta il numero di campi\nlet totalFields = configuration.fields.length;\n\n// Mantieni un contatore nel contesto\nlet count = context.get('count') || 0;\ncount += 1;\n\n// Controlla se il numero di messaggi ricevuti è uguale al numero di campi\nif (count >= totalFields) {\n    context.set('count', 0); // Reset del contatore\n    return msg; // Invia il messaggio\n} else {\n    context.set('count', count); // Aggiorna il contatore\n    return null; // Non inviare nulla\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 320,
        "wires": [
            [
                "f729eef64092723a"
            ]
        ]
    },
    {
        "id": "d892e615bf4e3f69",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get all alert rules",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/contact-points",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1510,
        "y": 1180,
        "wires": [
            [
                "976f1fb5b75ae53e"
            ]
        ]
    },
    {
        "id": "d358d1a46a9900d1",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"uid\":\"default-contact-point\",\"name\":\"default-email\",\"type\":\"email\",\"settings\":{\"addresses\":\"sdrefano.sdrefano@gmail.com\",\"message\":\"{{ template \\\"default.message\\\" . }}\",\"singleEmail\":false,\"subject\":\"{{ template \\\"default.message\\\" . }}\"},\"disableResolveMessage\":false}",
        "payloadType": "json",
        "x": 1310,
        "y": 1280,
        "wires": [
            [
                "0949a29d66bb9d62"
            ]
        ]
    },
    {
        "id": "0949a29d66bb9d62",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get all alert rules",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/contact-points",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1510,
        "y": 1280,
        "wires": [
            [
                "752eb740b8e5ad6e"
            ]
        ]
    },
    {
        "id": "752eb740b8e5ad6e",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f729eef64092723a",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create default email contact point",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/contact-points",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 2520,
        "y": 320,
        "wires": [
            [
                "ae1509712136e9e9",
                "772d21da4d18faaa"
            ]
        ]
    },
    {
        "id": "ae1509712136e9e9",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 380,
        "wires": []
    },
    {
        "id": "35a4610707e6bb3f",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 2130,
        "y": 420,
        "wires": [
            [
                "c3c47677e7860708"
            ]
        ]
    },
    {
        "id": "c3c47677e7860708",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2280,
        "y": 420,
        "wires": [
            [
                "f729eef64092723a"
            ]
        ]
    },
    {
        "id": "28ff8ca0356b854f",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 470,
        "y": 880,
        "wires": [
            [
                "1b90e433b96d81ff"
            ]
        ]
    },
    {
        "id": "1b90e433b96d81ff",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 880,
        "wires": [
            [
                "cabd7890069995ab"
            ]
        ]
    },
    {
        "id": "6355aed8398f5fb9",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 1050,
        "y": 880,
        "wires": [
            [
                "0417336968298594"
            ]
        ]
    },
    {
        "id": "0417336968298594",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 880,
        "wires": [
            [
                "484e91757ae364ea"
            ]
        ]
    },
    {
        "id": "988d9f28d921185f",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 1930,
        "y": 900,
        "wires": [
            [
                "272cf52f6ead36e0"
            ]
        ]
    },
    {
        "id": "272cf52f6ead36e0",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2080,
        "y": 900,
        "wires": [
            [
                "1e0d39f4d44b1df5"
            ]
        ]
    },
    {
        "id": "8191e0905717c3b1",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "7ef98ba80c4027f0"
        ],
        "uncaught": false,
        "x": 890,
        "y": 540,
        "wires": [
            [
                "c24c906cfc61f8a3"
            ]
        ]
    },
    {
        "id": "c24c906cfc61f8a3",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 540,
        "wires": [
            [
                "91bcc38c80548ccb"
            ]
        ]
    },
    {
        "id": "dcdfb87912b8b6af",
        "type": "comment",
        "z": "974a61a99863234b",
        "name": "Inserire l'oggetto threshold in global context \\n altrimenti, per il momento, viene preso un oggetto default \\n programmatico nelle singole funzioni",
        "info": "Inserire l'oggetto threshold in global context altrimenti, per il momento, viene preso un oggetto default programmatico nelle singole funzioni",
        "x": 390,
        "y": 640,
        "wires": []
    },
    {
        "id": "6232cb6825d5da7e",
        "type": "comment",
        "z": "974a61a99863234b",
        "name": "Inserire l'oggetto configuration in global context \\n altrimenti, per il momento, viene preso un oggetto default \\n programmatico nelle singole funzioni \\n Al momento viene inserito in global \\n anche dal nodo funzione Set configuration in context\\n ",
        "info": "Inserire l'oggetto threshold in global context altrimenti, per il momento, viene preso un oggetto default programmatico nelle singole funzioni",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "919ff3023be6c4f7",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1050,
        "y": 1080,
        "wires": [
            [
                "875283611cb85b1f",
                "a741fac6b9bf910c"
            ]
        ]
    },
    {
        "id": "ab357d9941ae0548",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "Tests with 2 fields with all sensors",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"dashboard\":{\"annotations\":{\"list\":[{\"builtIn\":1,\"datasource\":{\"type\":\"grafana\",\"uid\":\"-- Grafana --\"},\"enable\":true,\"hide\":true,\"iconColor\":\"rgba(0, 211, 255, 1)\",\"name\":\"Annotations & Alerts\",\"type\":\"dashboard\"}]},\"editable\":true,\"fiscalYearStartMonth\":0,\"graphTooltip\":0,\"links\":[],\"panels\":[{\"type\":\"row\",\"title\":\"Overview\",\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":0},\"id\":999,\"panels\":[]},{\"type\":\"text\",\"title\":\"Dashboard Introduction\",\"id\":1000,\"gridPos\":{\"h\":12,\"w\":24,\"x\":0,\"y\":1},\"options\":{\"mode\":\"markdown\",\"content\":\"## IoT Sensors Dashboard - Field 1\\n\\nWelcome to the **Field 1** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\\n\\n### Overview\\nThis dashboard provides real-time monitoring of data from Field 1, with each row dedicated to a specific sensor.\\nUsing data collected from simulated IoT sensors, the system helps identify critical conditions and optimize agricultural resource management.\\n\\n### Monitored Sensors\\n1. **Soil Moisture Sensor**: Measures soil water content to determine irrigation needs.\\n2. **Temperature Sensor**: Monitors ambient temperature to assess climate conditions.\\n3. **Soil pH Sensor**: Measures soil acidity/alkalinity to ensure compatibility with crops.\\n4. **Water Salinity Sensor**: Monitors water salinity levels to ensure optimal irrigation quality.\\n5. **Relative Humidity Sensor**: Measures air humidity to monitor atmospheric conditions.\\n6. **Rain Detection Sensor**: Detects the presence and intensity of rain to adjust irrigation schedules.\\n\\n### Alerts\\nUse the **All Alerts** section to check for any anomalies or sensors exceeding desired thresholds.\"}},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":5},\"id\":1,\"panels\":[],\"title\":\"All Alerts\",\"type\":\"row\"},{\"fieldConfig\":{\"defaults\":{},\"overrides\":[]},\"gridPos\":{\"h\":10,\"w\":24,\"x\":0,\"y\":6},\"id\":2,\"options\":{\"alertInstanceLabelFilter\":\"\",\"alertName\":\"Field 1\",\"dashboardAlerts\":true,\"folder\":\"\",\"groupBy\":[\"sensor_type\"],\"groupMode\":\"custom\",\"maxItems\":50,\"sortOrder\":4,\"stateFilter\":{\"error\":true,\"firing\":true,\"noData\":true,\"normal\":false,\"pending\":true},\"viewMode\":\"list\"},\"pluginVersion\":\"11.3.1\",\"title\":\"All Active Alerts\",\"type\":\"alertlist\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":16},\"id\":20,\"panels\":[],\"title\":\"Temperature\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":true,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"orange\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"yellow\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":16,\"x\":0,\"y\":17},\"id\":21,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"colorByField\":\"value {field_id=\\\"field1\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field1/temperature\\\"}\",\"fullHighlight\":true,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"normal\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"#EAB839\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":8,\"x\":16,\"y\":17},\"id\":22,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"/^value \\\\{field_id=\\\"field1\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field1/temperature\\\"\\\\}$/\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature Gauge\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":28},\"id\":50,\"panels\":[],\"title\":\"Humidity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\",\"seriesBy\":\"last\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisGridShow\":true,\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":80},{\"color\":\"red\",\"value\":90}]}},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":29},\"id\":51,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\n  |> yield(name: \\\"mean\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"green\",\"value\":30},{\"color\":\"orange\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":29},\"id\":52,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity (Last) - field1\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":37},\"id\":10,\"panels\":[],\"title\":\"Soil Moisture\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":70},{\"color\":\"red\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":38},\"id\":11,\"options\":{\"barRadius\":0,\"barWidth\":1,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[\"lastNotNull\"],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (BarChart) - field1\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"red\",\"value\":70}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":38},\"id\":12,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (Last Value) - field1\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":46},\"id\":30,\"panels\":[],\"title\":\"pH\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"#EAB839\",\"value\":6},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8}]},\"unit\":\"pH\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":47},\"id\":32,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":14,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"yellow\",\"value\":5.5},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8.5}]},\"unit\":\"none\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":47},\"id\":31,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH (Gauge) - field1\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":55},\"id\":40,\"panels\":[],\"title\":\"Salinity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":500},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":56},\"id\":42,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity (BarChart) - field1\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":450},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":56},\"id\":41,\"options\":{\"displayMode\":\"gradient\",\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"maxVizHeight\":300,\"minVizHeight\":16,\"minVizWidth\":8,\"namePlacement\":\"auto\",\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showUnfilled\":false,\"sizing\":\"auto\",\"valueMode\":\"color\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity\",\"type\":\"bargauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":64},\"id\":60,\"panels\":[],\"title\":\"Rain\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"fillOpacity\":70,\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineWidth\":0,\"spanNulls\":false},\"displayName\":\".\",\"fieldMinMax\":false,\"mappings\":[],\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"blue\",\"value\":1},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"lengthmm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":65},\"id\":62,\"options\":{\"alignValue\":\"left\",\"legend\":{\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"mergeValues\":false,\"rowHeight\":0.9,\"showValue\":\"auto\",\"tooltip\":{\"mode\":\"multi\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain Detection (State)\",\"type\":\"state-timeline\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"mm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":65},\"id\":61,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field1\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain (Last Value) - field1\",\"type\":\"stat\"}],\"preload\":false,\"refresh\":\"5s\",\"schemaVersion\":1,\"tags\":[],\"templating\":{\"list\":[]},\"time\":{\"from\":\"now-15m\",\"to\":\"now\"},\"timepicker\":{},\"timezone\":\"browser\",\"title\":\"IoT Sensors Dashboard - Field 1\",\"uid\":\"iot-sensors-001\",\"version\":31,\"weekStart\":\"\"},\"folderUid\":\"ce9xc3gcolq80d\",\"isFolder\":false,\"overwrite\":true},{\"dashboard\":{\"annotations\":{\"list\":[{\"builtIn\":1,\"datasource\":{\"type\":\"grafana\",\"uid\":\"-- Grafana --\"},\"enable\":true,\"hide\":true,\"iconColor\":\"rgba(0, 211, 255, 1)\",\"name\":\"Annotations & Alerts\",\"type\":\"dashboard\"}]},\"editable\":true,\"fiscalYearStartMonth\":0,\"graphTooltip\":0,\"links\":[],\"panels\":[{\"type\":\"row\",\"title\":\"Overview\",\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":0},\"id\":999,\"panels\":[]},{\"type\":\"text\",\"title\":\"Dashboard Introduction\",\"id\":1000,\"gridPos\":{\"h\":12,\"w\":24,\"x\":0,\"y\":1},\"options\":{\"mode\":\"markdown\",\"content\":\"## IoT Sensors Dashboard - Field 2\\n\\nWelcome to the **Field 2** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\\n\\n### Overview\\nThis dashboard provides real-time insights into data from Field 2, with each row focused on a specific sensor. The system helps detect anomalies and supports sustainable agricultural productivity.\\n\\n### Monitored Sensors\\n1. **Soil Moisture Sensor**: Tracks soil water content to optimize irrigation.\\n2. **Temperature Sensor**: Monitors temperature to prevent plant heat stress.\\n3. **Soil pH Sensor**: Evaluates soil acidity or alkalinity for targeted adjustments.\\n4. **Water Salinity Sensor**: Checks water salinity to prevent crop damage.\\n5. **Relative Humidity Sensor**: Measures air humidity to optimize water resource usage.\\n6. **Rain Detection Sensor**: Identifies rain presence and intensity to reduce water consumption.\\n\\n### Alerts\\nUse the **All Alerts** section to view notifications about sensor anomalies and recommended actions.\"}},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":5},\"id\":1,\"panels\":[],\"title\":\"All Alerts\",\"type\":\"row\"},{\"fieldConfig\":{\"defaults\":{},\"overrides\":[]},\"gridPos\":{\"h\":10,\"w\":24,\"x\":0,\"y\":6},\"id\":2,\"options\":{\"alertInstanceLabelFilter\":\"\",\"alertName\":\"Field 2\",\"dashboardAlerts\":true,\"folder\":\"\",\"groupBy\":[\"sensor_type\"],\"groupMode\":\"custom\",\"maxItems\":50,\"sortOrder\":4,\"stateFilter\":{\"error\":true,\"firing\":true,\"noData\":true,\"normal\":false,\"pending\":true},\"viewMode\":\"list\"},\"pluginVersion\":\"11.3.1\",\"title\":\"All Active Alerts\",\"type\":\"alertlist\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":16},\"id\":20,\"panels\":[],\"title\":\"Temperature\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":true,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"orange\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"yellow\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":16,\"x\":0,\"y\":17},\"id\":21,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"colorByField\":\"value {field_id=\\\"field2\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field2/temperature\\\"}\",\"fullHighlight\":true,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"normal\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":45,\"min\":-15,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":10},{\"color\":\"green\",\"value\":15},{\"color\":\"#EAB839\",\"value\":30},{\"color\":\"red\",\"value\":35}]},\"unit\":\"celsius\"},\"overrides\":[]},\"gridPos\":{\"h\":11,\"w\":8,\"x\":16,\"y\":17},\"id\":22,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"/^value \\\\{field_id=\\\"field2\\\", sensor_type=\\\"temperature\\\", topic=\\\"agriculture/field2/temperature\\\"\\\\}$/\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"temperature\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Temperature Gauge\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":28},\"id\":50,\"panels\":[],\"title\":\"Humidity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\",\"seriesBy\":\"last\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisGridShow\":true,\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":80},{\"color\":\"red\",\"value\":90}]}},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":29},\"id\":51,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\\n  |> yield(name: \\\"mean\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"green\",\"value\":30},{\"color\":\"orange\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":29},\"id\":52,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"humidity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Humidity (Last) - field2\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":37},\"id\":10,\"panels\":[],\"title\":\"Soil Moisture\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"orange\",\"value\":70},{\"color\":\"red\",\"value\":80}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":38},\"id\":11,\"options\":{\"barRadius\":0,\"barWidth\":1,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[\"lastNotNull\"],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (BarChart) - field2\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":100,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\",\"value\":null},{\"color\":\"yellow\",\"value\":30},{\"color\":\"green\",\"value\":50},{\"color\":\"red\",\"value\":70}]},\"unit\":\"percent\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":38},\"id\":12,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"soilMoisture\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Soil Moisture (Last Value) - field2\",\"type\":\"stat\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":46},\"id\":30,\"panels\":[],\"title\":\"pH\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"barAlignment\":0,\"barWidthFactor\":0.6,\"drawStyle\":\"line\",\"fillOpacity\":0,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineInterpolation\":\"linear\",\"lineWidth\":1,\"pointSize\":5,\"scaleDistribution\":{\"type\":\"linear\"},\"showPoints\":\"auto\",\"spanNulls\":false,\"stacking\":{\"group\":\"A\",\"mode\":\"none\"},\"thresholdsStyle\":{\"mode\":\"dashed+area\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"#EAB839\",\"value\":6},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8}]},\"unit\":\"pH\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":47},\"id\":32,\"options\":{\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH\",\"type\":\"timeseries\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"max\":14,\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"yellow\",\"value\":5.5},{\"color\":\"green\",\"value\":6.5},{\"color\":\"yellow\",\"value\":7.5},{\"color\":\"red\",\"value\":8.5}]},\"unit\":\"none\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":47},\"id\":31,\"options\":{\"minVizHeight\":75,\"minVizWidth\":75,\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showThresholdLabels\":false,\"showThresholdMarkers\":true,\"sizing\":\"auto\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"ph\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"pH (Gauge) - field2\",\"type\":\"gauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":55},\"id\":40,\"panels\":[],\"title\":\"Salinity\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"axisBorderShow\":false,\"axisCenteredZero\":false,\"axisColorMode\":\"text\",\"axisLabel\":\"\",\"axisPlacement\":\"auto\",\"fillOpacity\":80,\"gradientMode\":\"none\",\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"lineWidth\":1,\"scaleDistribution\":{\"type\":\"linear\"},\"thresholdsStyle\":{\"mode\":\"off\"}},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":500},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":56},\"id\":42,\"options\":{\"barRadius\":0,\"barWidth\":0.97,\"fullHighlight\":false,\"groupWidth\":0.7,\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"orientation\":\"auto\",\"showValue\":\"auto\",\"stacking\":\"none\",\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"},\"xTickLabelRotation\":45,\"xTickLabelSpacing\":-100},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity (BarChart) - field2\",\"type\":\"barchart\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"fieldMinMax\":true,\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"red\"},{\"color\":\"green\",\"value\":450},{\"color\":\"red\",\"value\":1700}]},\"unit\":\"dS/m\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":56},\"id\":41,\"options\":{\"displayMode\":\"gradient\",\"legend\":{\"calcs\":[],\"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":false},\"maxVizHeight\":300,\"minVizHeight\":16,\"minVizWidth\":8,\"namePlacement\":\"auto\",\"orientation\":\"auto\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showUnfilled\":false,\"sizing\":\"auto\",\"valueMode\":\"color\"},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"salinity\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Salinity\",\"type\":\"bargauge\"},{\"collapsed\":false,\"gridPos\":{\"h\":1,\"w\":24,\"x\":0,\"y\":64},\"id\":60,\"panels\":[],\"title\":\"Rain\",\"type\":\"row\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"custom\":{\"fillOpacity\":70,\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false},\"insertNulls\":false,\"lineWidth\":0,\"spanNulls\":false},\"displayName\":\".\",\"fieldMinMax\":false,\"mappings\":[],\"min\":0,\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"blue\",\"value\":1},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"lengthmm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":16,\"x\":0,\"y\":65},\"id\":62,\"options\":{\"alignValue\":\"left\",\"legend\":{\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true},\"mergeValues\":false,\"rowHeight\":0.9,\"showValue\":\"auto\",\"tooltip\":{\"mode\":\"multi\",\"sort\":\"none\"}},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\r\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\r\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\r\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\r\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\r\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\r\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain Detection (State)\",\"type\":\"state-timeline\"},{\"datasource\":{\"type\":\"influxdb\",\"uid\":\"fe9sepcaz6iv4a\"},\"fieldConfig\":{\"defaults\":{\"color\":{\"mode\":\"thresholds\"},\"mappings\":[],\"thresholds\":{\"mode\":\"absolute\",\"steps\":[{\"color\":\"green\"},{\"color\":\"yellow\",\"value\":5},{\"color\":\"red\",\"value\":10}]},\"unit\":\"mm\"},\"overrides\":[]},\"gridPos\":{\"h\":8,\"w\":8,\"x\":16,\"y\":65},\"id\":61,\"options\":{\"colorMode\":\"value\",\"graphMode\":\"area\",\"justifyMode\":\"auto\",\"orientation\":\"auto\",\"percentChangeColorMode\":\"standard\",\"reduceOptions\":{\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false},\"showPercentChange\":false,\"textMode\":\"auto\",\"wideLayout\":true},\"pluginVersion\":\"11.3.1\",\"targets\":[{\"query\":\"from(bucket: \\\"SA-FMS\\\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"smart_agriculture_measurements\\\")\\n  |> filter(fn: (r) => r[\\\"field_id\\\"] == \\\"field2\\\")\\n  |> filter(fn: (r) => r[\\\"sensor_type\\\"] == \\\"rain\\\")\\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\\n  |> yield(name: \\\"last\\\")\",\"refId\":\"A\"}],\"title\":\"Rain (Last Value) - field2\",\"type\":\"stat\"}],\"preload\":false,\"refresh\":\"auto\",\"schemaVersion\":1,\"tags\":[],\"templating\":{\"list\":[]},\"time\":{\"from\":\"now-15m\",\"to\":\"now\"},\"timepicker\":{},\"timezone\":\"browser\",\"title\":\"IoT Sensors Dashboard - Field 2\",\"uid\":\"iot-sensors-002\",\"version\":31,\"weekStart\":\"\"},\"folderUid\":\"ce9xc3gcolq80d\",\"isFolder\":false,\"overwrite\":true}]",
        "payloadType": "json",
        "x": 830,
        "y": 1160,
        "wires": [
            [
                "919ff3023be6c4f7"
            ]
        ]
    },
    {
        "id": "875283611cb85b1f",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a741fac6b9bf910c",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create dashboards",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/dashboards/db",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1230,
        "y": 1080,
        "wires": [
            [
                "199c0cf9db9bbf2a",
                "b4d8627f632eeb5a"
            ]
        ]
    },
    {
        "id": "199c0cf9db9bbf2a",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1000,
        "wires": []
    },
    {
        "id": "524b0ac8cb79597c",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "994ff2f213ac5ecb",
                "dbae42a3423a4afb"
            ]
        ]
    },
    {
        "id": "4237e9bc8e53ce2b",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate Grafana Dashboards",
        "func": "/*********************************************************************\n * Node-RED Function:\n * Genera array di dashboard Grafana con soglie, layout, orientamenti\n * e dettagli esattamente come nel JSON di esempio fornito.\n *\n * msg.payload deve contenere:\n * {\n *   \"fields\": [\n *      {\n *        \"fieldId\": 1,\n *        \"sensors\": {\n *          \"soilMoisture\": true,\n *          \"temperature\": true,\n *          \"ph\": true,\n *          \"salinity\": true,\n *          \"humidity\": true,\n *          \"rain\": true\n *        }\n *      },\n *      ...\n *   ],\n *   \"interval\": 5000\n * }\n ********************************************************************/\n\n// Converte interval da ms a \"Xs\"\nfunction convertIntervalToRefresh(intervalMs) {\n  const seconds = Math.floor(intervalMs / 1000);\n  return seconds + \"s\"; // Esempio: 5000 ms -> \"5s\"\n}\n\n// Costruisce il pannello \"Overview\" (row)\nfunction buildOverviewRow(fieldId) {\n  return {\n    \"type\": \"row\",\n    \"title\": `IoT Sensors Dashboard - Field ${fieldId}`,\n    \"collapsed\": false,\n    \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 },\n    \"id\": 999,\n    \"panels\": []\n  };\n}\n\n// ---------- TEMPERATURE -----------\nfunction buildTemperaturePanels(fieldId, thresholds) {\n  // Row \"Temperature\" + Barchart + Gauge\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 16 },\n      \"id\": 20,\n      \"panels\": [],\n      \"title\": \"Temperature\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": true,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"mappings\": [],\n          \"max\": 45,\n          \"min\": -15,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"celsius\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 17 },\n      \"id\": 21,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 0.97,\n        \"colorByField\": `value {field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"}`,\n        \"fullHighlight\": true,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"normal\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Temperature\",\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 45,\n          \"min\": -15,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"celsius\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 17 },\n      \"id\": 22,\n      \"options\": {\n        \"minVizHeight\": 75,\n        \"minVizWidth\": 75,\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": `/^value \\\\{field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"\\\\}$/`,\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"sizing\": \"auto\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Temperature Gauge\",\n      \"type\": \"gauge\"\n    }\n  ];\n}\n\n// ---------- HUMIDITY -----------\nfunction buildHumidityPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 28 },\n      \"id\": 50,\n      \"panels\": [],\n      \"title\": \"Humidity\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\",\n            \"seriesBy\": \"last\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisGridShow\": true,\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"barWidthFactor\": 0.6,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n            \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n          },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 29 },\n      \"id\": 51,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Humidity\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 29 },\n      \"id\": 52,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Humidity`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n// ---------- SOIL MOISTURE -----------\nfunction buildSoilMoisturePanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 },\n      \"id\": 10,\n      \"panels\": [],\n      \"title\": \"Soil Moisture\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 38 },\n      \"id\": 11,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 1,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil Moisture`,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 38 },\n      \"id\": 12,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil Moisture`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n// ---------- pH -----------\nfunction buildPhPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 46 },\n      \"id\": 30,\n      \"panels\": [],\n      \"title\": \"Soil pH\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"barWidthFactor\": 0.6,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n            \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n          },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"pH\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 47 },\n      \"id\": 32,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Soil pH\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 14,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"pH\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 47 },\n      \"id\": 31,\n      \"options\": {\n        \"minVizHeight\": 75,\n        \"minVizWidth\": 75,\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"sizing\": \"auto\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil pH`,\n      \"type\": \"gauge\"\n    }\n  ];\n}\n\n// ---------- SALINITY -----------\nfunction buildSalinityPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 55 },\n      \"id\": 40,\n      \"panels\": [],\n      \"title\": \"Water Salinity\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"μS/cm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 56 },\n      \"id\": 42,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 0.97,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Water Salinity`,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"μS/cm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 56 },\n      \"id\": 41,\n      \"options\": {\n        \"displayMode\": \"gradient\",\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"maxVizHeight\": 300,\n        \"minVizHeight\": 16,\n        \"minVizWidth\": 8,\n        \"namePlacement\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showUnfilled\": false,\n        \"sizing\": \"auto\",\n        \"valueMode\": \"color\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Water Salinity\",\n      \"type\": \"bargauge\"\n    }\n  ];\n}\n\n// ---------- RAIN -----------\nfunction buildRainPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 64 },\n      \"id\": 60,\n      \"panels\": [],\n      \"title\": \"Rain Detection\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"fillOpacity\": 70,\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineWidth\": 0,\n            \"spanNulls\": false\n          },\n          \"displayName\": \".\",\n          \"fieldMinMax\": false,\n          \"mappings\": [],\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"green\" },\n              { \"color\": \"blue\", \"value\": 1 },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"lengthmm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 19, \"x\": 0, \"y\": 65 },\n      \"id\": 62,\n      \"options\": {\n        \"alignValue\": \"left\",\n        \"legend\": {\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"mergeValues\": false,\n        \"rowHeight\": 0.9,\n        \"showValue\": \"auto\",\n        \"tooltip\": { \"mode\": \"multi\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Rain Detection State\",\n      \"type\": \"state-timeline\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"green\" },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"mm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 9, \"w\": 5, \"x\": 19, \"y\": 65 },\n      \"id\": 61,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Rain Detection`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n/***************************************************************\n * buildDashboardForField\n * Costruisce la singola dashboard (JSON) per il field specifico,\n * con i pannelli corrispondenti solo ai sensori \"true\".\n ***************************************************************/\nfunction buildDashboardForField(fieldId, sensors, refreshValue, thresholds) {\n  // Struttura base\n  let baseDashboard = {\n    \"dashboard\": {\n      \"annotations\": {\n        \"list\": [\n          {\n            \"builtIn\": 1,\n            \"datasource\": {\n              \"type\": \"grafana\",\n              \"uid\": \"-- Grafana --\"\n            },\n            \"enable\": true,\n            \"hide\": true,\n            \"iconColor\": \"rgba(0, 211, 255, 1)\",\n            \"name\": \"Annotations & Alerts\",\n            \"type\": \"dashboard\"\n          }\n        ]\n      },\n      \"editable\": true,\n      \"fiscalYearStartMonth\": 0,\n      \"graphTooltip\": 0,\n      \"links\": [],\n      \"panels\": [],\n      \"preload\": false,\n      \"refresh\": refreshValue,         // es. \"5s\"\n      \"schemaVersion\": 1,\n      \"tags\": [],\n      \"templating\": { \"list\": [] },\n      \"time\": { \"from\": \"now-15m\", \"to\": \"now\" },\n      \"timepicker\": {},\n      \"timezone\": \"browser\",\n      \"title\": `IoT Sensors Dashboard - Field ${fieldId}`,\n      \"uid\": `temporary-iot-sensors-00${fieldId}`,  // uid univoco\n      \"version\": 31, // o 1, come preferisci\n      \"weekStart\": \"\"\n    },\n    \"folderUid\": \"Screenshot-Temporary-SA-FMS\",\n    \"isFolder\": false,\n    \"overwrite\": true\n  };\n\n  // (1) Row \"Overview\"\n  baseDashboard.dashboard.panels.push(buildOverviewRow(fieldId));\n\n  // Aggiunge i blocchi sensori *solo* se sensors.xxx = true\n  if (sensors.temperature) {\n    baseDashboard.dashboard.panels.push(...buildTemperaturePanels(fieldId, thresholds.temperature));\n  }\n  if (sensors.humidity) {\n    baseDashboard.dashboard.panels.push(...buildHumidityPanels(fieldId, thresholds.humidity));\n  }\n  if (sensors.soilMoisture) {\n    baseDashboard.dashboard.panels.push(...buildSoilMoisturePanels(fieldId, thresholds.soilMoisture));\n  }\n  if (sensors.ph) {\n    baseDashboard.dashboard.panels.push(...buildPhPanels(fieldId, thresholds.ph));\n  }\n  if (sensors.salinity) {\n    baseDashboard.dashboard.panels.push(...buildSalinityPanels(fieldId, thresholds.salinity));\n  }\n  if (sensors.rain) {\n    baseDashboard.dashboard.panels.push(...buildRainPanels(fieldId, thresholds.rain));\n  }\n\n  return baseDashboard;\n}\n\n/***************************************************************\n * FUNZIONE PRINCIPALE NODO\n ***************************************************************/\n//let input = msg.payload; \n\nlet conf = {\n  \"initialWeather\": \"CLOUDY\",\n  \"fields\": [\n    {\n      \"fieldId\": 1,\n      \"sensors\": {\n        \"soilMoisture\": true,\n        \"temperature\": true,\n        \"ph\": true,\n        \"salinity\": true,\n        \"humidity\": true,\n        \"rain\": true\n      }\n    },\n    {\n      \"fieldId\": 2,\n      \"sensors\": {\n        \"soilMoisture\": true,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": true,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 3,\n      \"sensors\": {\n        \"soilMoisture\": true,\n        \"temperature\": true,\n        \"ph\": true,\n        \"salinity\": true,\n        \"humidity\": true,\n        \"rain\": true\n      }\n    }\n  ],\n  \"interval\": 5000\n};\n\nlet input = global.get(\"simulationConfiguration\") || conf;\n\nlet thresholds = {\n  \"soilMoisture\": {\n    \"min\": 20,\n    \"max\": 80\n  },\n  \"temperature\": {\n    \"min\": 0,\n    \"max\": 35\n  },\n  \"ph\": {\n    \"min\": 5.5,\n    \"max\": 7.5\n  },\n  \"salinity\": {\n    \"min\": 200,\n    \"max\": 1500\n  },\n  \"humidity\": {\n    \"min\": 50,\n    \"max\": 90\n  },\n  \"rain\": {\n    \"max\": 40\n  }\n};\n\nconst thresholdConfig = global.get(\"sensorsThreshold\") || thresholds;\n\n// Converte interval (ms) in stringa \"Xs\"\nlet refreshStr = convertIntervalToRefresh(input.interval);\n\n// Crea un array di dashboards\nlet dashboards = [];\n\nfor (let f of input.fields) {\n  let fieldId = f.fieldId;\n  let sensors = f.sensors;\n  // Crea una dashboard per questo field\n  let dash = buildDashboardForField(fieldId, sensors, refreshStr, thresholdConfig);\n  dashboards.push(dash);\n}\n\nmsg.payload = dashboards;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1080,
        "wires": [
            [
                "20ce4d9c3ca019de",
                "919ff3023be6c4f7"
            ]
        ]
    },
    {
        "id": "20ce4d9c3ca019de",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 940,
        "wires": []
    },
    {
        "id": "994ff2f213ac5ecb",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1020,
        "wires": []
    },
    {
        "id": "58e8d68f572da2fc",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create the folder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/folders",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 570,
        "y": 1080,
        "wires": [
            [
                "90dc134a70e4ea70",
                "4237e9bc8e53ce2b"
            ]
        ]
    },
    {
        "id": "90dc134a70e4ea70",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1000,
        "wires": []
    },
    {
        "id": "dbae42a3423a4afb",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Create the folder",
        "func": "let folder = {\n    \"description\": \"Smart Agriculture - Field Monitoring System temporary folder for screenshots\",\n    \"title\": \"Smart Agriculture - Field Monitoring System temporary folder for screenshots\",\n    \"uid\": \"Screenshot-Temporary-SA-FMS\"\n}\n\nmsg.payload = folder;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "58e8d68f572da2fc"
            ]
        ]
    },
    {
        "id": "d06f170e61fbc795",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "58e8d68f572da2fc"
        ],
        "uncaught": false,
        "x": 230,
        "y": 1160,
        "wires": [
            [
                "eb59001a0e06b4aa"
            ]
        ]
    },
    {
        "id": "eb59001a0e06b4aa",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "58e8d68f572da2fc"
            ]
        ]
    },
    {
        "id": "0f23e2b1718294af",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "a741fac6b9bf910c"
        ],
        "uncaught": false,
        "x": 890,
        "y": 1240,
        "wires": [
            [
                "e60fe2d02e0c472c"
            ]
        ]
    },
    {
        "id": "e60fe2d02e0c472c",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 1240,
        "wires": [
            [
                "a741fac6b9bf910c"
            ]
        ]
    },
    {
        "id": "b4d8627f632eeb5a",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Count dashboard create request and generate render request urls",
        "func": "let defaultConfiguration = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\":5000\n};\n\n// Recupera la configurazione globale\nlet configuration = global.get(\"simulationConfiguration\") || defaultConfiguration;\n\n// Conta il numero di campi\nlet totalFields = configuration.fields.length;\n\n// Mantieni un contatore nel contesto\nlet count = context.get('count') || 0;\ncount += 1;\n\n// Controlla se il numero di messaggi ricevuti è uguale al numero di campi\nif (count >= totalFields) {\n\n    let urlTemplate = \"http://grafana-SA-FMS:3000/render/d/iot-sensors-001/iot-sensors-dashboard-field-1?orgId=1&from=now-1d&to=now&timezone=browser&refresh=30m&width=2080&height=2400&kiosk=1\";\n    \n    let heightMapping = {\n        6: \"2400\",\n        5: \"2020\",\n        4: \"1650\",\n        3: \"1250\",\n        2: \"880\",\n        1: \"500\",\n    };\n\n    context.set('count', 0); // Reset del contatore\n\n    let urls = configuration.fields.map(field => {\n        let activeSensorsCount = Object.values(field.sensors).filter(sensor => sensor).length;\n        let height = heightMapping[activeSensorsCount] || \"500\"; // Default to \"500\" if no match found\n\n        let updatedUrl = urlTemplate\n            .replace(\"iot-sensors-001\", `temporary-iot-sensors-00${field.fieldId}`)\n            .replace(\"iot-sensors-dashboard-field-1\", `iot-sensors-dashboard-field-${field.fieldId}`)\n            .replace(/height=\\d+/, `height=${height}`);\n\n        return updatedUrl;\n    });\n\n    // Return the generated URLs for use in Node-RED\n    msg.url = urls;\n    return msg;\n} else {\n    context.set('count', count); // Aggiorna il contatore\n    return null; // Non inviare nulla\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1080,
        "wires": [
            [
                "3eac4794ad274006",
                "6d2e1caaf390ae96"
            ]
        ]
    },
    {
        "id": "3eac4794ad274006",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8632bef7c0548ec4",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "OUTPUT REQUEST PHOTO",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "bee16908951a44d6",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get dashboard image rendered",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 2130,
        "y": 1080,
        "wires": [
            [
                "8632bef7c0548ec4",
                "3751a27e921b6185",
                "cc5967097c596789"
            ]
        ]
    },
    {
        "id": "6d2e1caaf390ae96",
        "type": "split",
        "z": "974a61a99863234b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "url",
        "x": 1930,
        "y": 1080,
        "wires": [
            [
                "bee16908951a44d6"
            ]
        ]
    },
    {
        "id": "0e38b613b7161289",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Delete folder - dashboard - alert rules",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/folders/Screenshot-Temporary-SA-FMS?forceDeleteRules=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 2710,
        "y": 1080,
        "wires": [
            [
                "d46422b1b59aa715"
            ]
        ]
    },
    {
        "id": "3751a27e921b6185",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Count render request",
        "func": "msg={};\nlet defaultConfiguration = {\n    \"initialWeather\": \"CLOUDY\",\n    \"fields\": [\n        {\n            \"fieldId\": 1,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        },\n        {\n            \"fieldId\": 2,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": false,\n                \"salinity\": false,\n                \"humidity\": true,\n                \"rain\": false\n            }\n        },\n        {\n            \"fieldId\": 3,\n            \"sensors\": {\n                \"soilMoisture\": true,\n                \"temperature\": true,\n                \"ph\": true,\n                \"salinity\": true,\n                \"humidity\": true,\n                \"rain\": true\n            }\n        }\n    ],\n    \"interval\":5000\n};\n\n// Recupera la configurazione globale\nlet configuration = global.get(\"simulationConfiguration\") || defaultConfiguration;\n\n// Conta il numero di campi\nlet totalFields = configuration.fields.length;\n\n// Mantieni un contatore nel contesto\nlet count = context.get('count') || 0;\ncount += 1;\n\n// Controlla se il numero di messaggi ricevuti è uguale al numero di campi\nif (count >= totalFields) {\n    context.set('count', 0); // Reset del contatore\n    msg.payload = \"Done!\";\n    return msg;\n} else {\n    context.set('count', count); // Aggiorna il contatore\n    return null; // Non inviare nulla\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1080,
        "wires": [
            [
                "0e38b613b7161289"
            ]
        ]
    },
    {
        "id": "d46422b1b59aa715",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1142efbb683ccd10",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "a741fac6b9bf910c"
        ],
        "uncaught": false,
        "x": 1770,
        "y": 1000,
        "wires": [
            [
                "a0a0f42656cadfad"
            ]
        ]
    },
    {
        "id": "a0a0f42656cadfad",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1920,
        "y": 1000,
        "wires": [
            [
                "bee16908951a44d6"
            ]
        ]
    },
    {
        "id": "258141c07cf4e638",
        "type": "catch",
        "z": "974a61a99863234b",
        "name": "",
        "scope": [
            "a741fac6b9bf910c"
        ],
        "uncaught": false,
        "x": 2310,
        "y": 980,
        "wires": [
            [
                "2ac2bd30e141d81e"
            ]
        ]
    },
    {
        "id": "2ac2bd30e141d81e",
        "type": "delay",
        "z": "974a61a99863234b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2460,
        "y": 980,
        "wires": [
            [
                "0e38b613b7161289"
            ]
        ]
    },
    {
        "id": "c08784a7d0bdacfc",
        "type": "link in",
        "z": "974a61a99863234b",
        "name": "Set Grafana",
        "links": [
            "7a9b6ee89f80ec87"
        ],
        "x": 125,
        "y": 360,
        "wires": [
            [
                "ce39c7cead73f66a"
            ]
        ]
    },
    {
        "id": "4a8dd89a69cb644a",
        "type": "link in",
        "z": "974a61a99863234b",
        "name": "Set Alert (Thresholds - Sensor)",
        "links": [
            "1afb0f3b103d6bbb"
        ],
        "x": 125,
        "y": 400,
        "wires": [
            [
                "ce39c7cead73f66a"
            ]
        ]
    },
    {
        "id": "48158ff7c011f763",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1400,
        "wires": [
            [
                "ad9cd504de81cd16"
            ]
        ]
    },
    {
        "id": "ad9cd504de81cd16",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get All source",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 400,
        "y": 1400,
        "wires": [
            [
                "408232ded449a5af",
                "95335ac60dfd0cec"
            ]
        ]
    },
    {
        "id": "95335ac60dfd0cec",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate datasource if not exist",
        "func": "const datasource = {\n   \"uid\": \"fe9sepcaz6iv4a\",\n   \"orgId\": 1,\n   \"name\": \"influxdb1\",\n   \"type\": \"influxdb\",\n   \"typeName\": \"InfluxDB\",\n   \"typeLogoUrl\": \"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\",\n   \"access\": \"proxy\",\n   \"url\": \"http://influxdb-SA-FMS:8086\",\n   \"user\": \"\",\n   \"database\": \"\",\n   \"basicAuth\": false,\n   \"isDefault\": true,\n   \"jsonData\": {\n      \"httpMode\": \"POST\",\n      \"organization\": \"se4iot\",\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\",\n      \"version\": \"Flux\"\n   },\n   \"readOnly\": false,\n   \"secureJsonData\": {\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\"\n   }\n}\n\nconst n = [];\nif (Array.isArray(msg.payload) && msg.payload.length === 0) {\n   msg.payload = datasource;\n   return msg;\n}\n\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "b0c350ff48fc666f",
                "57e2707e35d112ab"
            ]
        ]
    },
    {
        "id": "b0c350ff48fc666f",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1300,
        "wires": []
    },
    {
        "id": "408232ded449a5af",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1500,
        "wires": []
    },
    {
        "id": "edf446a38f6d46d6",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create datasource",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 1050,
        "y": 1460,
        "wires": [
            [
                "0fabf0ed3023a7ee",
                "05f8e9bdb98969de"
            ]
        ]
    },
    {
        "id": "0fabf0ed3023a7ee",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1480,
        "wires": []
    },
    {
        "id": "57e2707e35d112ab",
        "type": "switch",
        "z": "974a61a99863234b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "05f8e9bdb98969de"
            ],
            [
                "edf446a38f6d46d6"
            ]
        ]
    },
    {
        "id": "05f8e9bdb98969de",
        "type": "debug",
        "z": "974a61a99863234b",
        "name": "Restante parte del flusso",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3fd52c3f43684b6a",
        "type": "inject",
        "z": "974a61a99863234b",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"uid\":\"influx-datasource\",\"orgId\":1,\"name\":\"influxdb\",\"type\":\"influxdb\",\"typeName\":\"InfluxDB\",\"typeLogoUrl\":\"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\",\"access\":\"proxy\",\"url\":\"http://host.docker.internal:8086\",\"user\":\"\",\"database\":\"\",\"basicAuth\":false,\"isDefault\":true,\"jsonData\":{\"httpMode\":\"POST\",\"organization\":\"se4iot\",\"version\":\"Flux\"},\"readOnly\":false}",
        "payloadType": "json",
        "x": 910,
        "y": 1580,
        "wires": [
            [
                "edf446a38f6d46d6"
            ]
        ]
    },
    {
        "id": "cc5967097c596789",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "fammi il nome",
        "func": "// Funzione per estrarre la parte desiderata dall'URL\nfunction extractDashboardField(responseUrl) {\n    // Usa una RegEx per catturare la parte desiderata\n    const match = responseUrl.match(/\\/d\\/[^\\/]+\\/([^\\?]+)/);\n\n    // Se la RegEx trova un match, restituisci il gruppo catturato\n    if (match && match[1]) {\n        return match[1];\n    } else {\n        return null; // Nessun match trovato\n    }\n}\nnode.warn(\"filename: \" + extractDashboardField(msg.responseUrl));\nmsg.filename = extractDashboardField(msg.responseUrl);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1260,
        "wires": [
            [
                "93db5137e1f121d6",
                "9f6c0b285aa42713"
            ]
        ]
    },
    {
        "id": "93db5137e1f121d6",
        "type": "file",
        "z": "974a61a99863234b",
        "d": true,
        "name": "",
        "filename": "/data/out/img.png",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2510,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "7d76f6ba396887ab",
        "type": "link in",
        "z": "974a61a99863234b",
        "name": "Create Report Photo",
        "links": [
            "fe8844707189a25b"
        ],
        "x": 105,
        "y": 1140,
        "wires": [
            [
                "ce7131514720ae8d"
            ]
        ]
    },
    {
        "id": "9f6c0b285aa42713",
        "type": "link out",
        "z": "974a61a99863234b",
        "name": "Output Generate Report Photo single",
        "mode": "link",
        "links": [
            "7cb34e23065ce05a"
        ],
        "x": 2485,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ce39c7cead73f66a",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get All source",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 260,
        "y": 380,
        "wires": [
            [
                "86bcfbc8770a25a7"
            ]
        ]
    },
    {
        "id": "86bcfbc8770a25a7",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate datasource if not exist",
        "func": "const datasource = {\n   \"uid\": \"fe9sepcaz6iv4a\",\n   \"orgId\": 1,\n   \"name\": \"influxdb1\",\n   \"type\": \"influxdb\",\n   \"typeName\": \"InfluxDB\",\n   \"typeLogoUrl\": \"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\",\n   \"access\": \"proxy\",\n   \"url\": \"http://influxdb-SA-FMS:8086\",\n   \"user\": \"\",\n   \"database\": \"\",\n   \"basicAuth\": false,\n   \"isDefault\": true,\n   \"jsonData\": {\n      \"httpMode\": \"POST\",\n      \"organization\": \"se4iot\",\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\",\n      \"version\": \"Flux\"\n   },\n   \"readOnly\": false,\n   \"secureJsonData\": {\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\"\n   }\n}\n\nconst n = [];\nif (Array.isArray(msg.payload) && msg.payload.length === 0) {\n   msg.payload = datasource;\n   return msg;\n}\n\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 380,
        "wires": [
            [
                "8ba0ed6e97bcfdc7"
            ]
        ]
    },
    {
        "id": "8ba0ed6e97bcfdc7",
        "type": "switch",
        "z": "974a61a99863234b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "39c9855ab18c75ca"
            ],
            [
                "bb017e1bf20c00b0"
            ]
        ]
    },
    {
        "id": "bb017e1bf20c00b0",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create datasource",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "39c9855ab18c75ca"
            ]
        ]
    },
    {
        "id": "ce7131514720ae8d",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Get All source",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 160,
        "y": 1220,
        "wires": [
            [
                "80360225992db496"
            ]
        ]
    },
    {
        "id": "80360225992db496",
        "type": "function",
        "z": "974a61a99863234b",
        "name": "Generate datasource if not exist",
        "func": "const datasource = {\n   \"uid\": \"fe9sepcaz6iv4a\",\n   \"orgId\": 1,\n   \"name\": \"influxdb1\",\n   \"type\": \"influxdb\",\n   \"typeName\": \"InfluxDB\",\n   \"typeLogoUrl\": \"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\",\n   \"access\": \"proxy\",\n   \"url\": \"http://influxdb-SA-FMS:8086\",\n   \"user\": \"\",\n   \"database\": \"\",\n   \"basicAuth\": false,\n   \"isDefault\": true,\n   \"jsonData\": {\n      \"httpMode\": \"POST\",\n      \"organization\": \"se4iot\",\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\",\n      \"version\": \"Flux\"\n   },\n   \"readOnly\": false,\n   \"secureJsonData\": {\n      \"token\": \"G-UFVBDaSWKvc8P9QWjfwna3q6-n6_vRHSmL0CvN9T0SCJNfT0YDPR_XxYfKTREDoAS-jeuq1TbX2KnawbDodA==\"\n   }\n}\n\nconst n = [];\nif (Array.isArray(msg.payload) && msg.payload.length === 0) {\n   msg.payload = datasource;\n   return msg;\n}\n\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1220,
        "wires": [
            [
                "d1f70c168a9d7d1e"
            ]
        ]
    },
    {
        "id": "d1f70c168a9d7d1e",
        "type": "switch",
        "z": "974a61a99863234b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "dbae42a3423a4afb"
            ],
            [
                "2240b449dde58fe6"
            ]
        ]
    },
    {
        "id": "2240b449dde58fe6",
        "type": "http request",
        "z": "974a61a99863234b",
        "name": "Create datasource",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/datasources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_BBfglZ2IKTrksFMjPZq4pzk6U7yM9lTP_46936d3b"
            }
        ],
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "dbae42a3423a4afb"
            ]
        ]
    },
    {
        "id": "875e4679a76383b9",
        "type": "inject",
        "z": "29769fa64d96c13b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "dfba920920132e54"
            ]
        ]
    },
    {
        "id": "dfba920920132e54",
        "type": "http request",
        "z": "29769fa64d96c13b",
        "name": "Get contact point",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/contact-points",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_aywkbU6h0zmuxdVSaR1tzGircIZNyZRc_9a73249a"
            }
        ],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "ed5c4e705f463f49"
            ]
        ]
    },
    {
        "id": "ed5c4e705f463f49",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 240,
        "wires": []
    },
    {
        "id": "d3415667c1908e35",
        "type": "inject",
        "z": "29769fa64d96c13b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "43bd7f4e4ba75bca"
            ]
        ]
    },
    {
        "id": "43bd7f4e4ba75bca",
        "type": "function",
        "z": "29769fa64d96c13b",
        "name": "Generate email contact point",
        "func": "msg.payload = {\n    \"uid\": \"default-contact-point\",\n    \"name\": \"default-email\",\n    \"type\": \"email\",\n    \"settings\": {\n        \"addresses\": \"sdrefano.sdrefano@gmail.com\",\n        \"message\": `{{ define \"custom.message\" }}\n# 📊 Smart Agriculture - Field Monitoring System\n \n{{ if gt (len .Alerts.Firing) 0 }}\n## ⚠️ Firing Alerts\n{{ range .Alerts.Firing }}\n- **Alert**: {{ .Labels.alertname }}\n  - **Field**: {{ .Labels.Field }}\n  - **Value**: {{ .ValueString }}\n  - **Description**: {{ .Annotations.description }}\n  - [View in Grafana]({{ .GeneratorURL }})\n{{ end }}\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n## ✅ Resolved Alerts\n{{ range .Alerts.Resolved }}\n- **Alert**: {{ .Labels.alertname }}\n  - **Field**: {{ .Labels.Field }}\n  - **Value**: {{ .ValueString }}\n  - **Description**: {{ .Annotations.description }}\n  - [View in Grafana]({{ .GeneratorURL }})\n{{ end }}\n{{ end }}\n \n---\n*This notification was generated by Grafana.*\n{{ end }}\n{{custom.message}}\n`,\n        \"singleEmail\": false,\n        \"subject\": `{{ define \"custom.subject\" }}\n[{{ .Status | title }}] 📊 Smart Agriculture -\n{{ if gt (len .Alerts.Firing) 0 }} {{ len .Alerts.Firing }} Firing {{ end }}\n{{ if gt (len .Alerts.Resolved) 0 }} {{ len .Alerts.Resolved }} Resolved {{ end }}\n - {{ .CommonLabels.alertname }}\n{{ end }}`\n    },\n    \"disableResolveMessage\": false\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "5cbea3f4c83a13a0"
            ]
        ]
    },
    {
        "id": "5cbea3f4c83a13a0",
        "type": "http request",
        "z": "29769fa64d96c13b",
        "name": "Update contact point",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/contact-points/default-contact-point",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_aywkbU6h0zmuxdVSaR1tzGircIZNyZRc_9a73249a"
            }
        ],
        "x": 760,
        "y": 320,
        "wires": [
            [
                "cf6f41aa6368cd77"
            ]
        ]
    },
    {
        "id": "cf6f41aa6368cd77",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 320,
        "wires": []
    },
    {
        "id": "864cd3917b803e32",
        "type": "inject",
        "z": "29769fa64d96c13b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 480,
        "wires": [
            [
                "1712e896152c61ce"
            ]
        ]
    },
    {
        "id": "b41a61fe39d6e9e9",
        "type": "http request",
        "z": "29769fa64d96c13b",
        "name": "update notification policy",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/policies",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_aywkbU6h0zmuxdVSaR1tzGircIZNyZRc_9a73249a"
            }
        ],
        "x": 770,
        "y": 480,
        "wires": [
            [
                "669499df7f93f934"
            ]
        ]
    },
    {
        "id": "669499df7f93f934",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 480,
        "wires": []
    },
    {
        "id": "1712e896152c61ce",
        "type": "function",
        "z": "29769fa64d96c13b",
        "name": "Generate notification policy",
        "func": "msg.payload = {\n  \"group_by\": [\n    \"grafana_folder\",\n    \"alertname\"\n  ],\n  \"group_interval\": \"1s\",\n  \"group_wait\": \"1s\",\n  \"receiver\": \"grafana-default-email\",\n  \"repeat_interval\": \"4h\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "b41a61fe39d6e9e9"
            ]
        ]
    },
    {
        "id": "2a62ad823da788fa",
        "type": "inject",
        "z": "29769fa64d96c13b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 400,
        "wires": [
            [
                "9aceac19393848c2"
            ]
        ]
    },
    {
        "id": "9aceac19393848c2",
        "type": "http request",
        "z": "29769fa64d96c13b",
        "name": "Get notification policy",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/v1/provisioning/policies",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_aywkbU6h0zmuxdVSaR1tzGircIZNyZRc_9a73249a"
            }
        ],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "301a65d4c4c50863"
            ]
        ]
    },
    {
        "id": "301a65d4c4c50863",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "bb72c6ea5544905a",
        "type": "function",
        "z": "29769fa64d96c13b",
        "name": "Generate Grafana Dashboards",
        "func": "/*********************************************************************\n * Node-RED Function:\n * Genera array di dashboard Grafana con soglie, layout, orientamenti\n * e dettagli esattamente come nel JSON di esempio fornito.\n *\n * msg.payload deve contenere:\n * {\n *   \"fields\": [\n *      {\n *        \"fieldId\": 1,\n *        \"sensors\": {\n *          \"soilMoisture\": true,\n *          \"temperature\": true,\n *          \"ph\": true,\n *          \"salinity\": true,\n *          \"humidity\": true,\n *          \"rain\": true\n *        }\n *      },\n *      ...\n *   ],\n *   \"interval\": 5000\n * }\n ********************************************************************/\n\n// Converte interval da ms a \"Xs\"\nfunction convertIntervalToRefresh(intervalMs) {\n  const seconds = Math.floor(intervalMs / 1000);\n  return seconds + \"s\"; // Esempio: 5000 ms -> \"5s\"\n}\n\n// Costruisce il pannello \"Overview\" (row)\nfunction buildOverviewRow() {\n  return {\n    \"type\": \"row\",\n    \"title\": \"Overview\",\n    \"collapsed\": false,\n    \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 },\n    \"id\": 999,\n    \"panels\": []\n  };\n}\n\n// Costruisce il pannello testuale di introduzione, riferito a \"Field X\"\nfunction buildTextPanel(fieldId, sensors) {\n  // Mappa dei sensori con i loro nomi descrittivi\n  const sensorDescriptions = {\n    soilMoisture: \"Soil Moisture Sensor: Measures soil water content to determine irrigation needs.\",\n    temperature: \"Temperature Sensor: Monitors ambient temperature to assess climate conditions.\",\n    ph: \"Soil pH Sensor: Measures soil acidity/alkalinity to ensure compatibility with crops.\",\n    salinity: \"Water Salinity Sensor: Monitors water salinity levels to ensure optimal irrigation quality.\",\n    humidity: \"Relative Humidity Sensor: Measures air humidity to monitor atmospheric conditions.\",\n    rain: \"Rain Detection Sensor: Detects the presence and intensity of rain to adjust irrigation schedules.\"\n  };\n\n  // Filtra i sensori con valore true\n  const activeSensors = Object.entries(sensors)\n    .filter(([key, value]) => value)\n    .map(([key]) => `- **${sensorDescriptions[key]}**`)\n    .join(\"\\n\");\n\n  return {\n    \"type\": \"text\",\n    \"title\": \"Dashboard Introduction\",\n    \"id\": 1000,\n    \"gridPos\": {\n      \"h\": 12,\n      \"w\": 24,\n      \"x\": 0,\n      \"y\": 1\n    },\n    \"options\": {\n      \"mode\": \"markdown\",\n      \"content\": `## IoT Sensors Dashboard - Field ${fieldId}\n\nWelcome to the **Field ${fieldId}** monitoring dashboard of the _Smart Agriculture - Field Monitoring System_.\n\n### Overview\nThis dashboard provides real-time monitoring of data from **Field ${fieldId}**, with each row dedicated to a specific sensor.\nUsing data collected from simulated IoT sensors, the system helps identify critical conditions and optimize agricultural resource management.\n\n### Monitored Sensors\n${activeSensors || \"No sensors are currently being monitored.\"}\n\n### Alerts\nUse the **All Alerts** section to check for any anomalies or sensors exceeding desired thresholds.`\n    }\n  };\n}\n\n\n// Costruisce la row \"All Alerts\" + pannello \"All Active Alerts\"\nfunction buildAllAlertsRow(fieldId) {\n  return [\n    {\n      \"type\": \"row\",\n      \"title\": \"All Alerts\",\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 5\n      },\n      \"id\": 1,\n      \"panels\": []\n    },\n    {\n      \"fieldConfig\": { \"defaults\": {}, \"overrides\": [] },\n      \"gridPos\": {\n        \"h\": 10,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 6\n      },\n      \"id\": 2,\n      \"options\": {\n        \"alertInstanceLabelFilter\": \"\",\n        \"alertName\": `Field ${fieldId}`,\n        \"dashboardAlerts\": true,\n        \"folder\": \"\",\n        \"groupBy\": [\"sensor_type\"],\n        \"groupMode\": \"custom\",\n        \"maxItems\": 50,\n        \"sortOrder\": 4,\n        \"stateFilter\": {\n          \"error\": true,\n          \"firing\": true,\n          \"noData\": true,\n          \"normal\": false,\n          \"pending\": true\n        },\n        \"viewMode\": \"list\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"title\": \"All Active Alerts\",\n      \"type\": \"alertlist\"\n    }\n  ];\n}\n\n// ---------- TEMPERATURE -----------\nfunction buildTemperaturePanels(fieldId, thresholds) {\n  // Row \"Temperature\" + Barchart + Gauge\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 16 },\n      \"id\": 20,\n      \"panels\": [],\n      \"title\": \"Temperature\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": true,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"mappings\": [],\n          \"max\": 45,\n          \"min\": -15,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"celsius\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 17 },\n      \"id\": 21,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 0.97,\n        \"colorByField\": `value {field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"}`,\n        \"fullHighlight\": true,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"normal\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Temperature\",\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 45,\n          \"min\": -15,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"celsius\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 17 },\n      \"id\": 22,\n      \"options\": {\n        \"minVizHeight\": 75,\n        \"minVizWidth\": 75,\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": `/^value \\\\{field_id=\"field${fieldId}\", sensor_type=\"temperature\", topic=\"agriculture/field${fieldId}/temperature\"\\\\}$/`,\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"sizing\": \"auto\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Temperature Gauge\",\n      \"type\": \"gauge\"\n    }\n  ];\n}\n\n// ---------- HUMIDITY -----------\nfunction buildHumidityPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 28 },\n      \"id\": 50,\n      \"panels\": [],\n      \"title\": \"Humidity\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\",\n            \"seriesBy\": \"last\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisGridShow\": true,\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"barWidthFactor\": 0.6,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n            \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n          },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 29 },\n      \"id\": 51,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Humidity\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 29 },\n      \"id\": 52,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Humidity`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n// ---------- SOIL MOISTURE -----------\nfunction buildSoilMoisturePanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 },\n      \"id\": 10,\n      \"panels\": [],\n      \"title\": \"Soil Moisture\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 38 },\n      \"id\": 11,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 1,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil Moisture`,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\", \"value\": null },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 38 },\n      \"id\": 12,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"soilMoisture\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil Moisture`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n// ---------- pH -----------\nfunction buildPhPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 46 },\n      \"id\": 30,\n      \"panels\": [],\n      \"title\": \"Soil pH\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"barWidthFactor\": 0.6,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": { \"group\": \"A\", \"mode\": \"none\" },\n            \"thresholdsStyle\": { \"mode\": \"dashed+area\" }\n          },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"pH\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 47 },\n      \"id\": 32,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Soil pH\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"max\": 14,\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"pH\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 47 },\n      \"id\": 31,\n      \"options\": {\n        \"minVizHeight\": 75,\n        \"minVizWidth\": 75,\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"sizing\": \"auto\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"ph\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Soil pH`,\n      \"type\": \"gauge\"\n    }\n  ];\n}\n\n// ---------- SALINITY -----------\nfunction buildSalinityPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 55 },\n      \"id\": 40,\n      \"panels\": [],\n      \"title\": \"Water Salinity\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"lineWidth\": 1,\n            \"scaleDistribution\": { \"type\": \"linear\" },\n            \"thresholdsStyle\": { \"mode\": \"off\" }\n          },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"dS/m\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 56 },\n      \"id\": 42,\n      \"options\": {\n        \"barRadius\": 0,\n        \"barWidth\": 0.97,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" },\n        \"xTickLabelRotation\": 45,\n        \"xTickLabelSpacing\": -100\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Water Salinity`,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"fieldMinMax\": true,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"red\" },\n              { \"color\": \"green\", \"value\": thresholds.min },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"dS/m\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 56 },\n      \"id\": 41,\n      \"options\": {\n        \"displayMode\": \"gradient\",\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"maxVizHeight\": 300,\n        \"minVizHeight\": 16,\n        \"minVizWidth\": 8,\n        \"namePlacement\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showUnfilled\": false,\n        \"sizing\": \"auto\",\n        \"valueMode\": \"color\"\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"salinity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Water Salinity\",\n      \"type\": \"bargauge\"\n    }\n  ];\n}\n\n// ---------- RAIN -----------\nfunction buildRainPanels(fieldId, thresholds) {\n  return [\n    {\n      \"collapsed\": false,\n      \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 64 },\n      \"id\": 60,\n      \"panels\": [],\n      \"title\": \"Rain Detection\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"custom\": {\n            \"fillOpacity\": 70,\n            \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false },\n            \"insertNulls\": false,\n            \"lineWidth\": 0,\n            \"spanNulls\": false\n          },\n          \"displayName\": \".\",\n          \"fieldMinMax\": false,\n          \"mappings\": [],\n          \"min\": 0,\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"green\" },\n              { \"color\": \"blue\", \"value\": 1 },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"lengthmm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 16, \"x\": 0, \"y\": 65 },\n      \"id\": 62,\n      \"options\": {\n        \"alignValue\": \"left\",\n        \"legend\": {\n          \"displayMode\": \"list\",\n          \"placement\": \"right\",\n          \"showLegend\": true\n        },\n        \"mergeValues\": false,\n        \"rowHeight\": 0.9,\n        \"showValue\": \"auto\",\n        \"tooltip\": { \"mode\": \"multi\", \"sort\": \"none\" }\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Rain Detection State\",\n      \"type\": \"state-timeline\"\n    },\n    {\n      \"datasource\": { \"type\": \"influxdb\", \"uid\": \"fe9sepcaz6iv4a\" },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": { \"mode\": \"thresholds\" },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              { \"color\": \"green\" },\n              { \"color\": \"red\", \"value\": thresholds.max }\n            ]\n          },\n          \"unit\": \"mm\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 65 },\n      \"id\": 61,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"area\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"percentChangeColorMode\": \"standard\",\n        \"reduceOptions\": {\n          \"calcs\": [\"lastNotNull\"],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showPercentChange\": false,\n        \"textMode\": \"auto\",\n        \"wideLayout\": true\n      },\n      \"pluginVersion\": \"11.3.1\",\n      \"targets\": [\n        {\n          \"query\": `from(bucket: \"SA-FMS\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field${fieldId}\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"rain\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": `Rain Detection`,\n      \"type\": \"stat\"\n    }\n  ];\n}\n\n/***************************************************************\n * buildDashboardForField\n * Costruisce la singola dashboard (JSON) per il field specifico,\n * con i pannelli corrispondenti solo ai sensori \"true\".\n ***************************************************************/\nfunction buildDashboardForField(fieldId, sensors, refreshValue, thresholds) {\n  // Struttura base\n  let baseDashboard = {\n    \"dashboard\": {\n      \"annotations\": {\n        \"list\": [\n          {\n            \"builtIn\": 1,\n            \"datasource\": {\n              \"type\": \"grafana\",\n              \"uid\": \"-- Grafana --\"\n            },\n            \"enable\": true,\n            \"hide\": true,\n            \"iconColor\": \"rgba(0, 211, 255, 1)\",\n            \"name\": \"Annotations & Alerts\",\n            \"type\": \"dashboard\"\n          }\n        ]\n      },\n      \"editable\": true,\n      \"fiscalYearStartMonth\": 0,\n      \"graphTooltip\": 0,\n      \"links\": [],\n      \"panels\": [],\n      \"preload\": false,\n      \"refresh\": refreshValue,         // es. \"5s\"\n      \"schemaVersion\": 1,\n      \"tags\": [],\n      \"templating\": { \"list\": [] },\n      \"time\": { \"from\": \"now-15m\", \"to\": \"now\" },\n      \"timepicker\": {},\n      \"timezone\": \"browser\",\n      \"title\": `IoT Sensors Dashboard - Field ${fieldId}`,\n      \"uid\": `iot-sensors-00${fieldId}`,  // uid univoco\n      \"version\": 31, // o 1, come preferisci\n      \"weekStart\": \"\"\n    },\n    \"folderUid\": \"SA-FMS\",\n    \"isFolder\": false,\n    \"overwrite\": true\n  };\n\n  // (1) Row \"Overview\"\n  baseDashboard.dashboard.panels.push(buildOverviewRow());\n  // (2) Text panel\n  baseDashboard.dashboard.panels.push(buildTextPanel(fieldId, sensors));\n  // (3) All Alerts row\n  const alertsPanels = buildAllAlertsRow(fieldId);\n  baseDashboard.dashboard.panels.push(...alertsPanels);\n\n  // Aggiunge i blocchi sensori *solo* se sensors.xxx = true\n  if (sensors.temperature) {\n    baseDashboard.dashboard.panels.push(...buildTemperaturePanels(fieldId, thresholds.temperature));\n  }\n  if (sensors.humidity) {\n    baseDashboard.dashboard.panels.push(...buildHumidityPanels(fieldId, thresholds.humidity));\n  }\n  if (sensors.soilMoisture) {\n    baseDashboard.dashboard.panels.push(...buildSoilMoisturePanels(fieldId, thresholds.soilMoisture));\n  }\n  if (sensors.ph) {\n    baseDashboard.dashboard.panels.push(...buildPhPanels(fieldId, thresholds.ph));\n  }\n  if (sensors.salinity) {\n    baseDashboard.dashboard.panels.push(...buildSalinityPanels(fieldId, thresholds.salinity));\n  }\n  if (sensors.rain) {\n    baseDashboard.dashboard.panels.push(...buildRainPanels(fieldId, thresholds.rain));\n  }\n\n  return baseDashboard;\n}\n\n/***************************************************************\n * FUNZIONE PRINCIPALE NODO\n ***************************************************************/\n\nlet conf = {\n  \"initialWeather\": \"CLOUDY\",\n  \"fields\": [\n    {\n      \"fieldId\": 10,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 11,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 12,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 13,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 14,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 15,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 16,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 17,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 18,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 19,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 20,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 21,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 22,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 23,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 24,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 25,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 26,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 27,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 28,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 29,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 30,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 31,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 32,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 33,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 34,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 35,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 36,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 37,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 38,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 39,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 40,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    }\n  ],\n  \"interval\": 5000\n};\n\n// let input = global.get(\"configuration\") || conf;\nlet input = conf;\n\nlet thresholdConfig = {\n  \"soilMoisture\": {\n    \"min\": 20,\n    \"max\": 80\n  },\n  \"temperature\": {\n    \"min\": 0,\n    \"max\": 35\n  },\n  \"ph\": {\n    \"min\": 5.5,\n    \"max\": 7.5\n  },\n  \"salinity\": {\n    \"min\": 200,\n    \"max\": 1500\n  },\n  \"humidity\": {\n    \"min\": 50,\n    \"max\": 90\n  },\n  \"rain\": {\n    \"max\": 40\n  }\n};\n\n\n// const thresholds = global.get(\"threshold\") || thresholdConfig;\n\nconst thresholds = global.get(\"threshold\") || thresholdConfig;\n\n// let thresholds = msg.payload;\n\n// Converte interval (ms) in stringa \"Xs\"\nlet refreshStr = convertIntervalToRefresh(input.interval);\n\n// Crea un array di dashboards\nlet dashboards = [];\n\nfor (let f of input.fields) {\n  let fieldId = f.fieldId;\n  let sensors = f.sensors;\n  // Crea una dashboard per questo field\n  let dash = buildDashboardForField(fieldId, sensors, refreshStr, thresholds);\n  dashboards.push(dash);\n}\n\nmsg.payload = dashboards;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "e6f73e050d413ded"
            ]
        ]
    },
    {
        "id": "e6f73e050d413ded",
        "type": "split",
        "z": "29769fa64d96c13b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 830,
        "y": 740,
        "wires": [
            [
                "99b3b4f5edb53215"
            ]
        ]
    },
    {
        "id": "99b3b4f5edb53215",
        "type": "http request",
        "z": "29769fa64d96c13b",
        "name": "Update dashboards with thresholds",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana-SA-FMS:3000/api/dashboards/db",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_aywkbU6h0zmuxdVSaR1tzGircIZNyZRc_9a73249a"
            }
        ],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "354014e8d7d564f1",
                "b202e054b280b59a"
            ]
        ]
    },
    {
        "id": "bc65cd150f89a6e5",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 740,
        "wires": []
    },
    {
        "id": "842875a2dfc1451d",
        "type": "catch",
        "z": "29769fa64d96c13b",
        "name": "",
        "scope": [
            "99b3b4f5edb53215"
        ],
        "uncaught": false,
        "x": 670,
        "y": 640,
        "wires": [
            [
                "ed5e9bd412b364d0"
            ]
        ]
    },
    {
        "id": "ed5e9bd412b364d0",
        "type": "delay",
        "z": "29769fa64d96c13b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 640,
        "wires": [
            [
                "99b3b4f5edb53215",
                "fdd69484a86eb7c1"
            ]
        ]
    },
    {
        "id": "43cb981dbf490612",
        "type": "inject",
        "z": "29769fa64d96c13b",
        "name": "Update visual thresholds ancd alert rules",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "bb72c6ea5544905a"
            ]
        ]
    },
    {
        "id": "fdd69484a86eb7c1",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 640,
        "wires": []
    },
    {
        "id": "354014e8d7d564f1",
        "type": "function",
        "z": "29769fa64d96c13b",
        "name": "function 7",
        "func": "let defaultConfiguration = {\n  \"initialWeather\": \"CLOUDY\",\n  \"fields\": [\n    {\n      \"fieldId\": 10,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 11,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 12,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 13,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 14,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 15,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 16,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 17,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 18,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 19,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 20,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 21,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 22,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 23,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 24,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 25,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 26,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 27,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 28,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 29,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 30,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 31,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 32,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 33,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 34,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 35,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 36,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 37,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 38,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 39,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    },\n    {\n      \"fieldId\": 40,\n      \"sensors\": {\n        \"soilMoisture\": false,\n        \"temperature\": true,\n        \"ph\": false,\n        \"salinity\": false,\n        \"humidity\": false,\n        \"rain\": false\n      }\n    }\n  ],\n  \"interval\": 5000\n};\n\n// Recupera la configurazione globale\nlet configuration = defaultConfiguration;\n\n// Calcola il numero totale di sensori attivi\nlet totalActiveSensors = 0;\n\nconfiguration.fields.forEach(field => {\n  totalActiveSensors += 1;\n});\n\nconst catchableErrors = [\n  \"ENOTFOUND\",\n  \"ECONNRESET\",\n  \"ETIMEDOUT\",\n  \"EHOSTUNREACH\",\n  \"ECONNREFUSED\",\n  \"EAI_AGAIN\"\n];\n\nif (typeof msg.statusCode !== \"string\" && !catchableErrors.includes(msg.statusCode)) {\n\n  // Mantieni un contatore nel contesto\n  let count = context.get('count') || 0;\n  count += 1;\n\n  node.error(totalActiveSensors + \" \" + count);\n\n  // Controlla se il numero di messaggi ricevuti è uguale al numero di sensori attivi\n  if (count >= totalActiveSensors) {\n    context.set('count', 0); // Reset del contatore\n    msg.payload = \"Done!\"\n    return msg; // Invia il messaggio\n\n  } else {\n\n    context.set('count', count); // Aggiorna il contatore\n    return null; // Non inviare nulla\n\n  }\n} else {\n\n  return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 740,
        "wires": [
            [
                "bc65cd150f89a6e5"
            ]
        ]
    },
    {
        "id": "b202e054b280b59a",
        "type": "debug",
        "z": "29769fa64d96c13b",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 840,
        "wires": []
    }
]