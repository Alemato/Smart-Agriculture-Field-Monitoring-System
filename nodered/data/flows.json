[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Control Simulation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bb32693f1e238fb3",
        "type": "tab",
        "label": "Telegram Comands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "042284347e59efcf",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cbf2748df1bc57f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "influxdb-SA-FMS",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "227d6c6a69368223",
        "type": "telegram bot",
        "botname": "Smart Agriculture - Field Monitoring System",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "24f8f90e89fb0dcc",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "mosquitto-SA-FMS",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "fd97571756e8622f",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/test",
        "payload": "BOT_TOKEN",
        "payloadType": "env",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "097e2d6989399613",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "cb6b0d28c0aa678b",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/test",
        "payload": "test",
        "payloadType": "str",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "097e2d6989399613",
                "c405962fedb7682e"
            ]
        ]
    },
    {
        "id": "c405962fedb7682e",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 750,
        "y": 400,
        "wires": []
    },
    {
        "id": "ca7dd771e06aa4dc",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "topic/ingresso1",
        "payload": "ingresso_1",
        "payloadType": "str",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "47466fb73c3d100d",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "topic/ingresso2",
        "payload": "ingresso_2",
        "payloadType": "str",
        "x": 230,
        "y": 520,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "5f5b4c025a4cf87f",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "topic/ingresso3",
        "payload": "ingresso_3",
        "payloadType": "str",
        "x": 230,
        "y": 580,
        "wires": [
            [
                "097e2d6989399613",
                "c405962fedb7682e"
            ]
        ]
    },
    {
        "id": "49461cc568fe9a8e",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "topic/ingresso4",
        "payload": "ingresso_4",
        "payloadType": "str",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "4a79e693549f314c",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/config/get",
        "payload": "{\"initialWeather\":\"SUNNY\",\"fields\":[{\"fieldId\":1,\"sensors\":{\"soilMoisture\":true,\"temperature\":true,\"ph\":true,\"salinity\":false,\"humidity\":true,\"rain\":true},\"interval\":5000},{\"fieldId\":2,\"sensors\":{\"soilMoisture\":false,\"temperature\":true,\"ph\":false,\"salinity\":true,\"humidity\":true,\"rain\":false},\"interval\":10000}]}",
        "payloadType": "json",
        "x": 230,
        "y": 700,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "786abb0ad3be3afb",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "test/simulation/config",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "097e2d6989399613"
            ]
        ]
    },
    {
        "id": "6ffb6578101f98d9",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/start",
        "payload": "avvio",
        "payloadType": "str",
        "x": 220,
        "y": 760,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613",
                "c3658e8c395688ef"
            ]
        ]
    },
    {
        "id": "7e16ef8e85ef6056",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "sensors/simulation/stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensors/simulation/stop",
        "payload": "stop",
        "payloadType": "str",
        "x": 220,
        "y": 820,
        "wires": [
            [
                "c405962fedb7682e",
                "097e2d6989399613",
                "92afd731d3dbf926"
            ]
        ]
    },
    {
        "id": "c3658e8c395688ef",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "link out start sim",
        "mode": "link",
        "links": [
            "f1db4e2770ca5997"
        ],
        "x": 625,
        "y": 760,
        "wires": []
    },
    {
        "id": "92afd731d3dbf926",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "link out stop sim",
        "mode": "link",
        "links": [
            "44df0d1686a26b90"
        ],
        "x": 625,
        "y": 820,
        "wires": []
    },
    {
        "id": "e1ef453bd63ae7bb",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "4e14f0c4c6142568"
            ],
            []
        ]
    },
    {
        "id": "4e14f0c4c6142568",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "/help",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar storedChats = flow.get('chats') || []; // Recupera i dati salvati per le chat o un array vuoto.\nvar chats = new Map(storedChats);\nif (!chats.has(chatContextKey)) {\n    chats.set(chatContextKey, true);\n    flow.set('chats', Array.from(chats.entries()));\n}\n\nvar helpMessage = \"\\n\";\nhelpMessage += \"\\nYou are welcome: <strong>\" + msg.originalMessage.from.username + \"</strong>\";\nhelpMessage += \"\\nThis Bot will allow you to manage the entire <strong>Smart Agriculture - Field Monitoring System</strong> project simulation.\"\nhelpMessage += \"\\n\";\nhelpMessage += \"\\nYour chat id is <strong>\" + chatId + \"</strong>\";\nhelpMessage += \"\\n\";\nhelpMessage += chats.has(chatContextKey) && chats.get(chatContextKey) ? \"\\nAlerts have been <strong>activated</strong> for this chat!\" : \"\\nAlerts have been <strong>deactivated</strong> for this chat!\";\nhelpMessage += \"\\n\";\n\nhelpMessage += \"\\nHere is a short list of commands:\";\nhelpMessage += \"\\n/help - Shows Help Messagge.\";\nhelpMessage += \"\\n/set_simulation - Set all simumaltion parameters.\";\nhelpMessage += \"\\n/update_simulation_condition - Update the simulation condition.\"\nhelpMessage += \"\\n/current_configuration - Gets the current configuration of the sensor simulator.\"\nhelpMessage += \"\\n/toggle_alert - Enable or disable the reception of alerts.\"\n\nhelpMessage += \"\\n\";\n\n\n\nmsg.payload.content = helpMessage;\nmsg.payload.options = {\n    parse_mode: 'HTML'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "2e0f652a39c75081"
            ]
        ]
    },
    {
        "id": "2e0f652a39c75081",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "ada578badb666345"
            ]
        ]
    },
    {
        "id": "549bf0869dbbd4e3",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/help",
        "description": "Show Helper",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "4e14f0c4c6142568"
            ],
            []
        ]
    },
    {
        "id": "ada578badb666345",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "Sender",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "ac765d6f9de4dc68",
        "type": "catch",
        "z": "bb32693f1e238fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "583ccf3067d7ba51"
            ]
        ]
    },
    {
        "id": "583ccf3067d7ba51",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "catch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "286f27e7f2a30e5b",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/set_simulation",
        "description": "Set all the settings of the sensor simulator",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "07fa96347a7bd9a9"
            ],
            []
        ]
    },
    {
        "id": "07fa96347a7bd9a9",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard SetSimulation Step 0 ",
        "func": "var opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Yes\",\n                    \"callback_data\": \"S0 YES\"\n                },\n                {\n                    \"text\": \"No\",\n                    \"callback_data\": \"S0 NO\"\n                }]\n            ]\n  })\n};\nmsg.payload.content = 'Are you sure you want to set a different agricultural field simulation?';\nmsg.payload.options = opts;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "3d9ca55109792442"
            ]
        ]
    },
    {
        "id": "3d9ca55109792442",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "ece669d52b049dd7"
            ]
        ]
    },
    {
        "id": "ece669d52b049dd7",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageId = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nnode.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 260,
        "wires": []
    },
    {
        "id": "2587aecf2d9cafb2",
        "type": "telegram event",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "event": "callback_query",
        "autoanswer": false,
        "x": 280,
        "y": 1500,
        "wires": [
            [
                "94b59fc68cf6bccd"
            ]
        ]
    },
    {
        "id": "a2fe17dca5d86712",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "SCancel \\n S0 \\n S1 \\n S2 \\n S3 \\n S4 \\n S5 \\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "SCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^S0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S5",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 660,
        "y": 1500,
        "wires": [
            [
                "fd921968d712568a"
            ],
            [
                "802ed589f7c585ee"
            ],
            [
                "66e574831f702cd4"
            ],
            [
                "a9f704d0090e9cb0"
            ],
            [
                "c9a56ef7f94a25f7"
            ],
            [
                "69d9ae7795d0e005"
            ],
            [
                "3b1d37ce65c4a985"
            ],
            []
        ]
    },
    {
        "id": "802ed589f7c585ee",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard SetSimulation Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"FOO YES\" o \"FOO NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"S0 YES\") {\n    newText = \"Great, let's get started!!! \\r\\nHow many agricultural fields do you want to simulate this time?\";\n} else if (userChoice === \"S0 NO\") {\n    newText = \"OK, you can reuse the /setsimulation command when you are ready to change the simulation settings!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\n// Prepara il messaggio per modificare il testo e rimuovere la tastiera inline\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"1️⃣\",\n            \"callback_data\": \"S1 1\"\n            },\n            {\n            \"text\": \"2️⃣\",\n            \"callback_data\": \"S1 2\"\n            },\n            {\n            \"text\": \"3️⃣\",\n            \"callback_data\": \"S1 3\"\n            }\n        ],\n        [\n            {\n            \"text\": \"4️⃣\",\n            \"callback_data\": \"S1 4\"\n            },\n            {\n            \"text\": \"5️⃣\",\n            \"callback_data\": \"S1 5\"\n            },\n            {\n            \"text\": \"6️⃣\",\n            \"callback_data\": \"S1 6\"\n            }\n            ],\n            [{\n                \"text\": \"❌   ABORT   ❌\",\n                \"callback_data\": \"SCancel\"\n            }\n    ]] // Modifica la tastiera\n});\n\nif (userChoice === \"S0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageId\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageId\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageId;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1440,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "7da069185bf6891a",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "fd921968d712568a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort SetSimulation",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar settingSimulationContext = chatContext.settingSimulationContext;\nif (settingSimulationContext){\n    delete chatContext.settingSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /set_simulation command when you are ready to change the simulation settings!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageId\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageId;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1400,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "66e574831f702cd4",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva il numero di campi e presenta Keyboard Step 2 Sensori",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar settingSimulationContext = chatContext.settingSimulationContext || {};\nsettingSimulationContext.newSetting = {\n    total_field: parseInt(msg.payload.content.split(\" \")[1]),\n    courrent_field: 1,\n    next_field: parseInt(msg.payload.content.split(\" \")[1]) > 1 ? 2 : 1\n};\n\n\nchatContext.settingSimulationContext = settingSimulationContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: settingSimulationContext=\" + JSON.stringify(settingSimulationContext));\n\n\nvar newText = \"OK, we have \"+ msg.payload.content.split(\" \")[1] +\" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nLet's start with field number 1. \\r\\nSelect the sensors that are present on field number 1:\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"📡 ALL SENSORS @ FIELD 1 📡\",\n                    \"callback_data\": \"S2 ALL 1\"\n                }],\n                [\n                {\n                    \"text\": \"🔲 Soil Moisture\",\n                    \"callback_data\": \"S2 11 1\"\n                },\n                {\n                    \"text\": \"🔲 Temperature\",\n                    \"callback_data\": \"S2 21 1\"\n                }],\n                [\n                {\n                    \"text\": \"🔲 Soil Ph\",\n                    \"callback_data\": \"S2 31 1\"\n                },\n                {\n                    \"text\": \"🔲 Water Salinity\",\n                    \"callback_data\": \"S2 41 1\"\n                }],\n                [\n                {\n                    \"text\": \"🔲 Relative Humidity\",\n                    \"callback_data\": \"S2 51 1\"\n                },\n                {\n                    \"text\": \"🔲 Rainfall\",\n                    \"callback_data\": \"S2 61 1\"\n                }],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"SCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageId\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1480,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "a2103770cb63c5b0",
        "type": "comment",
        "z": "bb32693f1e238fb3",
        "name": "SET SIMULATION \\n \\n SCancel \\n The SCancel step is used to cancel the process of creating a new setting.\\n \\n S0\\n The S0 step is used to ask the user if they wish to start a new setting.\\n \\n S1\\n Step S1 is for specifying the number of farm fields, between 1 and 6.\\n \\n S2\\n Step S2 allows the user to indicate which sensors are present in each agricultural field.\\n  This step is iterated until the S2 OK or S2 ALL command is received.\\n \\n S2 OK and S2 ALL\\n Steps S2 OK and S2 ALL are used to confirm the selection of sensors for the current agricultural field.\\n \\n S3\\n Step S3 is used to define the starting climatic conditions that will be applied to all agricultural fields in the simulation.\\n \\n S4\\n Step S4 presents a summary of the configuration and requires confirmation to proceed.\\n \\n S5\\n Step S5 concludes the process of creating a new setting by sending it to the simulation server.",
        "info": "# Italiano\n---\n\n# SCancel\nLo step **SCancel** serve per annullare il processo di creazione di un nuovo settaggio.\n\n# S0\nLo step **S0** serve per chiedere all'utente se desidera iniziare un nuovo settaggio.\n\n# S1\nLo step **S1** consente di specificare il numero di campi agricoli, compreso tra 1 e 6.\n\n# S2\nLo step **S2** permette di indicare quali sensori sono presenti in ciascun campo agricolo.\n\nQuesto step viene iterato fino a ricevere il comando **S2 OK** o **S2 ALL**.\n\n# S2 OK e S2 ALL\nGli step **S2 OK** e **S2 ALL** servono per confermare la selezione dei sensori per il campo agricolo corrente.\n\n# S3\nLo step **S3** consente di definire le condizioni climatiche di partenza che saranno applicate a tutti i campi agricoli nella simulazione.\n\n# S4\nLo step **S4** presenta un riepilogo della configurazione e richiede conferma per procedere.\n\n# S5\nLo step **S5** conclude il processo di creazione di un nuovo settaggio, inviandolo al server di simulazione.\n\n<br><br><br>\n\n# English\n---\n# SCancel\nThe **SCancel** step is used to cancel the process of creating a new setting.\n\n# S0\nThe **S0** step is used to ask the user if they wish to start a new setting.\n\n# S1\nStep **S1** is for specifying the number of farm fields, between 1 and 6.\n\n# S2\nStep **S2** allows the user to indicate which sensors are present in each agricultural field.\n\nThis step is iterated until the **S2 OK** or **S2 ALL** command is received.\n\n# S2 OK and S2 ALL\nSteps **S2 OK** and **S2 ALL** are used to confirm the selection of sensors for the current agricultural field.\n\n# S3\nStep **S3** is used to define the starting climatic conditions that will be applied to all agricultural fields in the simulation.\n\n# S4\nStep **S4** presents a summary of the configuration and requires confirmation to proceed.\n\n# S5\nStep **S5** concludes the process of creating a new setting by sending it to the simulation server.",
        "x": 990,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2f75cbe1fc45b92d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva, check next_field, question weather",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)){\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// Inizializza fields_configuration come un dizionario (oggetto) se non esiste\nvar fields_configuration = newSetting.fields_configuration || {};\n\n// S2 ALL #F  \nvar messageCode = msg.payload.content.split(\" \");\nvar command = messageCode[1];\nswitch(command){\n    case \"ALL\":\n        fields_configuration[newSetting.courrent_field] = {\n            soilMoisture: true,\n            temperature: true,\n            soilPh: true,\n            waterSalinity: true,\n            relativeHumidity: true,\n            rainfall: true\n        };\n        newSetting.fields_configuration = fields_configuration;\n        break;\n    case \"OK\":\n        break;\n}\n\nif (chatContext.settingSimulationContext.newSetting.total_field > chatContext.settingSimulationContext.newSetting.courrent_field) {\n      chatContext.settingSimulationContext.newSetting.courrent_field = chatContext.settingSimulationContext.newSetting.courrent_field + 1;  \n    \n    // Presentare nuova keyboard per il prossimo campo\n\n    var newText = \"OK, we have \" + chatContext.settingSimulationContext.newSetting.total_field + \" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nSelect the sensors that are present on field number \" + chatContext.settingSimulationContext.newSetting.courrent_field +\" :\";\n\n    // Base dell'inline_keyboard\n    var inline_keyboard = [\n        [\n            {\n                \"text\": \"📡 ALL SENSORS @ FIELD \" + newSetting.courrent_field + \" 📡\",\n                \"callback_data\": \"S2 ALL \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Soil Moisture\",\n                \"callback_data\": \"S2 11 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Temperature\",\n                \"callback_data\": \"S2 21 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Soil Ph\",\n                \"callback_data\": \"S2 31 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Water Salinity\",\n                \"callback_data\": \"S2 41 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"🔲 Relative Humidity\",\n                \"callback_data\": \"S2 51 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            },\n            {\n                \"text\": \"🔲 Rainfall\",\n                \"callback_data\": \"S2 61 \" + chatContext.settingSimulationContext.newSetting.courrent_field\n            }\n        ],\n        [\n            {\n                \"text\": \"❌   ABORT   ❌\",\n                \"callback_data\": \"SCancel\"\n            }\n        ]\n    ];\n\n    // Converti in JSON\n    var reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\n    var options = {\n            chat_id: msg.payload.chatId,\n            reply_markup: reply_markup,\n            message_id: chatContext.messageId\n        };\n\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    return msg;\n}\n\nvar newText = \"Great! \\r\\nWe have finished the configuration related to the sensors on the agricultural fields! \\r\\nNow you need to decide what weather condition is present on your farmland. \\r\\n\\r\\nSelect one of the following conditions: \";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"☀️ Sunny ☀️\",\n            \"callback_data\": \"S3 SUNNY\"\n        }],\n    [\n        {\n            \"text\": \"☁️ Cloudy ☁️\",\n            \"callback_data\": \"S3 CLOUDY \"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌦️ Light Rain 🌦️\",\n            \"callback_data\": \"S3 LIGHT_RAIN \"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌧️ Moderate Rain 🌧️\",\n            \"callback_data\": \"S3 MODERATE_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"⛈️ Heavy Rain ⛈️\",\n            \"callback_data\": \"S3 HEAVY_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌀 Hurricane 🌀\",\n            \"callback_data\": \"S3 HURRICANE\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }]\n    ]\n});\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageId\n    };\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1540,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "a9f704d0090e9cb0",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "S2 OK \\n S2 ALL \\n S2",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^S2 OK",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^S2 ALL",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 880,
        "y": 1560,
        "wires": [
            [
                "2f75cbe1fc45b92d"
            ],
            [
                "2f75cbe1fc45b92d"
            ],
            [
                "11a5c5289706988e"
            ]
        ]
    },
    {
        "id": "11a5c5289706988e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva, cambia stato alla keyboard",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)){\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S2 11 #F  \nvar messageCode = msg.payload.content.split(\" \");\n\n// Inizializza fields_configuration come un dizionario (oggetto) se non esiste\nvar fields_configuration = newSetting.fields_configuration || {};\n\n// Assicurati che la chiave corrente esista in fields_configuration\nif (!fields_configuration[newSetting.courrent_field]) {\n    fields_configuration[newSetting.courrent_field] = {\n        soilMoisture: false,\n        temperature: false,\n        soilPh: false,\n        waterSalinity: false,\n        relativeHumidity: false,\n        rainfall: false\n    };\n}\n\n// Verifica che il campo specificato nel messaggio corrisponda al campo corrente\nif (parseInt(messageCode[2]) !== newSetting.courrent_field) {\n    console.warn(\"Il campo non corrisponde al campo corrente\");\n}\n\n// Determina il sensore e il valore booleano dal codice sensore\nvar sensorType = messageCode[1][0]; // Primo carattere del secondo elemento\nvar sensorValue = messageCode[1][1] === \"1\"; // Converte \"1\" in true e \"0\" in false\n\n// Utilizza il primo carattere di messageCode[1] per aggiornare i valori\nswitch (sensorType) {\n    case \"1\":\n        fields_configuration[newSetting.courrent_field].soilMoisture = sensorValue;\n        break;\n    case \"2\":\n        fields_configuration[newSetting.courrent_field].temperature = sensorValue;\n        break;\n    case \"3\":\n        fields_configuration[newSetting.courrent_field].soilPh = sensorValue;\n        break;\n    case \"4\":\n        fields_configuration[newSetting.courrent_field].waterSalinity = sensorValue;\n        break;\n    case \"5\":\n        fields_configuration[newSetting.courrent_field].relativeHumidity = sensorValue;\n        break;\n    case \"6\":\n        fields_configuration[newSetting.courrent_field].rainfall = sensorValue;\n        break;\n}\n\nnewSetting.fields_configuration = fields_configuration;\n\nvar iconS1 = fields_configuration[newSetting.courrent_field].soilMoisture ? \"✅\" : \"🔲\";\nvar valS1 = fields_configuration[newSetting.courrent_field].soilMoisture ? \"0\": \"1\";\n\nvar iconS2 = fields_configuration[newSetting.courrent_field].temperature ? \"✅\" : \"🔲\";\nvar valS2 = fields_configuration[newSetting.courrent_field].temperature ? \"0\": \"1\";\n\nvar iconS3 = fields_configuration[newSetting.courrent_field].soilPh ? \"✅\" : \"🔲\";\nvar valS3 = fields_configuration[newSetting.courrent_field].soilPh ? \"0\": \"1\";\n\nvar iconS4 = fields_configuration[newSetting.courrent_field].waterSalinity ? \"✅\" : \"🔲\";\nvar valS4 = fields_configuration[newSetting.courrent_field].waterSalinity ? \"0\": \"1\";\n\nvar iconS5 = fields_configuration[newSetting.courrent_field].relativeHumidity ? \"✅\" : \"🔲\";\nvar valS5 = fields_configuration[newSetting.courrent_field].relativeHumidity ? \"0\": \"1\";\n\nvar iconS6 = fields_configuration[newSetting.courrent_field].rainfall ? \"✅\" : \"🔲\";\nvar valS6 = fields_configuration[newSetting.courrent_field].rainfall ? \"0\": \"1\";\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"📡 ALL SENSORS @ FIELD \" + newSetting.courrent_field + \" 📡\",\n            \"callback_data\": \"S2 ALL \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS1 + \" Soil Moisture\",\n            \"callback_data\": \"S2 1\" + valS1 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS2 + \" Temperature\",\n            \"callback_data\": \"S2 2\" + valS2 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS3 + \" Soil Ph\",\n            \"callback_data\": \"S2 3\" + valS3 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS4 + \" Water Salinity\",\n            \"callback_data\": \"S2 4\" + valS4 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": iconS5 + \" Relative Humidity\",\n            \"callback_data\": \"S2 5\" + valS5 + \" \" + newSetting.courrent_field\n        },\n        {\n            \"text\": iconS6 + \" Rainfall\",\n            \"callback_data\": \"S2 6\" + valS6 + \" \" + newSetting.courrent_field\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n\n// Aggiungi un altro pulsante accanto ad ABORT per il prossimo campo\nif (chatContext.settingSimulationContext.newSetting.total_field == chatContext.settingSimulationContext.newSetting.courrent_field) { // Sostituisci `someCondition` con la tua condizione\n    node.warn(\"ESEGUO BOTTONE CONFIRMATION\");\n    inline_keyboard[inline_keyboard.length - 1].push({\n        \"text\": \"✔️ CONFIRMATION ✔️\",\n        \"callback_data\": \"S2 OK \" + newSetting.courrent_field\n    });\n} else {\n    inline_keyboard[inline_keyboard.length - 1].push({\n                \"text\": \"🏞️ 🚜 NEXT FIELD 🚜 🏞️\",\n                \"callback_data\": \"S2 OK \" + newSetting.courrent_field\n            });\n}\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageId\n    };\n\nvar newText = \"OK, we have \" + newSetting.total_field + \" farmlands! Great! \\r\\nNow we have to decide which sensors will be on the fields. \\r\\nSelect the sensors that are present on field number \" + newSetting.courrent_field  + \" :\";\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1580,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "c9a56ef7f94a25f7",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva e prensenta interval",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)){\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S3 HURRICANE  \nvar messageCode = msg.payload.content.split(\" \");\n\nnewSetting.initialWeather = messageCode[1];\n\nchatContext.settingSimulationContext.newSetting = newSetting;\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"DEFAULT 5 sec\",\n            \"callback_data\": \"S4 5000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"1 sec\",\n            \"callback_data\": \"S4 1000\"\n        },\n        {\n            \"text\": \"2 sec\",\n            \"callback_data\": \"S4 2000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"10 sec\",\n            \"callback_data\": \"S4 10000\"\n        },\n        {\n            \"text\": \"15 sec\",\n            \"callback_data\": \"S4 15000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30 sec\",\n            \"callback_data\": \"S4 30000\"\n        },\n        {\n            \"text\": \"1 min\",\n            \"callback_data\": \"S4 60000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageId\n    };\n\nvar newText = \"Excellent! \\r\\n\\r\\nNow all that remains is to determine how often the sensors will update. \\r\\n\\r\\nSelect the time interval from those present:\";\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1660,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "69d9ae7795d0e005",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva e fa il riepilogo della configurazione",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)){\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\n// S4 5000  \nvar messageCode = msg.payload.content.split(\" \");\n\nnewSetting.interval = messageCode[1];\n\nchatContext.settingSimulationContext.newSetting = newSetting;\n\nvar input = newSetting;\n\nvar result = {\n    initialWeather: input.initialWeather,\n    fields: Object.entries(input.fields_configuration).map(([fieldId, sensors]) => ({\n        fieldId: parseInt(fieldId, 10), // Converti la chiave in numero\n        sensors: {\n            soilMoisture: sensors.soilMoisture,\n            temperature: sensors.temperature,\n            ph: sensors.soilPh, // Rinominato da soilPh a ph\n            salinity: sensors.waterSalinity, // Rinominato da waterSalinity a salinity\n            humidity: sensors.relativeHumidity, // Rinominato da relativeHumidity a humidity\n            rain: sensors.rainfall // Rinominato da rainfall a rain\n        }\n    })),\n    interval: parseInt(input.interval, 10)\n};\n\n\n//var newText = \"Excellent! \\r\\nThis is a summary of the configuration. ``` \\r\\n \" + JSON.stringify(result, null, 2) +  \"\\r\\n```  \\r\\nDo you want to confirm?\";\nvar newText = \"Excellent!\\r\\nThis is a summary of the configuration:<pre>\" + JSON.stringify(result, null, 2) + \"</pre>Do you want to confirm?\";\n\n// Base dell'inline_keyboard\nvar inline_keyboard = [\n    [\n        {\n            \"text\": \"Yes\",\n            \"callback_data\": \"S5\"\n        },\n        {\n            \"text\": \"NO\",\n            \"callback_data\": \"SCancel\"\n        }\n    ]\n];\n\n// Converti in JSON\nvar reply_markup = JSON.stringify({ \"inline_keyboard\": inline_keyboard });\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    parse_mode: 'HTML',\n    reply_markup: reply_markup,\n    message_id: chatContext.messageId\n};\n\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1720,
        "wires": [
            [
                "7da069185bf6891a"
            ]
        ]
    },
    {
        "id": "3b1d37ce65c4a985",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia il json MQTT",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageId) {\n    node.error(\"Message ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nif (!chatContext.settingSimulationContext || !chatContext.settingSimulationContext.newSetting || !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field) || !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field)) {\n    node.error(\"settingSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!chatContext.settingSimulationContext: \" + !chatContext.settingSimulationContext);\n    node.error(\"!chatContext.settingSimulationContext.newSetting: \" + !chatContext.settingSimulationContext.newSetting);\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.total_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.courrent_field));\n    node.error(\"!Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field): \" + !Number.isInteger(chatContext.settingSimulationContext.newSetting.next_field));\n    return null;\n}\n\nif (!chatContext.settingSimulationContext.newSetting.fields_configuration && chatContext.settingSimulationContext.newSetting.total_field > 1 && chatContext.settingSimulationContext.newSetting.courrent_field > 1) {\n    node.error(\"fields_configuration non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar replyText = \"Configuration Saved and Sent to Server!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: replyText\n    }\n};\n\nvar deleteInlineMessage = {\n    // msg.payload.type = 'deleteMessage';\n    // msg.payload.content = idMessage\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageId\n    }\n};\n\nvar newSetting = chatContext.settingSimulationContext.newSetting;\n\nvar input = newSetting;\n\nvar result = {\n    initialWeather: input.initialWeather,\n    fields: Object.entries(input.fields_configuration).map(([fieldId, sensors]) => ({\n        fieldId: parseInt(fieldId, 10), // Converti la chiave in numero\n        sensors: {\n            soilMoisture: sensors.soilMoisture,\n            temperature: sensors.temperature,\n            ph: sensors.soilPh, // Rinominato da soilPh a ph\n            salinity: sensors.waterSalinity, // Rinominato da waterSalinity a salinity\n            humidity: sensors.relativeHumidity, // Rinominato da relativeHumidity a humidity\n            rain: sensors.rainfall // Rinominato da rainfall a rain\n        }\n    })),\n    interval: parseInt(input.interval, 10)\n};\n\nvar congifMessage = {\n    payload: result,\n    topic: 'sensors/simulation/config'\n}\n\nreturn [sendTextMessage, deleteInlineMessage, congifMessage];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1780,
        "wires": [
            [
                "7da069185bf6891a"
            ],
            [
                "7da069185bf6891a"
            ],
            [
                "a1bcd6bd9e3c2553"
            ]
        ]
    },
    {
        "id": "a1bcd6bd9e3c2553",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 1490,
        "y": 1600,
        "wires": []
    },
    {
        "id": "15566d22a530722b",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/current_configuration",
        "description": "Gets the current configuration of the sensor simulator",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "2c71e861f8e05533"
            ],
            []
        ]
    },
    {
        "id": "ba126469fe6188bd",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config/get",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 860,
        "y": 380,
        "wires": []
    },
    {
        "id": "2c71e861f8e05533",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva il idMessaggio",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdCurrentConfig = msg.payload.messageId;\n\nflow.set(chatContextKey, chatContext);\n\nnode.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\nmsg.payload = \"GET CURRENT CONFIGURATION\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "ba126469fe6188bd"
            ]
        ]
    },
    {
        "id": "cdbff278454bf9c3",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "rispondi con current Configuration",
        "func": "// Ottieni tutte le chiavi dal contesto flow\nvar allKeys = flow.keys();\n\n// Filtra solo le chiavi che iniziano con \"chat_\"\nvar chatKeys = allKeys.filter(key => key.startsWith(\"chat_\"));\n\n// Prepara un array per i messaggi da inviare\nvar messages = [];\n\n// Scorri tutte le chiavi delle chat e verifica se hanno messageIdCurrentConfig\nchatKeys.forEach(chatKey => {\n    var chatContext = flow.get(chatKey);\n    \n    // Verifica se la proprietà \"messageIdCurrentConfig\" esiste\n    if (chatContext && chatContext.messageIdCurrentConfig) {\n        // Prepara il messaggio per questa chat\n        var chatId = chatKey.replace(\"chat_\", \"\"); // Estrai l'ID della chat\n        messages.push({\n            chatId: parseInt(chatId, 10),\n            content: \"This is the current configuration of the simulation: <pre>\" + JSON.stringify(msg.payload, null, 2) + \"</pre>\",\n            type:\"message\",\n            options: {\n                parse_mode: \"HTML\",\n                reply_parameters: {\n                message_id: chatContext.messageIdCurrentConfig\n                }\n            },\n            \n        });\n    }\n});\n\n// Se ci sono messaggi da inviare, impostali come array in msg.payload\nif (messages.length > 0) {\n    var resp = {}\n    resp.payload = messages;\n    return resp; // Ritorna il messaggio per il successivo nodo\n} else {\n    node.warn(\"Nessuna chat con messageIdCurrentConfig trovata!\");\n    return null; // Nessun messaggio da inviare\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 440,
        "wires": [
            [
                "7c5624cbfaf2871e"
            ]
        ]
    },
    {
        "id": "3e32583081d0b615",
        "type": "mqtt in",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/config/current",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "cdbff278454bf9c3",
                "4694cfe12c3638e1"
            ]
        ]
    },
    {
        "id": "7c5624cbfaf2871e",
        "type": "split",
        "z": "bb32693f1e238fb3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 890,
        "y": 440,
        "wires": [
            [
                "a8dc04826bc75e23"
            ]
        ]
    },
    {
        "id": "a8dc04826bc75e23",
        "type": "change",
        "z": "bb32693f1e238fb3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 440,
        "wires": [
            [
                "a651ef8769d332eb"
            ]
        ]
    },
    {
        "id": "a651ef8769d332eb",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1230,
        "y": 440,
        "wires": [
            [
                "811941ebe4c7febb"
            ]
        ]
    },
    {
        "id": "4694cfe12c3638e1",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Saves the current simulation configuration",
        "func": "var currentConfigKey = \"simulation_configuration\";\nvar currentConfig = flow.get(currentConfigKey) || {};\ncurrentConfig = msg.payload;\nflow.set(currentConfigKey, currentConfig);\n\n// Debug\nnode.warn(\"Salvato nel Flow: currentConfigKey=\" + currentConfigKey + \", contenuto=\" + JSON.stringify(currentConfig));",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": []
    },
    {
        "id": "ea970c1f3fc66fa9",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/update_simulation_condition",
        "description": "Update the simulation condition",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "13a3112f682e27db"
            ],
            []
        ]
    },
    {
        "id": "13a3112f682e27db",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard UpdateCondition (Weather, interval, temperature, humidity) Step 0 ",
        "func": "var opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Yes\",\n                    \"callback_data\": \"W0 YES\"\n                },\n                {\n                    \"text\": \"No\",\n                    \"callback_data\": \"W0 NO\"\n                }]\n            ]\n  })\n};\nmsg.payload.content = 'Are you sure you want to change the simulation conditions?';\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "6ab25b14acc24d5c"
            ]
        ]
    },
    {
        "id": "6ab25b14acc24d5c",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "0478425b2bc2dea4"
            ]
        ]
    },
    {
        "id": "0478425b2bc2dea4",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdUpdateCondition nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdUpdateCondition = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nnode.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 320,
        "wires": []
    },
    {
        "id": "811941ebe4c7febb",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Delete messageIdCurrentConfig",
        "func": "// Ottieni tutte le chiavi dal contesto flow\nvar allKeys = flow.keys();\n\n// Filtra solo le chiavi che iniziano con \"chat_\"\nvar chatKeys = allKeys.filter(key => key.startsWith(\"chat_\"));\n\n// Prepara un array per i messaggi da inviare\nvar messages = [];\n\n// Scorri tutte le chiavi delle chat e verifica se hanno messageIdCurrentConfig\nchatKeys.forEach(chatKey => {\n    var chatContext = flow.get(chatKey);\n    \n    // Verifica se la proprietà \"messageIdCurrentConfig\" esiste\n    if (chatContext && chatContext.messageIdCurrentConfig) {\n        // Rimuovi la proprietà messageIdCurrentConfig\n        delete chatContext.messageIdCurrentConfig;\n        \n        flow.set(chatKey, chatContext);\n    }\n});\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 440,
        "wires": []
    },
    {
        "id": "dcd5787e50918357",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "WCancel\\n W0 \\n W1\\n W2\\n W3\\n W4\\n W5\\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "WCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^W0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W5",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 660,
        "y": 1960,
        "wires": [
            [
                "1bc4f96de1467796"
            ],
            [
                "dbf54bcb7d320d2e"
            ],
            [
                "18a2fd284157f87f"
            ],
            [
                "e81206999818d780"
            ],
            [
                "9a59d2a8666300df"
            ],
            [
                "33c1263aeb1a4a3b"
            ],
            [
                "1574fd2f535d0c2d"
            ],
            []
        ]
    },
    {
        "id": "94b59fc68cf6bccd",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "S\\n W\\n A\\n T\\n otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^S",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^W",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^A",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 460,
        "y": 1500,
        "wires": [
            [
                "a2fe17dca5d86712"
            ],
            [
                "dcd5787e50918357"
            ],
            [
                "da8d85276f3785ff"
            ],
            [
                "b247f120d5335c41"
            ],
            []
        ]
    },
    {
        "id": "1bc4f96de1467796",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort UpdateCondition",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\nif(chatContext.updateSimulationContext){\n    delete chatContext.updateSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /update_simulation_condition command when you are ready to change the simulation conditions!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdUpdateCondition\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageIdUpdateCondition;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1880,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "b58fcfa2f9d08c83",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "dbf54bcb7d320d2e",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard UpdateCondition Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"W0 YES\" o \"W1 NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"W0 YES\") {\n    newText = \"Great, let's get started!!! \\r\\nWhat weather condition is present on the fields?\";\n} else if (userChoice === \"W0 NO\") {\n    newText = \"OK, you can reuse the /update_simulation_condition command when you are ready to change the simulation conditions!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"☀️ Sunny ☀️\",\n            \"callback_data\": \"W1 SUNNY\"\n        }],\n    [\n        {\n            \"text\": \"☁️ Cloudy ☁️\",\n            \"callback_data\": \"W1 CLOUDY\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌦️ Light Rain 🌦️\",\n            \"callback_data\": \"W1 LIGHT_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌧️ Moderate Rain 🌧️\",\n            \"callback_data\": \"W1 MODERATE_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"⛈️ Heavy Rain ⛈️\",\n            \"callback_data\": \"W1 HEAVY_RAIN\"\n        }\n    ],\n    [\n        {\n            \"text\": \"🌀 Hurricane 🌀\",\n            \"callback_data\": \"W1 HURRICANE\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"WCancel\"\n        }]\n    ]\n});\n\nif (userChoice === \"W0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdUpdateCondition\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageIdUpdateCondition\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageIdUpdateCondition;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1920,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "18a2fd284157f87f",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 1, presenta step 2 temperatura",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar currentConfigKey = \"simulation_configuration\";\nvar currentConfig = flow.get(currentConfigKey) || {};\nvar updateSimulationContext = chatContext.updateSimulationContext || {};\nupdateSimulationContext = {\n    weather: msg.payload.content.split(\" \")[1],\n    interval: (typeof currentConfig.interval === 'number') ? currentConfig.interval : 5000, // default value\n    temperature: (typeof currentConfig.temperature === 'number') ? currentConfig.temperature : 24.5, // default value\n    humidity: (typeof currentConfig.humidity === 'number') ? currentConfig.humidity : 60.5 // default value\n};\n\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n\nvar weatherText;\n\nswitch (msg.payload.content) {\n    case \"W1 SUNNY\":\n        weatherText = \"☀️ Sunny ☀️\";\n        break;\n    case \"W1 CLOUDY\":\n        weatherText = \"☁️ Cloudy ☁️\";\n        break;\n    case \"W1 LIGHT_RAIN\":\n        weatherText = \"🌦️ Light Rain 🌦️\";\n        break;\n    case \"W1 MODERATE_RAIN\":\n        weatherText = \"🌧️ Moderate Rain 🌧️\";\n        break;\n    case \"W1 HEAVY_RAIN\":\n        weatherText = \"⛈️ Heavy Rain ⛈️\";\n        break;\n    case \"W1 HURRICANE\":\n        weatherText = \"🌀 Hurricane 🌀\";\n        break;\n    default:\n        weatherText = \"Unknown\";\n}\n\n\n\nvar newText = \"OK, the current weather is \" + weatherText +\" ! Great! \\r\\n Now we have to decide what outside temperature we have on agricultural fields!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"24.5°C (Deafult Temperature)\",\n                    \"callback_data\": \"W2 24.50\"\n                }],\n                [\n                {\n                    \"text\": \"-10°C\",\n                    \"callback_data\": \"W2 -10.01\"\n                },\n                {\n                    \"text\": \"-5°C\",\n                    \"callback_data\": \"W2 -5.01\"\n                },\n                {\n                    \"text\": \"0°C\",\n                    \"callback_data\": \"W2 0.01\"\n                },\n                {\n                    \"text\": \"5°C\",\n                    \"callback_data\": \"W2 5.01\"\n                }\n                ],\n                [  \n                {\n                    \"text\": \"10°C\",\n                    \"callback_data\": \"W2 10.01\"\n                },\n                {\n                    \"text\": \"15°C\",\n                    \"callback_data\": \"W2 15.01\"\n                },\n                {\n                    \"text\": \"20°C\",\n                    \"callback_data\": \"W2 20.01\"\n                },\n                {\n                    \"text\": \"25°C\",\n                    \"callback_data\": \"W2 25.01\"\n                }\n                ],\n                [\n                {\n                    \"text\": \"30°C\",\n                    \"callback_data\": \"W2 30.01\"\n                },\n                {\n                    \"text\": \"35°C\",\n                    \"callback_data\": \"W2 35.01\"\n                },\n                {\n                    \"text\": \"40°C\",\n                    \"callback_data\": \"W2 40.01\"\n                },\n                {\n                    \"text\": \"45°C\",\n                    \"callback_data\": \"W2 45.01\"\n                }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"WCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdUpdateCondition\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1960,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "e81206999818d780",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 2, presenta step 3 umidità",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.temperature = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nvar newText = \"OK, the current temperature is \" + weatherText +\" ! Great! \\r\\n Now we have to decide what is the external Humidity we have on agricultural fields!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"60.5% (Deafult Humidity)\",\n                    \"callback_data\": \"W3 60.5\"\n                }],\n                [\n                {\n                    \"text\": \"0%\",\n                    \"callback_data\": \"W3 0.01\"\n                },\n                {\n                    \"text\": \"10%\",\n                    \"callback_data\": \"W3 10.01\"\n                },\n                {\n                    \"text\": \"20%\",\n                    \"callback_data\": \"W3 20.01\"\n                },\n                {\n                    \"text\": \"30%\",\n                    \"callback_data\": \"W3 30.01\"\n                }\n                ],\n                [  \n                {\n                    \"text\": \"40%\",\n                    \"callback_data\": \"W3 40.01\"\n                },\n                {\n                    \"text\": \"45%\",\n                    \"callback_data\": \"W3 45.01\"\n                },\n                {\n                    \"text\": \"50%\",\n                    \"callback_data\": \"W3 50.01\"\n                },\n                {\n                    \"text\": \"55%\",\n                    \"callback_data\": \"W3 55.01\"\n                }\n                ],\n                [\n                {\n                    \"text\": \"60%\",\n                    \"callback_data\": \"W3 60.01\"\n                },\n                {\n                    \"text\": \"70%\",\n                    \"callback_data\": \"W3 70.01\"\n                },\n                {\n                    \"text\": \"80%\",\n                    \"callback_data\": \"W3 80.01\"\n                },\n                {\n                    \"text\": \"90%\",\n                    \"callback_data\": \"W3 90.01\"\n                }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"WCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdUpdateCondition\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2000,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "9a59d2a8666300df",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 3, presenta step 4 Interval",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.humidity = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nvar newText = \"OK, the current humidity is \" + weatherText +\" ! Excellent!\\r\\n Now all that remains is to determine how often the sensors will update. \\r\\n\\r\\nSelect the time interval from those present:\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [\n    [\n        {\n            \"text\": \"DEFAULT 5 sec\",\n            \"callback_data\": \"W4 5000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"1 sec\",\n            \"callback_data\": \"W4 1000\"\n        },\n        {\n            \"text\": \"2 sec\",\n            \"callback_data\": \"W4 2000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"10 sec\",\n            \"callback_data\": \"W4 10000\"\n        },\n        {\n            \"text\": \"15 sec\",\n            \"callback_data\": \"W4 15000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"30 sec\",\n            \"callback_data\": \"W4 30000\"\n        },\n        {\n            \"text\": \"1 min\",\n            \"callback_data\": \"W4 60000\"\n        }\n    ],\n    [\n        {\n            \"text\": \"❌   ABORT   ❌\",\n            \"callback_data\": \"WCancel\"\n        }\n    ]\n]});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdUpdateCondition\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2040,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "33c1263aeb1a4a3b",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 4, peresenta il riepilogo",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"Message ID (messageIdUpdateCondition) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\n\nif (!updateSimulationContext) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateSimulationContext.interval = parseInt(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateSimulationContext = updateSimulationContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateSimulationContext=\" + JSON.stringify(updateSimulationContext));\n\nvar weatherText = msg.payload.content.split(\" \")[1];\n\nswitch (msg.payload.content) {\n    case \"W4 5000\":\n        weatherText = \"5 sec\";\n        break;\n    case \"W4 1000\":\n        weatherText = \"1 sec\";\n        break;\n    case \"W4 2000\":\n        weatherText = \"2 sec\";\n        break;\n    case \"W4 10000\":\n        weatherText = \"10 sec\";\n        break;\n    case \"W4 15000\":\n        weatherText = \"15 sec\";\n        break;\n    case \"W4 30000\":\n        weatherText = \"30 sec\";\n        break;\n    case \"W4 60000\":\n        weatherText = \"1 min\";\n        break;\n    default:\n        weatherText = \"Unknown\";\n}\n\nvar newText = \"OK, the current interval is \" + weatherText +\" ! Excellent!\\r\\n This is a summary of the configuration:<pre>\"+ JSON.stringify(updateSimulationContext, null, 2) +\"</pre>Do you want to confirm?\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\":[\n    [\n        {\n            \"text\": \"YES\",\n            \"callback_data\": \"W5 YES\"\n        },\n        {\n            \"text\": \"NO\",\n            \"callback_data\": \"WCancel\"\n        }\n    ]\n]});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        parse_mode: 'HTML',\n        message_id: chatContext.messageIdUpdateCondition\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nflow.set(chatContextKey, chatContext);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2080,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ]
        ]
    },
    {
        "id": "1574fd2f535d0c2d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia il json MQTT",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdUpdateCondition) {\n    node.error(\"messageIdUpdateCondition ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = { ...chatContext.updateSimulationContext }; // Copia dell'oggetto\n\nif (!updateSimulationContext || !updateSimulationContext.weather || !Number.isInteger(updateSimulationContext.interval) || !(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)) || !(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity))) {\n    node.error(\"updateSimulationContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!updateSimulationContext.weather: \" + !updateSimulationContext.weather);\n    node.error(\"!Number.isInteger(updateSimulationContext.interval): \" + !Number.isInteger(updateSimulationContext.interval));\n    node.error(\"!(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)): \" + !(Number(updateSimulationContext.temperature) === updateSimulationContext.temperature && !Number.isInteger(updateSimulationContext.temperature)));\n    node.error(\"!(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity)): \" + !(Number(updateSimulationContext.humidity) === updateSimulationContext.humidity && !Number.isInteger(updateSimulationContext.humidity)));\n    return null;\n}\n\nvar replyText = \"Configuration Saved and Sent to Server!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: replyText\n    }\n};\n\nvar deleteInlineMessage = {\n    // msg.payload.type = 'deleteMessage';\n    // msg.payload.content = idMessage\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdUpdateCondition\n    }\n};\n\nvar result = {\n    weather: updateSimulationContext.weather,\n    interval: parseInt(updateSimulationContext.interval, 10),\n    temperature: parseFloat(updateSimulationContext.temperature),\n    humidity: parseFloat(updateSimulationContext.humidity)\n};\n\ndelete chatContext.updateSimulationContext;\ndelete chatContext.messageIdUpdateCondition;\n\nflow.set(chatContextKey, chatContext);\n\nvar congifMessage = {\n    payload: result,\n    topic: 'sensors/simulation/update'\n}\n\nreturn [sendTextMessage, deleteInlineMessage, congifMessage];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2140,
        "wires": [
            [
                "b58fcfa2f9d08c83"
            ],
            [
                "b58fcfa2f9d08c83"
            ],
            [
                "5bd2940289498b55"
            ]
        ]
    },
    {
        "id": "5bd2940289498b55",
        "type": "mqtt out",
        "z": "bb32693f1e238fb3",
        "name": "",
        "topic": "sensors/simulation/update",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "24f8f90e89fb0dcc",
        "x": 1490,
        "y": 1940,
        "wires": []
    },
    {
        "id": "12c9d4086aa931e7",
        "type": "inject",
        "z": "bb32693f1e238fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "d4a7c59e69d97b71"
            ]
        ]
    },
    {
        "id": "d4a7c59e69d97b71",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Garbage Collector",
        "func": "// Ottieni tutte le chiavi del contesto flow\nvar contextKeys = flow.keys(); // Specifica lo store 'file', oppure 'memory' se necessario\n\n// Conta gli oggetti rimossi\nvar removedCount = 0;\n\n// Itera su tutte le chiavi\ncontextKeys.forEach(function(key) {\n    // Ottieni il valore associato alla chiave\n    var value = flow.get(key, \"file\"); // Specifica lo store appropriato\n\n    // Controlla se il valore è un oggetto vuoto\n    if (value && typeof value === \"object\" && Object.keys(value).length === 0) {\n        // Rimuovi la chiave dal contesto\n        flow.set(key, undefined);\n        removedCount++;\n        node.warn(\"Rimosso oggetto vuoto: \" + key);\n    }\n});\n\n// Debug finale\n//node.warn(\"Pulizia completata. Oggetti vuoti rimossi: \" + removedCount);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "48070c787a2a837f",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/toggle_alert",
        "description": "Enable or disable the reception of alerts.",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 290,
        "y": 580,
        "wires": [
            [
                "d989cee4de450ddf"
            ],
            []
        ]
    },
    {
        "id": "d989cee4de450ddf",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "/toggle_alert",
        "func": "var helpMessage = \"Do you want to activate alerts?\";\nvar opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Yes\",\n                    \"callback_data\": \"A YES\"\n                },\n                {\n                    \"text\": \"No\",\n                    \"callback_data\": \"A NO\"\n                }]\n            ]\n  })\n};\n\nmsg.payload.content = helpMessage;\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "8ace769ee009b9aa"
            ]
        ]
    },
    {
        "id": "8ace769ee009b9aa",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "8f98493fc538890a"
            ]
        ]
    },
    {
        "id": "8f98493fc538890a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdToggleAllert nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\n// Salva il messaggio\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdToggleAllert = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nnode.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "da8d85276f3785ff",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva la scelta del toggle Allert",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdToggleAllert) {\n    node.error(\"messageIdToggleAllert ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\n// salva la scelta\nconst storedChats = flow.get('chats') || [];\nconst chats = new Map(storedChats);\nchats.set(chatContextKey, msg.payload.content.split(\" \")[1] == \"YES\");\n\nvar replyText = msg.payload.content.split(\" \")[1] == \"YES\" ? \"Alerts have been *activated* for this chat\\\\!\":\"Alerts have been *deactivated* for this chat\\\\!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'MarkdownV2'\n        },\n        content: replyText\n    }\n};\n\nvar deleteInlineMessage = {\n    // msg.payload.type = 'deleteMessage';\n    // msg.payload.content = idMessage\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdToggleAllert\n    }\n};\n\ndelete chatContext.messageIdToggleAllert;\n\nflow.set(chatContextKey, chatContext);\nflow.set('chats', Array.from(chats.entries()));\n\n\nreturn [sendTextMessage, deleteInlineMessage];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2220,
        "wires": [
            [
                "51ec93ced4a852c2"
            ],
            [
                "51ec93ced4a852c2"
            ]
        ]
    },
    {
        "id": "51ec93ced4a852c2",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1490,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "b247f120d5335c41",
        "type": "switch",
        "z": "bb32693f1e238fb3",
        "name": "TCancel\\n T10\\n T11\\n T12\\n T0\\n T1\\n T2\\n T3\\n T4\\n T5\\n T6\\n T7\\n T8\\n T9\\n  otherwise",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "TCancel",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^T10",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T11",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T12",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T0",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T1",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T2",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T3",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T4",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T5",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T6",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T7",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T8",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^T9",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 15,
        "x": 660,
        "y": 2480,
        "wires": [
            [
                "ec1d620b3538640c"
            ],
            [
                "140d1cef39a69e71"
            ],
            [
                "01373f6a28222ac6"
            ],
            [
                "122668a4219d7510"
            ],
            [
                "e1b82e9f3ce1210d"
            ],
            [
                "32160f31f502995f"
            ],
            [
                "2ecd231db192d564"
            ],
            [
                "293beffcfe631193"
            ],
            [
                "76f9aef93b813e69"
            ],
            [
                "7b154a32a9946a78"
            ],
            [
                "c248b16deb8c4683"
            ],
            [
                "76f709bd1353ac86"
            ],
            [
                "2c2dc52b79ba2099"
            ],
            [
                "34422461f7222e04"
            ],
            []
        ]
    },
    {
        "id": "ec1d620b3538640c",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Abort Change thresholds",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateSimulationContext = chatContext.updateSimulationContext;\nif(chatContext.updateSimulationContext){\n    delete chatContext.updateSimulationContext;\n}\n\nvar newText = \"OK, you can reuse the /change_thresholds command when you are ready to change thresholds for simulation alerts!\";\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline se presente\n});\n\nvar options = {\n    chat_id: msg.payload.chatId,\n    reply_markup: reply_markup_empty,\n    message_id: chatContext.messageIdChangeThresholds\n};\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\ndelete chatContext.messageIdChangeThresholds;\ndelete chatContext.updateThresholdsContext;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2260,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "879783e120251e28",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "sendTextMessage",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1490,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "c43039340ae1fab1",
        "type": "telegram command",
        "z": "bb32693f1e238fb3",
        "name": "",
        "command": "/change_thresholds",
        "description": "Update the thresholds for alert",
        "registercommand": true,
        "language": "",
        "scope": "all_private_chats",
        "bot": "227d6c6a69368223",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 310,
        "y": 660,
        "wires": [
            [
                "dcbf42301d581e1a"
            ],
            []
        ]
    },
    {
        "id": "dcbf42301d581e1a",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "keyboard Change thresholds Step 0 ",
        "func": "var opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Yes\",\n                    \"callback_data\": \"T0 YES\"\n                },\n                {\n                    \"text\": \"No\",\n                    \"callback_data\": \"T0 NO\"\n                }]\n            ]\n  })\n};\nmsg.payload.content = 'Are you sure you want to change the thresholds for simulation alerts?';\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 660,
        "wires": [
            [
                "ae347043c2f82ba3"
            ]
        ]
    },
    {
        "id": "ae347043c2f82ba3",
        "type": "telegram sender",
        "z": "bb32693f1e238fb3",
        "name": "",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "5db7aeda46fb9706"
            ]
        ]
    },
    {
        "id": "5db7aeda46fb9706",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva IdMessaggio messageIdChangeThresholds nel ChatContex",
        "func": "var chatId = msg.payload.chatId;\nif (!chatId || typeof chatId !== \"number\") {\n    node.error(\"chatId non valido: \" + chatId);\n    return null;\n}\n\nvar chatContextKey = \"chat_\" + chatId;\nvar chatContext = flow.get(chatContextKey) || {};\n\nchatContext.messageIdChangeThresholds = msg.payload.sentMessageId;\n\nflow.set(chatContextKey, chatContext);\n\n// Debug\nnode.warn(\"Salvato nel Flow: chatContextKey=\" + chatContextKey + \", contenuto=\" + JSON.stringify(chatContext));\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 660,
        "wires": []
    },
    {
        "id": "e1b82e9f3ce1210d",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Keyboard Change thresholds Step 1",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n// ID del messaggio con la tastiera inline\n\n// Recupera la scelta dell'utente\nvar userChoice = msg.payload.content; // Es. \"T0 YES\" o \"T1 NO\"\n\n// Prepara il nuovo contenuto del messaggio basato sulla scelta\nvar newText;\nif (userChoice === \"T0 YES\") {\n    newText = \"\\r\\nGreat, let's get started!!! \\r\\n\\r\\nWhat is the <strong>minimum threshold</strong> value for <strong>Soil Moisture</strong> sensors?\";\n} else if (userChoice === \"T0 NO\") {\n    newText = \"OK, you can reuse the /change_thresholds command when you are ready to change thresholds for simulation alerts!\";\n} else {\n    newText = \"Invalid choice!\";\n}\n\nvar reply_markup_empty = JSON.stringify({\n    \"inline_keyboard\": [] // Rimuove la tastiera inline\n});\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"DEFAULT MIN: 20%\",\n            \"callback_data\": \"T1 20\"\n        }],\n        [\n            {\n                \"text\": \"5%\",\n                \"callback_data\": \"T1 5\"\n            },\n            {\n                \"text\": \"10%\",\n                \"callback_data\": \"T1 10\"\n            },\n            {\n                \"text\": \"15%\",\n                \"callback_data\": \"T1 15\"\n            }\n        ],\n        [\n            {\n                \"text\": \"20%\",\n                \"callback_data\": \"T1 20\"\n            },\n            {\n                \"text\": \"25%\",\n                \"callback_data\": \"T1 25\"\n            },\n            {\n                \"text\": \"30%\",\n                \"callback_data\": \"T1 30\"\n            }\n        ],\n        [\n            {\n                \"text\": \"35%\",\n                \"callback_data\": \"T1 35\"\n            },\n            {\n                \"text\": \"40%\",\n                \"callback_data\": \"T1 40\"\n            },\n            {\n                \"text\": \"45%\",\n                \"callback_data\": \"T1 45\"\n            }\n        ],\n        [\n            {\n                \"text\": \"❌   ABORT   ❌\",\n                \"callback_data\": \"TCancel\"\n            }]\n    ]\n});\n\nif (userChoice === \"T0 YES\") {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n} else {\n    var options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup_empty,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n    msg.payload.type = 'editMessageText';\n    msg.payload.content = newText;\n    msg.payload.options = options;\n\n    delete chatContext.messageIdChangeThresholds;\n    flow.set(chatContextKey, chatContext);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2300,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "32160f31f502995f",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 1, presenta step 2 ",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar currentConfigKey = \"thresholds_configuration\";\nvar currentConfig = flow.get(currentConfigKey) || {};\nvar updateThresholdsContext = chatContext.updateThresholdsContext || {};\nupdateThresholdsContext = {\n    soilMoisture: { min: parseInt(msg.payload.content.split(\" \")[1], 10), max: 80 },\n    temperature: { min: 0, max: 35 }, // default value\n    ph: { min: 5.5, max: 7.5 }, // default value\n    salinity: { min: 200, max: 1500 }, // default value\n    humidity: { min: 30, max: 90 }, // default value\n    rain: { max: 50 } // default value\n};\n\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\nvar weatherText;\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Soil Moisture</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"%</strong>! Great! \\r\\n\\r\\n Now we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Soil Moisture</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 80%\",\n                    \"callback_data\": \"T2 80\"\n                }],\n                [\n                    {\n                        \"text\": \"50%\",\n                        \"callback_data\": \"T2 50\"\n                    },\n                    {\n                        \"text\": \"55%\",\n                        \"callback_data\": \"T2 55\"\n                    },\n                    {\n                        \"text\": \"60%\",\n                        \"callback_data\": \"T2 60\"\n                    }\n                ],\n                [\n                    {\n                        \"text\": \"65%\",\n                        \"callback_data\": \"T2 65\"\n                    },\n                    {\n                        \"text\": \"70%\",\n                        \"callback_data\": \"T2 70\"\n                    },\n                    {\n                        \"text\": \"75%\",\n                        \"callback_data\": \"T2 75\"\n                    }\n                ],\n                [\n                    {\n                        \"text\": \"80%\",\n                        \"callback_data\": \"T2 80\"\n                    },\n                    {\n                        \"text\": \"85%\",\n                        \"callback_data\": \"T2 85\"\n                    },\n                    {\n                        \"text\": \"90%\",\n                        \"callback_data\": \"T2 90\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2340,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "2ecd231db192d564",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 2, presenta step 3",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.soilMoisture.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Soil Moisture</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"%</strong>! Great! \\r\\n\\r\\n Now we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Temperature</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MIN: 0°C\",\n                    \"callback_data\": \"T3 0\"\n                }],\n                [\n                    {\n                        \"text\": \"-5°C\",\n                        \"callback_data\": \"T3 -5\"\n                    },\n                    {\n                        \"text\": \"0°C\",\n                        \"callback_data\": \"T3 0\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"5°C\",\n                        \"callback_data\": \"T3 5\"\n                    },\n                    {\n                        \"text\": \"10°C\",\n                        \"callback_data\": \"T3 10\"\n                    }\n                ],\n                [\n                    {\n                        \"text\": \"15°C\",\n                        \"callback_data\": \"T3 15\"\n                    },\n                    {\n                        \"text\": \"20°C\",\n                        \"callback_data\": \"T3 20\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2380,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "293beffcfe631193",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 3, presenta step 4",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.temperature.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Temperature</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Temperature</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 35°C\",\n                    \"callback_data\": \"T4 35\"\n                }],\n                [\n                    {\n                        \"text\": \"25°C\",\n                        \"callback_data\": \"T4 25\"\n                    },\n                    {\n                        \"text\": \"30°C\",\n                        \"callback_data\": \"T4 30\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"35°C\",\n                        \"callback_data\": \"T4 35\"\n                    },\n                    {\n                        \"text\": \"40°C\",\n                        \"callback_data\": \"T4 40\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2420,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "76f9aef93b813e69",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 4, presenta step 5",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.temperature.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Temperature</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Ph</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MIN: 5.5\",\n                    \"callback_data\": \"T5 5.5\"\n                }],\n                [\n                    {\n                        \"text\": \"3.0\",\n                        \"callback_data\": \"T5 3.0\"\n                    },\n                    {\n                        \"text\": \"3.5\",\n                        \"callback_data\": \"T5 3.5\"\n                    },\n                    {\n                        \"text\": \"4.0\",\n                        \"callback_data\": \"T5 4.0\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"4.5\",\n                        \"callback_data\": \"T5 4.5\"\n                    },\n                    {\n                        \"text\": \"5.0\",\n                        \"callback_data\": \"T5 5.0\"\n                    },\n                    {\n                        \"text\": \"5.5\",\n                        \"callback_data\": \"T5 5.5\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"6.0\",\n                        \"callback_data\": \"T5 6.0\"\n                    },\n                    {\n                        \"text\": \"6.5\",\n                        \"callback_data\": \"T5 6.5\"\n                    },\n                    {\n                        \"text\": \"7.0\",\n                        \"callback_data\": \"T5 7.0\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2460,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "7b154a32a9946a78",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 5, presenta step 6",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.ph.min = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Ph</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Ph</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 7.5\",\n                    \"callback_data\": \"T6 7.5\"\n                }],\n                [\n                    {\n                        \"text\": \"7.5\",\n                        \"callback_data\": \"T6 7.5\"\n                    },\n                    {\n                        \"text\": \"8.0\",\n                        \"callback_data\": \"T6 8.0\"\n                    },\n                    {\n                        \"text\": \"8.5\",\n                        \"callback_data\": \"T6 8.5\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"9.0\",\n                        \"callback_data\": \"T6 9.0\"\n                    },\n                    {\n                        \"text\": \"9.5\",\n                        \"callback_data\": \"T6 9.5\"\n                    },\n                    {\n                        \"text\": \"10.0\",\n                        \"callback_data\": \"T6 10.0\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"10.5\",\n                        \"callback_data\": \"T6 10.5\"\n                    },\n                    {\n                        \"text\": \"11.0\",\n                        \"callback_data\": \"T6 11.0\"\n                    },\n                    {\n                        \"text\": \"11.5\",\n                        \"callback_data\": \"T6 11.5\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2500,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "c248b16deb8c4683",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 6, presenta step 7",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.ph.max = parseFloat(msg.payload.content.split(\" \")[1]);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Ph</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Salinity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MIN: 200\",\n                    \"callback_data\": \"T7 200\"\n                }],\n                [\n                    {\n                        \"text\": \"100\",\n                        \"callback_data\": \"T7 100\"\n                    },\n                    {\n                        \"text\": \"200\",\n                        \"callback_data\": \"T7 200\"\n                    },\n                    {\n                        \"text\": \"300\",\n                        \"callback_data\": \"T7 300\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"400\",\n                        \"callback_data\": \"T7 400\"\n                    },\n                    {\n                        \"text\": \"500\",\n                        \"callback_data\": \"T7 500\"\n                    },\n                    {\n                        \"text\": \"600\",\n                        \"callback_data\": \"T7 600\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"700\",\n                        \"callback_data\": \"T7 700\"\n                    },\n                    {\n                        \"text\": \"800\",\n                        \"callback_data\": \"T7 800\"\n                    },\n                    {\n                        \"text\": \"900\",\n                        \"callback_data\": \"T7 900\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2540,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "76f709bd1353ac86",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 7, presenta step 8",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.salinity.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Salinity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Salinity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 1500\",\n                    \"callback_data\": \"T8 1500\"\n                }],\n                [\n                    {\n                        \"text\": \"1100\",\n                        \"callback_data\": \"T8 1100\"\n                    },\n                    {\n                        \"text\": \"1200\",\n                        \"callback_data\": \"T8 1200\"\n                    },\n                    {\n                        \"text\": \"1300\",\n                        \"callback_data\": \"T8 1300\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"1400\",\n                        \"callback_data\": \"T8 1400\"\n                    },\n                    {\n                        \"text\": \"1500\",\n                        \"callback_data\": \"T8 1500\"\n                    },\n                    {\n                        \"text\": \"1600\",\n                        \"callback_data\": \"T8 1600\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"1700\",\n                        \"callback_data\": \"T8 1700\"\n                    },\n                    {\n                        \"text\": \"1800\",\n                        \"callback_data\": \"T8 1800\"\n                    },\n                    {\n                        \"text\": \"1900\",\n                        \"callback_data\": \"T8 1900\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2580,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "2c2dc52b79ba2099",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 8, presenta step 9",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.salinity.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Salinity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Minimum Threshold</strong> value for the <strong>Humidity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MIN: 30%\",\n                    \"callback_data\": \"T9 1500\"\n                }],\n                [\n                    {\n                        \"text\": \"10%\",\n                        \"callback_data\": \"T9 10\"\n                    },\n                    {\n                        \"text\": \"20%\",\n                        \"callback_data\": \"T9 20\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"30%\",\n                        \"callback_data\": \"T9 30\"\n                    },\n                    {\n                        \"text\": \"40%\",\n                        \"callback_data\": \"T9 40\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2620,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "34422461f7222e04",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 9, presenta step 10",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.humidity.min = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Minimum Threshold</strong> value for <strong>Humidity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"°C</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Humidity</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 90%\",\n                    \"callback_data\": \"T10 90\"\n                }],\n                [\n                    {\n                        \"text\": \"60%\",\n                        \"callback_data\": \"T10 60\"\n                    },\n                    {\n                        \"text\": \"70%\",\n                        \"callback_data\": \"T10 70\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"80%\",\n                        \"callback_data\": \"T10 80\"\n                    },\n                    {\n                        \"text\": \"90%\",\n                        \"callback_data\": \"T10 90\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2660,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "140d1cef39a69e71",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 10, presenta step 11",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.humidity.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Humidity</strong> sensors is <strong>\" + msg.payload.content.split(\" \")[1] +\"%</strong>!\\r\\nGreat! \\r\\n\\r\\nNow we have to decide what will be the <strong>Maximum Threshold</strong> value for the <strong>Rain</strong> sensors!\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"DEFAULT MAX: 40 mm\",\n                    \"callback_data\": \"T11 90\"\n                }],\n                [\n                    {\n                        \"text\": \"5 mm\",\n                        \"callback_data\": \"T11 5\"\n                    },\n                    {\n                        \"text\": \"10 mm\",\n                        \"callback_data\": \"T11 10\"\n                    },\n                    {\n                        \"text\": \"20 mm\",\n                        \"callback_data\": \"T11 20\"\n                    }\n                ],\n                [  \n                    {\n                        \"text\": \"30 mm\",\n                        \"callback_data\": \"T11 30\"\n                    },\n                    {\n                        \"text\": \"40 mm\",\n                        \"callback_data\": \"T11 40\"\n                    },\n                    {\n                        \"text\": \"50 mm\",\n                        \"callback_data\": \"T11 50\"\n                    }\n                ],\n                [\n                {\n                    \"text\": \"❌   ABORT   ❌\",\n                    \"callback_data\": \"TCancel\"\n                }]\n            ]\n});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        message_id: chatContext.messageIdChangeThresholds,\n        parse_mode: 'HTML'\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\nflow.set(chatContextKey, chatContext);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2700,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "01373f6a28222ac6",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Salva step 11, peresenta il riepilogo",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"Message ID (messageIdChangeThresholds) non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = chatContext.updateThresholdsContext;\n\nif (!updateThresholdsContext) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\nupdateThresholdsContext.rain.max = parseInt(msg.payload.content.split(\" \")[1], 10);\n\nchatContext.updateThresholdsContext = updateThresholdsContext;\n\n// Debug\nnode.warn(\"Salvato nel Flow: updateThresholdsContext=\" + JSON.stringify(updateThresholdsContext));\n\n\nvar newText = \"OK, the current <strong>Maximum Threshold</strong> value for <strong>Humidity</strong> sensors is <strong> \" + msg.payload.content.split(\" \")[1] + \"mm</strong>!\\r\\n\\r\\n Excellent!\\r\\n\\r\\n  This is a summary of the Thresholds:<pre>\" + JSON.stringify(updateThresholdsContext, null, 2) +\"</pre>\\r\\n\\r\\nDo you want to confirm?\";\n\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\":[\n    [\n        {\n            \"text\": \"YES\",\n            \"callback_data\": \"T12 YES\"\n        },\n        {\n            \"text\": \"NO\",\n            \"callback_data\": \"TCancel\"\n        }\n    ]\n]});\n\nvar options = {\n        chat_id: msg.payload.chatId,\n        reply_markup: reply_markup,\n        parse_mode: 'HTML',\n        message_id: chatContext.messageIdChangeThresholds\n    };\n\nmsg.payload.type = 'editMessageText';\nmsg.payload.content = newText;\nmsg.payload.options = options;\n\n\nflow.set(chatContextKey, chatContext);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2740,
        "wires": [
            [
                "879783e120251e28"
            ]
        ]
    },
    {
        "id": "122668a4219d7510",
        "type": "function",
        "z": "bb32693f1e238fb3",
        "name": "Conferma, Elimina il messaggio, invia la config",
        "func": "var chatId = msg.payload.chatId;\nvar chatContextKey = \"chat_\" + chatId;\n\nvar chatContext = flow.get(chatContextKey);\n\nif (!chatContext || !chatContext.messageIdChangeThresholds) {\n    node.error(\"messageIdChangeThresholds ID non trovato nel Flow Context per chatId: \" + chatId);\n    return null;\n}\n\nvar updateThresholdsContext = { ...chatContext.updateThresholdsContext }; // Copia dell'oggetto\n\nif (!updateThresholdsContext || !updateThresholdsContext.soilMoisture || !updateThresholdsContext.temperature || !updateThresholdsContext.ph || !updateThresholdsContext.salinity || !updateThresholdsContext.humidity || !updateThresholdsContext.rain) {\n    node.error(\"updateThresholdsContext non trovato nel Flow Context per chatId: \" + chatId);\n    node.error(\"!updateThresholdsContext.soilMoisture: \" + !updateThresholdsContext.soilMoisture);\n    node.error(\"!updateThresholdsContext.temperature: \" + !updateThresholdsContext.temperature);\n    node.error(\"!updateThresholdsContext.ph: \" + !updateThresholdsContext.ph);\n    node.error(\"!updateThresholdsContext.salinity: \" + !updateThresholdsContext.salinity);\n    node.error(\"!updateThresholdsContext.humidity: \" + !updateThresholdsContext.humidity);\n    node.error(\"!updateThresholdsContext.rain: \" + !updateThresholdsContext.rain);\n    return null;\n}\n\nvar replyText = \"<strong>Thresholds</strong> Saved and Sent to Server!\";\n\nvar sendTextMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        options: {\n            parse_mode: 'HTML',\n        },\n        content: replyText\n    }\n};\n\nvar deleteInlineMessage = {\n    payload: {\n        chatId: chatId,\n        type: 'deleteMessage',\n        content: chatContext.messageIdChangeThresholds\n    }\n};\n\ndelete chatContext.updateThresholdsContext;\ndelete chatContext.messageIdChangeThresholds;\n\nflow.set(chatContextKey, chatContext);\n\nreturn [sendTextMessage, deleteInlineMessage, updateThresholdsContext];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2800,
        "wires": [
            [
                "879783e120251e28"
            ],
            [
                "879783e120251e28"
            ],
            [
                "62971215180212fa"
            ]
        ]
    },
    {
        "id": "62971215180212fa",
        "type": "debug",
        "z": "bb32693f1e238fb3",
        "name": "INVIO CONFIG ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2800,
        "wires": []
    },
    {
        "id": "5f524d010a014058",
        "type": "mqtt in",
        "z": "042284347e59efcf",
        "name": "",
        "topic": "agriculture/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "24f8f90e89fb0dcc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 610,
        "y": 600,
        "wires": [
            [
                "c504053a46e6b727"
            ]
        ]
    },
    {
        "id": "c504053a46e6b727",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "8eb7215b63983688",
        "type": "influxdb in",
        "z": "042284347e59efcf",
        "influxdb": "8cbf2748df1bc57f",
        "name": "Read InfluxDB humidity",
        "query": "from(bucket: \"SA-FMS\")\n  |> range(start: -5s)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"smart_agriculture_measurements\")\n  |> filter(fn: (r) => r[\"field_id\"] == \"field2\" or r[\"field_id\"] == \"field1\")\n  |> filter(fn: (r) => r[\"sensor_type\"] == \"humidity\" or r[\"sensor_type\"] == \"temperature\")\n  |> yield(name: \"last\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 770,
        "y": 400,
        "wires": [
            [
                "689cfa5331468852"
            ]
        ]
    },
    {
        "id": "318cecd3ba2ab2ff",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 700,
        "wires": []
    },
    {
        "id": "10196953f19fce19",
        "type": "telegram sender",
        "z": "042284347e59efcf",
        "name": "Alert",
        "bot": "227d6c6a69368223",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1510,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "f04e1a5057727141",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 1",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "318cecd3ba2ab2ff"
            ]
        ]
    },
    {
        "id": "c86dd50c6146831b",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 2",
        "func": "// Accedi all'array nel payload\nlet data = msg.payload[0];\n\n// Estrai i valori desiderati\nmsg.payload = {\n    field_id: data.field_id,\n    sensor_type: data.sensor_type,\n    value: data._value\n};\n\n// Restituisci il messaggio modificato\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 800,
        "wires": [
            [
                "3d717226fb14f6cb"
            ]
        ]
    },
    {
        "id": "3d717226fb14f6cb",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 800,
        "wires": []
    },
    {
        "id": "babedfa59590221f",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 3",
        "func": "// Accedi all'array nel payload\nlet data = msg.payload[0];\n\n// Crea un messaggio formattato\nlet text = `Valori rilevati:\n- Campo: ${data.field_id}\n    - Tipo sensore: ${data.sensor_type} : Valore: ${data._value}`;\n// Imposta il payload per Telegram\nmsg.payload = {\n    chatId: \"CHAT_ID\", // Sostituisci con l'ID della chat o del canale Telegram\n    type: \"message\",\n    content: text\n};\n\n// Restituisci il messaggio\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 880,
        "wires": [
            [
                "f4daa727362fc1a0"
            ]
        ]
    },
    {
        "id": "f4daa727362fc1a0",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 880,
        "wires": []
    },
    {
        "id": "0fcfc409acc8a53b",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "function 4",
        "func": "// Inizializza una mappa per raggruppare i dati per campo\nlet groupedData = {};\n\n// Itera attraverso tutti i valori ricevuti (msg.payload è un array)\nmsg.payload.forEach(item => {\n    // Ottieni il field_id e inizializza il gruppo se necessario\n    let field = item.field_id;\n    if (!groupedData[field]) {\n        groupedData[field] = [];\n    }\n\n    // Aggiungi il sensore e il valore al gruppo del campo\n    groupedData[field].push({\n        sensor_type: item.sensor_type,\n        value: item._value\n    });\n});\n\n// Crea un messaggio formattato\nlet message = '';\nObject.keys(groupedData).forEach(field => {\n    message += `Field ${field}\\n`;\n    groupedData[field].forEach(sensor => {\n        message += `   - ${sensor.sensor_type}: ${sensor.value}\\n`;\n    });\n    message += '\\n'; // Aggiungi una riga vuota tra i campi\n});\n\n// Imposta il payload per invio\nmsg.payload = message;\n\n// Restituisci il messaggio\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 960,
        "wires": [
            [
                "544a99734b4a83fc"
            ]
        ]
    },
    {
        "id": "544a99734b4a83fc",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 960,
        "wires": []
    },
    {
        "id": "689cfa5331468852",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Thresholds Alert Checker",
        "func": "// Definisci le soglie di allerta\nconst thresholds = {\n    soilMoisture: { min: 20, max: 80 },\n    temperature: { min: 0, max: 35 },\n    ph: { min: 5.5, max: 7.5 },\n    salinity: { max: 1500 },\n    humidity: { min: 30, max: 90 },\n    rain: { max: 50 }\n};\n\n// Array per memorizzare i messaggi di allerta\nlet alerts = [];\n\n// Itera sui valori dei sensori\nmsg.payload.forEach(sensorData => {\n    let sensorType = sensorData.sensor_type; // Tipo di sensore\n    let value = sensorData._value; // Valore del sensore\n    let timestamp = sensorData._time; // Timestamp della misurazione\n    let fieldId = sensorData.field_id; // Campo a cui appartiene il sensore\n\n    // Controlla se il sensore supera le soglie\n    if (thresholds[sensorType]) {\n        let limits = thresholds[sensorType];\n        if ((limits.min !== undefined && value < limits.min) || \n            (limits.max !== undefined && value > limits.max)) {\n            // Crea il messaggio di allerta\n            alerts.push(`⚠️ ALERT:\n- Field: ${fieldId}\n- Sensor: ${sensorType}\n- Value: ${value}\n- Threshold: ${limits.min !== undefined && value < limits.min ? `Min ${limits.min}` : `Max ${limits.max}`}\n- Timestamp: ${timestamp}`);\n        }\n    }\n});\n\n// Se ci sono allerta, imposta il payload per invio\nif (alerts.length > 0) {\n    msg.payload = alerts.join('\\n\\n'); // Unisci tutti i messaggi di allerta\n} else {\n    //msg.payload = \"✅ No alerts detected.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "a547a7c2d2c53e98"
            ]
        ]
    },
    {
        "id": "a547a7c2d2c53e98",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 400,
        "wires": []
    },
    {
        "id": "312e574b09a4aec1",
        "type": "trigger",
        "z": "042284347e59efcf",
        "name": "",
        "op1": "true",
        "op2": "",
        "op1type": "bool",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 540,
        "y": 400,
        "wires": [
            [
                "8eb7215b63983688"
            ]
        ]
    },
    {
        "id": "f1db4e2770ca5997",
        "type": "link in",
        "z": "042284347e59efcf",
        "name": "start-sim",
        "links": [
            "c3658e8c395688ef"
        ],
        "x": 205,
        "y": 360,
        "wires": [
            [
                "8e080e5f39f10e3d"
            ]
        ]
    },
    {
        "id": "44df0d1686a26b90",
        "type": "link in",
        "z": "042284347e59efcf",
        "name": "stop-sim",
        "links": [
            "92afd731d3dbf926"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "d867224f8b76a4a4"
            ]
        ]
    },
    {
        "id": "d867224f8b76a4a4",
        "type": "change",
        "z": "042284347e59efcf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 440,
        "wires": [
            [
                "312e574b09a4aec1"
            ]
        ]
    },
    {
        "id": "8e080e5f39f10e3d",
        "type": "delay",
        "z": "042284347e59efcf",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "312e574b09a4aec1"
            ]
        ]
    },
    {
        "id": "39704c3f722ec025",
        "type": "debug",
        "z": "042284347e59efcf",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 180,
        "wires": []
    },
    {
        "id": "a7b02885804868a9",
        "type": "inject",
        "z": "042284347e59efcf",
        "name": "Fetch data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"thresholds\":{\"soilMoisture\":{\"min\":20,\"max\":80},\"temperature\":{\"min\":0,\"max\":35},\"ph\":{\"min\":5.5,\"max\":7.5},\"salinity\":{\"max\":1500},\"humidity\":{\"min\":30,\"max\":90},\"rain\":{\"max\":50}}}",
        "payloadType": "json",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "347eba6e7773c383"
            ]
        ]
    },
    {
        "id": "347eba6e7773c383",
        "type": "join",
        "z": "042284347e59efcf",
        "name": "threshold and values",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "39704c3f722ec025"
            ]
        ]
    },
    {
        "id": "cf1204e4e5b4a199",
        "type": "function",
        "z": "042284347e59efcf",
        "name": "Refactor value from InfluxDB query",
        "func": "// Inizializza un oggetto strutturato per i sensori\nlet sensors = {\n    sensors: msg.payload // Sposta i dati dell'array nella proprietà `sensors`\n};\n\n// Imposta `msg.payload` come l'oggetto convertito\nmsg.payload = sensors;\n\n// Restituisci il messaggio aggiornato\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "347eba6e7773c383"
            ]
        ]
    }
]